<?xml version="1.0" encoding="ISO-8859-1"?>
<fpdoc-descriptions>
<package name="morphunits">

<!--
  ====================================================================
    EXEC
  ====================================================================
-->

<module name="EXEC">
<short>This unit contains the types and wrapper functions for the exec.library.</short>
<descr>This unit contains the types and wrapper functions for the exec.library. This library supports the very basic
  functions of Amiga. It provides function for working with other libraries, tasks and other basic structures.
</descr>

<!-- alias type Visibility: default -->
<element name="STRPTR">
<short>Pointer to a string (compareable with a PChar)</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- alias type Visibility: default -->
<element name="ULONG">
<short>unsigned 32-Bit integer value</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- alias type Visibility: default -->
<element name="LONG">
<short>signed 32-Bit integer Value</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- alias type Visibility: default -->
<element name="APTR">
<short>A type free pointer.</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- alias type Visibility: default -->
<element name="BPTR">
<short>A type free pointer. in ABIv0 its just a Pointer.</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- alias type Visibility: default -->
<element name="BSTR">
<short>Pointer to a string, in ABIv0 just like PChar.</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- alias type Visibility: default -->
<element name="BOOL">
<short>Boolean representation</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- alias type Visibility: default -->
<element name="UWORD">
<short>unsigned 16-Bit Value</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- alias type Visibility: default -->
<element name="WORDBITS">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- alias type Visibility: default -->
<element name="LONGBITS">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- pointer type Visibility: default -->
<element name="PLONGBITS">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- alias type Visibility: default -->
<element name="UBYTE">
<short>unsigned 8-Bit Value</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- pointer type Visibility: default -->
<element name="PULONG">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- pointer type Visibility: default -->
<element name="PAPTR">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- pointer type Visibility: default -->
<element name="PLONG">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="ltrue">
<short>Representation of True for Amiga functions</short>
<descr>Some Amiga functions expect a "1" for as True value and a "0" as False value and cannot handle the "-1" set by freepascal.
</descr>
<seealso>
<link id="lfalse"/>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="lfalse">
<short>Representation of False for Amiga function</short>
<descr>Some Amiga functions expect a "1" for as True value and a "0" as False value and cannot handle the "-1" set by freepascal.
</descr>
<seealso>
<link id="ltrue"/>
</seealso>
</element>

<!-- pointer type Visibility: default -->
<element name="pNode">
<short>Pointer to node structure</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- record type Visibility: default -->
<element name="tNode">
<short>List node structure, Each member in a list starts with a node.</short>
<descr>
</descr>
<seealso>
<link id="tMinNode"/>
<link id="tList"/>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="tNode.ln_Succ">
<short>Pointer next node of the list.</short>
</element>

<!-- variable Visibility: default -->
<element name="tNode.ln_Pred">
<short>Pointer previous node of the list.</short>
</element>

<!-- variable Visibility: default -->
<element name="tNode.ln_Name">
<short>Identification string</short>
</element>

<!-- variable Visibility: default -->
<element name="tNode.ln_Type">
<short>Type code.</short>
</element>

<!-- variable Visibility: default -->
<element name="tNode.ln_Pri">
<short>Priority of node, mainly for list sorting.</short>
</element>

<!-- pointer type Visibility: default -->
<element name="pMinNode">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- record type Visibility: default -->
<element name="tMinNode">
<short>Minimal list entry without any type or name.</short>
<descr>
</descr>
<seealso>
<link id="tNode"/>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="tMinNode.mln_Succ">
<short>Pointer next node of the list.</short>
</element>

<!-- variable Visibility: default -->
<element name="tMinNode.mln_Pred">
<short>Pointer previous node of the list.</short>
</element>

<!-- constant Visibility: default -->
<element name="NT_UNKNOWN">
<short>For <link id="TNode"/>.ln_Type</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="NT_TASK">
<short>For <link id="TNode"/>.ln_Type identifies an Exec Task</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="NT_INTERRUPT">
<short>For <link id="TNode"/>.ln_Type identifies an interrupt</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="NT_DEVICE">
<short>For <link id="TNode"/>.ln_Type identifies a device</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="NT_MSGPORT">
<short>For <link id="TNode"/>.ln_Type identifies a message port</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="NT_MESSAGE">
<short>For <link id="TNode"/>.ln_Type indicates message is currently pending</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="NT_FREEMSG">
<short>For <link id="TNode"/>.ln_Type Message has beed freed</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="NT_REPLYMSG">
<short>For <link id="TNode"/>.ln_Type Message has been replied</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="NT_RESOURCE">
<short>For <link id="TNode"/>.ln_Type</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="NT_LIBRARY">
<short>For <link id="TNode"/>.ln_Type</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="NT_MEMORY">
<short>For <link id="TNode"/>.ln_Type</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="NT_SOFTINT">
<short>For <link id="TNode"/>.ln_Type Internal flag used ny SoftInits</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="NT_FONT">
<short>For <link id="TNode"/>.ln_Type</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="NT_PROCESS">
<short>For <link id="TNode"/>.ln_Type identifies and Amiga Dos process</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="NT_SEMAPHORE">
<short>For <link id="TNode"/>.ln_Type</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="NT_SIGNALSEM">
<short>For <link id="TNode"/>.ln_Type identifies an signal semaphore</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="NT_BOOTNODE">
<short>For <link id="TNode"/>.ln_Type</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="NT_KICKMEM">
<short>For <link id="TNode"/>.ln_Type</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="NT_GRAPHICS">
<short>For <link id="TNode"/>.ln_Type</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="NT_DEATHMESSAGE">
<short>For <link id="TNode"/>.ln_Type</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="NT_USER">
<short>For <link id="TNode"/>.ln_Type User nodes type.</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="NT_EXTENDED">
<short>For <link id="TNode"/>.ln_Type</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- pointer type Visibility: default -->
<element name="pList">
<short>Pointer to List structure</short>
<descr>
  Exec system lists, which are used to link
  various things.  Exec provides several routines to handle list
  processing, so you can use these routines to save yourself the
  trouble of writing a list package.
</descr>
<seealso>
<link id="AddHead"/>
<link id="AddTail"/>
<link id="RemHead"/>
<link id="RemTail"/>
<link id="Remove"/>
<link id="Enqueue"/>
<link id="Exec.ExecInsert"/>
<link id="FindName"/>
</seealso>
</element>

<!-- record type Visibility: default -->
<element name="tList">
<short>List header.</short>
<descr>
  Exec system lists, which are used to link
  various things.  Exec provides several routines to handle list
  processing, so you can use these routines to save yourself the
  trouble of writing a list package.
</descr>
<seealso>
<link id="AddHead"/>
<link id="AddTail"/>
<link id="RemHead"/>
<link id="RemTail"/>
<link id="Remove"/>
<link id="Enqueue"/>
<link id="Exec.ExecInsert"/>
<link id="FindName"/>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="tList.lh_Head">
<short>Pointer to first node in list.</short>
</element>

<!-- variable Visibility: default -->
<element name="tList.lh_Tail">
<short>Pointer to last node in list.</short>
</element>

<!-- variable Visibility: default -->
<element name="tList.lh_TailPred">
<short>Pointer to node before last node in list.</short>
</element>

<!-- variable Visibility: default -->
<element name="tList.lh_Type">
<short>Type of List (NT_*)</short>
</element>

<!-- variable Visibility: default -->
<element name="tList.l_pad">
<short>Padding byte</short>
</element>

<!-- pointer type Visibility: default -->
<element name="pMinList">
<short>Pointer to a minal list structure.</short>
<descr>
  Exec system lists, which are used to link
  various things.  Exec provides several routines to handle list
  processing, so you can use these routines to save yourself the
  trouble of writing a list package.
</descr>
<seealso>
<link id="AddHead"/>
<link id="AddTail"/>
<link id="RemHead"/>
<link id="RemTail"/>
<link id="Remove"/>
<link id="Enqueue"/>
<link id="Exec.ExecInsert"/>
<link id="FindName"/>
</seealso>
</element>

<!-- record type Visibility: default -->
<element name="tMinList">
<short>Minimal list strcture.</short>
<descr>
  Exec system lists, which are used to link
  various things.  Exec provides several routines to handle list
  processing, so you can use these routines to save yourself the
  trouble of writing a list package.
</descr>
<seealso>
<link id="AddHead"/>
<link id="AddTail"/>
<link id="RemHead"/>
<link id="RemTail"/>
<link id="Remove"/>
<link id="Enqueue"/>
<link id="Exec.ExecInsert"/>
<link id="FindName"/>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="tMinList.mlh_Head">
<short>Pointer to first node in list.</short>
</element>

<!-- variable Visibility: default -->
<element name="tMinList.mlh_Tail">
<short>Pointer to last node in list.</short>
</element>

<!-- variable Visibility: default -->
<element name="tMinList.mlh_TailPred">
<short>Pointer to node before last node in list.</short>
</element>

<!-- constant Visibility: default -->
<element name="ACPU_BusErr">
<short>CPU AlertCode for <link id="Alert">Alert()</link> Hardware bus fault/access error</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="ACPU_AddressErr">
<short>CPU AlertCode for <link id="Alert">Alert()</link> Illegal address access (ie: odd)</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="ACPU_InstErr">
<short>CPU AlertCode for <link id="Alert">Alert()</link> Illegal instruction</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="ACPU_DivZero">
<short>CPU AlertCode for <link id="Alert">Alert()</link> Divide by zero</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="ACPU_CHK">
<short>CPU AlertCode for <link id="Alert">Alert()</link> Check instruction error</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="ACPU_TRAPV">
<short>CPU AlertCode for <link id="Alert">Alert()</link> TrapV instruction error</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="ACPU_PrivErr">
<short>CPU AlertCode for <link id="Alert">Alert()</link> Privilege violation error</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="ACPU_Trace">
<short>CPU AlertCode for <link id="Alert">Alert()</link> Trace error</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="ACPU_LineA">
<short>CPU AlertCode for <link id="Alert">Alert()</link> Line 1010 Emulator error</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="ACPU_LineF">
<short>CPU AlertCode for <link id="Alert">Alert()</link> Line 1111 Emulator error</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="ACPU_Format">
<short>CPU AlertCode for <link id="Alert">Alert()</link> Stack frame format error</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="ACPU_Spurious">
<short>CPU AlertCode for <link id="Alert">Alert()</link> Spurious interrupt error</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="ACPU_AutoVec1">
<short>CPU AlertCode for <link id="Alert">Alert()</link> AutoVector Level 1 interrupt error</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="ACPU_AutoVec2">
<short>CPU AlertCode for <link id="Alert">Alert()</link> AutoVector Level 2 interrupt error</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="ACPU_AutoVec3">
<short>CPU AlertCode for <link id="Alert">Alert()</link> AutoVector Level 3 interrupt error</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="ACPU_AutoVec4">
<short>CPU AlertCode for <link id="Alert">Alert()</link> AutoVector Level 4 interrupt error</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="ACPU_AutoVec5">
<short>CPU AlertCode for <link id="Alert">Alert()</link> AutoVector Level 5 interrupt error</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="ACPU_AutoVec6">
<short>CPU AlertCode for <link id="Alert">Alert()</link> AutoVector Level 6 interrupt error</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="ACPU_AutoVec7">
<short>CPU AlertCode for <link id="Alert">Alert()</link> AutoVector Level 7 interrupt error</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="AT_DeadEnd">
<short>CPU AlertCode for <link id="Alert">Alert()</link> Alert type. Error can not be recovered, Computer must be restarted.</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="AT_Recovery">
<short>CPU AlertCode for <link id="Alert">Alert()</link> Alert type. Error can be recovered, system can continue running.</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="AG_NoMemory">
<short>General AlertCode for <link id="Alert">Alert()</link> </short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="AG_MakeLib">
<short>General AlertCode for <link id="Alert">Alert()</link> </short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="AG_OpenLib">
<short>General AlertCode for <link id="Alert">Alert()</link> </short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="AG_OpenDev">
<short>General AlertCode for <link id="Alert">Alert()</link> </short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="AG_OpenRes">
<short>General AlertCode for <link id="Alert">Alert()</link> </short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="AG_IOError">
<short>General AlertCode for <link id="Alert">Alert()</link> </short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="AG_NoSignal">
<short>General AlertCode for <link id="Alert">Alert()</link> </short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="AG_BadParm">
<short>General AlertCode for <link id="Alert">Alert()</link> </short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="AG_CloseLib">
<short>General AlertCode for <link id="Alert">Alert()</link> Usually too many closes or a mismatched close</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="AG_CloseDev">
<short>General AlertCode for <link id="Alert">Alert()</link> Usually too many closes or a mismatched close</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="AG_ProcCreate">
<short>General AlertCode for <link id="Alert">Alert()</link> Process creation failed</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="AO_ExecLib">
<short>Library AlertCode for <link id="Alert">Alert()</link> </short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="AO_GraphicsLib">
<short>Library AlertCode for <link id="Alert">Alert()</link> </short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="AO_LayersLib">
<short>Library AlertCode for <link id="Alert">Alert()</link> </short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="AO_Intuition">
<short>Library AlertCode for <link id="Alert">Alert()</link> </short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="AO_MathLib">
<short>Library AlertCode for <link id="Alert">Alert()</link> </short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="AO_DOSLib">
<short>Library AlertCode for <link id="Alert">Alert()</link> </short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="AO_RAMLib">
<short>Library AlertCode for <link id="Alert">Alert()</link> </short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="AO_IconLib">
<short>Library AlertCode for <link id="Alert">Alert()</link> </short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="AO_ExpansionLib">
<short>Library AlertCode for <link id="Alert">Alert()</link> </short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="AO_DiskfontLib">
<short>Library AlertCode for <link id="Alert">Alert()</link> </short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="AO_UtilityLib">
<short>Library AlertCode for <link id="Alert">Alert()</link> </short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="AO_KeyMapLib">
<short>Library AlertCode for <link id="Alert">Alert()</link> </short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="AO_AudioDev">
<short>Device AlertCode for <link id="Alert">Alert()</link> </short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="AO_ConsoleDev">
<short>Device AlertCode for <link id="Alert">Alert()</link> </short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="AO_GamePortDev">
<short>Device AlertCode for <link id="Alert">Alert()</link> </short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="AO_KeyboardDev">
<short>Device AlertCode for <link id="Alert">Alert()</link> </short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="AO_TrackDiskDev">
<short>Device AlertCode for <link id="Alert">Alert()</link> </short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="AO_TimerDev">
<short>Device AlertCode for <link id="Alert">Alert()</link> </short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="AO_CIARsrc">
<short>Resource AlertCode for <link id="Alert">Alert()</link> </short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="AO_DiskRsrc">
<short>Resource AlertCode for <link id="Alert">Alert()</link> </short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="AO_MiscRsrc">
<short>Resource AlertCode for <link id="Alert">Alert()</link> </short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="AO_BootStrap">
<short>Resource AlertCode for <link id="Alert">Alert()</link> </short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="AO_Workbench">
<short>AlertCode for <link id="Alert">Alert()</link> </short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="AO_DiskCopy">
<short>AlertCode for <link id="Alert">Alert()</link> </short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="AO_GadTools">
<short>AlertCode for <link id="Alert">Alert()</link> </short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="AO_Unknown">
<short>AlertCode for <link id="Alert">Alert()</link> </short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="AN_ExecLib">
<short>Exec AlertCode for <link id="Alert">Alert()</link> </short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="AN_ExcptVect">
<short>Exec AlertCode for <link id="Alert">Alert()</link> 68000 exception vector checksum (obs.)</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="AN_BaseChkSum">
<short>Exec AlertCode for <link id="Alert">Alert()</link> Execbase checksum (obs.)</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="AN_LibChkSum">
<short>Exec AlertCode for <link id="Alert">Alert()</link> Library checksum failure</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="AN_MemCorrupt">
<short>Exec AlertCode for <link id="Alert">Alert()</link> Corrupt memory list detected in <link id="exec.ExecFreeMem"/></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="AN_IntrMem">
<short>Exec AlertCode for <link id="Alert">Alert()</link> No memory for interrupt servers</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="AN_InitAPtr">
<short>Exec AlertCode for <link id="Alert">Alert()</link> InitStruct() of an APTR source (obs.)</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="AN_SemCorrupt">
<short>Exec AlertCode for <link id="Alert">Alert()</link> A semaphore is in an illegal state at ReleaseSempahore</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="AN_FreeTwice">
<short>Exec AlertCode for <link id="Alert">Alert()</link> Freeing memory already freed</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="AN_BogusExcpt">
<short>Exec AlertCode for <link id="Alert">Alert()</link> illegal 68k exception taken (obs.)</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="AN_IOUsedTwice">
<short>Exec AlertCode for <link id="Alert">Alert()</link> Attempt to reuse active IORequest</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="AN_MemoryInsane">
<short>Exec AlertCode for <link id="Alert">Alert()</link> Sanity check on memory list failed during <link id="AvailMem">AvailMem(MEMF_LARGEST)</link></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="AN_IOAfterClose">
<short>Exec AlertCode for <link id="Alert">Alert()</link> IO attempted on closed IORequest</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="AN_StackProbe">
<short>Exec AlertCode for <link id="Alert">Alert()</link> Stack appears to extend out of range</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="AN_BadFreeAddr">
<short>Exec AlertCode for <link id="Alert">Alert()</link> Memory header not located. Usually an  invalid address passed to <link id="exec.ExecFreeMem"/></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="AN_BadSemaphore">
<short>Exec AlertCode for <link id="Alert">Alert()</link> An attempt was made to use the old message semaphores.</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="AN_GraphicsLib">
<short>Graphics AlertCode for <link id="Alert">Alert()</link> </short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="AN_GfxNoMem">
<short>Graphics AlertCode for <link id="Alert">Alert()</link> graphics out of memory</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="AN_GfxNoMemMspc">
<short>Graphics AlertCode for <link id="Alert">Alert()</link> MonitorSpec alloc, no memory</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="AN_LongFrame">
<short>Graphics AlertCode for <link id="Alert">Alert()</link> long frame, no memory</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="AN_ShortFrame">
<short>Graphics AlertCode for <link id="Alert">Alert()</link> short frame, no memory</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="AN_TextTmpRas">
<short>Graphics AlertCode for <link id="Alert">Alert()</link> text, no memory for TmpRas</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="AN_BltBitMap">
<short>Graphics AlertCode for <link id="Alert">Alert()</link> BltBitMap, no memory</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="AN_RegionMemory">
<short>Graphics AlertCode for <link id="Alert">Alert()</link> regions, memory not available</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="AN_MakeVPort">
<short>Graphics AlertCode for <link id="Alert">Alert()</link> MakeVPort, no memory</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="AN_GfxNewError">
<short>Graphics AlertCode for <link id="Alert">Alert()</link> </short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="AN_GfxFreeError">
<short>Graphics AlertCode for <link id="Alert">Alert()</link> </short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="AN_GfxNoLCM">
<short>Graphics AlertCode for <link id="Alert">Alert()</link> emergency memory not available</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="AN_ObsoleteFont">
<short>Graphics AlertCode for <link id="Alert">Alert()</link> unsupported font description used</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="AN_LayersLib">
<short>Layers AlertCode for <link id="Alert">Alert()</link> </short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="AN_LayersNoMem">
<short>Layers AlertCode for <link id="Alert">Alert()</link> layers out of memory</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="AN_Intuition">
<short>Intuition AlertCode for <link id="Alert">Alert()</link> </short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="AN_GadgetType">
<short>Intuition AlertCode for <link id="Alert">Alert()</link> unknown gadget type</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="AN_BadGadget">
<short>Intuition AlertCode for <link id="Alert">Alert()</link> Recovery form of AN_GadgetType</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="AN_CreatePort">
<short>Intuition AlertCode for <link id="Alert">Alert()</link> create port, no memory</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="AN_ItemAlloc">
<short>Intuition AlertCode for <link id="Alert">Alert()</link> item plane alloc, no memory</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="AN_SubAlloc">
<short>Intuition AlertCode for <link id="Alert">Alert()</link> sub alloc, no memory</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="AN_PlaneAlloc">
<short>Intuition AlertCode for <link id="Alert">Alert()</link> plane alloc, no memory</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="AN_ItemBoxTop">
<short>Intuition AlertCode for <link id="Alert">Alert()</link> item box top smaller than RelZero</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="AN_OpenScreen">
<short>Intuition AlertCode for <link id="Alert">Alert()</link> open screen, no memory</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="AN_OpenScrnRast">
<short>Intuition AlertCode for <link id="Alert">Alert()</link> open screen, raster alloc, no memory</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="AN_SysScrnType">
<short>Intuition AlertCode for <link id="Alert">Alert()</link> open sys screen, unknown type</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="AN_AddSWGadget">
<short>Intuition AlertCode for <link id="Alert">Alert()</link> add SW gadgets, no memory</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="AN_OpenWindow">
<short>Intuition AlertCode for <link id="Alert">Alert()</link> open window, no memory</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="AN_BadState">
<short>Intuition AlertCode for <link id="Alert">Alert()</link> Bad State Return entering Intuition</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="AN_BadMessage">
<short>Intuition AlertCode for <link id="Alert">Alert()</link> Bad Message received by IDCMP</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="AN_WeirdEcho">
<short>Intuition AlertCode for <link id="Alert">Alert()</link> Weird echo causing incomprehension</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="AN_NoConsole">
<short>Intuition AlertCode for <link id="Alert">Alert()</link> couldn't open the Console Device</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="AN_NoISem">
<short>Intuition AlertCode for <link id="Alert">Alert()</link> Intuition skipped obtaining a semaphore</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="AN_ISemOrder">
<short>Intuition AlertCode for <link id="Alert">Alert()</link> Intuition obtained a semaphore in bad order</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="AN_MathLib">
<short>Math AlertCode for <link id="Alert">Alert()</link> </short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="AN_DOSLib">
<short>Dos AlertCode for <link id="Alert">Alert()</link> </short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="AN_StartMem">
<short>Dos AlertCode for <link id="Alert">Alert()</link> no memory at startup</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="AN_EndTask">
<short>Dos AlertCode for <link id="Alert">Alert()</link> EndTask didn't end the Task</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="AN_QPktFail">
<short>Dos AlertCode for <link id="Alert">Alert()</link> Qpkt failure</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="AN_AsyncPkt">
<short>Dos AlertCode for <link id="Alert">Alert()</link> Unexpected packet received</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="AN_FreeVec">
<short>Dos AlertCode for <link id="Alert">Alert()</link> Freevec failed</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="AN_DiskBlkSeq">
<short>Dos AlertCode for <link id="Alert">Alert()</link> Disk block sequence error</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="AN_BitMap">
<short>Dos AlertCode for <link id="Alert">Alert()</link> Bitmap corrupt</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="AN_KeyFree">
<short>Dos AlertCode for <link id="Alert">Alert()</link> Key already free</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="AN_BadChkSum">
<short>Dos AlertCode for <link id="Alert">Alert()</link> Invalid checksum</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="AN_DiskError">
<short>Dos AlertCode for <link id="Alert">Alert()</link> Disk Error</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="AN_KeyRange">
<short>Dos AlertCode for <link id="Alert">Alert()</link> Key out of range</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="AN_BadOverlay">
<short>Dos AlertCode for <link id="Alert">Alert()</link> Bad overlay</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="AN_BadInitFunc">
<short>Dos AlertCode for <link id="Alert">Alert()</link> Invalid init packet for cli/shell</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="AN_FileReclosed">
<short>Dos AlertCode for <link id="Alert">Alert()</link> A filehandle was closed more than once</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="AN_RAMLib">
<short>Ramlib AlertCode for <link id="Alert">Alert()</link> </short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="AN_BadSegList">
<short>Ramlib AlertCode for <link id="Alert">Alert()</link> no overlays in library seglists</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="AN_IconLib">
<short>Icon AlertCode for <link id="Alert">Alert()</link> </short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="AN_ExpansionLib">
<short>Expansion AlertCode for <link id="Alert">Alert()</link> </short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="AN_BadExpansionFree">
<short>Expansion AlertCode for <link id="Alert">Alert()</link> freeed free region</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="AN_DiskfontLib">
<short>DiskFont AlertCode for <link id="Alert">Alert()</link> </short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="AN_AudioDev">
<short>Audio AlertCode for <link id="Alert">Alert()</link> </short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="AN_ConsoleDev">
<short>Console AlertCode for <link id="Alert">Alert()</link> </short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="AN_NoWindow">
<short>Console AlertCode for <link id="Alert">Alert()</link>  Console can't open initial window</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="AN_GamePortDev">
<short>Gameport AlertCode for <link id="Alert">Alert()</link> </short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="AN_KeyboardDev">
<short>Keyboard AlertCode for <link id="Alert">Alert()</link> </short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="AN_TrackDiskDev">
<short>Trackdisk AlertCode for <link id="Alert">Alert()</link> </short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="AN_TDCalibSeek">
<short>Trackdisk AlertCode for <link id="Alert">Alert()</link> calibrate: seek error</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="AN_TDDelay">
<short>Trackdisk AlertCode for <link id="Alert">Alert()</link> delay: error on timer wait</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="AN_TimerDev">
<short>Timer AlertCode for <link id="Alert">Alert()</link> </short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="AN_TMBadReq">
<short>Timer AlertCode for <link id="Alert">Alert()</link> bad request</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="AN_TMBadSupply">
<short>Timer AlertCode for <link id="Alert">Alert()</link> power supply -- no 50/60Hz ticks</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="AN_CIARsrc">
<short>CIA AlertCode for <link id="Alert">Alert()</link> </short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="AN_DiskRsrc">
<short>Disk AlertCode for <link id="Alert">Alert()</link> </short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="AN_DRHasDisk">
<short>Disk AlertCode for <link id="Alert">Alert()</link> get unit: already has disk</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="AN_DRIntNoAct">
<short>Disk AlertCode for <link id="Alert">Alert()</link> interrupt: no active unit</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="AN_MiscRsrc">
<short>Misc AlertCode for <link id="Alert">Alert()</link> </short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="AN_BootStrap">
<short>Bootstrap AlertCode for <link id="Alert">Alert()</link> </short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="AN_BootError">
<short>Bootstrap AlertCode for <link id="Alert">Alert()</link> boot code returned an error</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="AN_Workbench">
<short>Workbench AlertCode for <link id="Alert">Alert()</link> </short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="AN_NoFonts">
<short>Workbench AlertCode for <link id="Alert">Alert()</link> </short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="AN_WBBadStartupMsg1">
<short>Workbench AlertCode for <link id="Alert">Alert()</link> </short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="AN_WBBadStartupMsg2">
<short>Workbench AlertCode for <link id="Alert">Alert()</link> </short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="AN_WBBadIOMsg">
<short>Workbench AlertCode for <link id="Alert">Alert()</link> </short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="AN_WBReLayoutToolMenu">
<short>Workbench AlertCode for <link id="Alert">Alert()</link> </short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="AN_DiskCopy">
<short>Diskcopy AlertCode for <link id="Alert">Alert()</link> </short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="AN_GadTools">
<short>Gadtools AlertCode for <link id="Alert">Alert()</link> </short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="AN_UtilityLib">
<short>utility AlertCode for <link id="Alert">Alert()</link> </short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="AN_Unknown">
<short>utility AlertCode for <link id="Alert">Alert()</link> </short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="IOERR_OPENFAIL">
<short>ErrCode for <link id="TIORequest"/>.io_Error or <link id="TIOStdReq"/>.io_Error device/unit failed to open</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="IOERR_ABORTED">
<short>ErrCode for <link id="TIORequest"/>.io_Error or <link id="TIOStdReq"/>.io_Error request terminated early  <link id="AbortIO"/></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="IOERR_NOCMD">
<short>ErrCode for <link id="TIORequest"/>.io_Error or <link id="TIOStdReq"/>.io_Error command not supported by device</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="IOERR_BADLENGTH">
<short>ErrCode for <link id="TIORequest"/>.io_Error or <link id="TIOStdReq"/>.io_Error not a valid length (usually IO_LENGTH)</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="IOERR_BADADDRESS">
<short>ErrCode for <link id="TIORequest"/>.io_Error or <link id="TIOStdReq"/>.io_Error invalid address (misaligned or bad range)</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="IOERR_UNITBUSY">
<short>ErrCode for <link id="TIORequest"/>.io_Error or <link id="TIOStdReq"/>.io_Error device opens ok, but requested unit is busy</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="IOERR_SELFTEST">
<short>ErrCode for <link id="TIORequest"/>.io_Error or <link id="TIOStdReq"/>.io_Error hardware failed self-test</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- pointer type Visibility: default -->
<element name="pResident">
<short></short>
<descr>
</descr>
<seealso>
<link id="FindResident"/>
<link id="InitResident"/>
</seealso>
</element>

<!-- record type Visibility: default -->
<element name="tResident">
<short></short>
<descr>
<link id="FindResident"/>
<link id="InitResident"/>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="tResident.rt_MatchWord">
<short>smallint to match on <link id="RTC_MATCHWORD"/></short>
</element>

<!-- variable Visibility: default -->
<element name="tResident.rt_MatchTag">
<short>pointer to the above</short>
</element>

<!-- variable Visibility: default -->
<element name="tResident.rt_EndSkip">
<short>address to continue scan</short>
</element>

<!-- variable Visibility: default -->
<element name="tResident.rt_Flags">
<short>various tag flags (RTF_*)</short>
</element>

<!-- variable Visibility: default -->
<element name="tResident.rt_Version">
<short>release version number</short>
</element>

<!-- variable Visibility: default -->
<element name="tResident.rt_Type">
<short>type of module (NT_mumble)</short>
</element>

<!-- variable Visibility: default -->
<element name="tResident.rt_Pri">
<short>initialization priority</short>
</element>

<!-- variable Visibility: default -->
<element name="tResident.rt_Name">
<short>pointer to node name</short>
</element>

<!-- variable Visibility: default -->
<element name="tResident.rt_IdString">
<short>pointer to ident string</short>
</element>

<!-- variable Visibility: default -->
<element name="tResident.rt_Init">
<short>pointer to init code</short>
</element>

<!-- constant Visibility: default -->
<element name="RTC_MATCHWORD">
<short>Matchword for <link id="TResident">rt_MatchWord</link></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="RTF_AUTOINIT">
<short>Flag for <link id="TResident">rt_Flags</link> </short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="RTF_AFTERDOS">
<short>Flag for <link id="TResident">rt_Flags</link> </short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="RTF_SINGLETASK">
<short>Flag for <link id="TResident">rt_Flags</link> </short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="RTF_COLDSTART">
<short>Flag for <link id="TResident">rt_Flags</link> </short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="RTW_COLDSTART">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="RTW_NEVER">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- pointer type Visibility: default -->
<element name="pMemChunk">
<short></short>
<descr>
</descr>
<seealso>
<link id="TMemHeader"/>
</seealso>
</element>

<!-- record type Visibility: default -->
<element name="tMemChunk">
<short></short>
<descr>
</descr>
<seealso>
<link id="TMemHeader"/>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="tMemChunk.mc_Next">
<short>pointer to next chunk</short>
</element>

<!-- variable Visibility: default -->
<element name="tMemChunk.mc_Bytes">
<short>chunk byte size</short>
</element>

<!-- pointer type Visibility: default -->
<element name="pMemHeader">
<short></short>
<descr>
</descr>
<seealso>
<link id="Allocate"/>
<link id="Deallocate"/>
</seealso>
</element>

<!-- record type Visibility: default -->
<element name="tMemHeader">
<short></short>
<descr>
</descr>
<seealso>
<link id="Allocate"/>
<link id="Deallocate"/>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="tMemHeader.mh_Node">
<short></short>
</element>

<!-- variable Visibility: default -->
<element name="tMemHeader.mh_Attributes">
<short>characteristics of this region (MEMF_*)</short>
</element>

<!-- variable Visibility: default -->
<element name="tMemHeader.mh_First">
<short>first free region</short>
</element>

<!-- variable Visibility: default -->
<element name="tMemHeader.mh_Lower">
<short>lower memory bound</short>
</element>

<!-- variable Visibility: default -->
<element name="tMemHeader.mh_Upper">
<short>upper memory bound + 1</short>
</element>

<!-- variable Visibility: default -->
<element name="tMemHeader.mh_Free">
<short>total number of free bytes</short>
</element>

<!-- pointer type Visibility: default -->
<element name="pMemEntry">
<short></short>
<descr>
</descr>
<seealso>
<link id="TMemList"/>
</seealso>
</element>

<!-- record type Visibility: default -->
<element name="tMemEntry">
<short></short>
<descr>
</descr>
<seealso>
<link id="TMemList"/>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="tMemEntry.meu_Reqs">
<short></short>
</element>

<!-- variable Visibility: default -->
<element name="tMemEntry.meu_Addr">
<short></short>
</element>

<!-- variable Visibility: default -->
<element name="tMemEntry.me_Un">
<short></short>
</element>

<!-- variable Visibility: default -->
<element name="tMemEntry.me_Length">
<short></short>
</element>

<!-- pointer type Visibility: default -->
<element name="pMemList">
<short>Pointer to the list of all Memory</short>
<descr>
</descr>
<seealso>
<link id="AllocEntry"/>
<link id="FreeEntry"/>
</seealso>
</element>

<!-- record type Visibility: default -->
<element name="tMemList">
<short>List of all available Memory</short>
<descr>
Note: SizeOf(TMemList) includes the size of the first MemEntry!
</descr>
<seealso>
<link id="AllocEntry"/>
<link id="FreeEntry"/>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="tMemList.ml_Node">
<short></short>
</element>

<!-- variable Visibility: default -->
<element name="tMemList.ml_NumEntries">
<short>Number of entries in this struct</short>
</element>

<!-- variable Visibility: default -->
<element name="tMemList.ml_ME">
<short>The first entry</short>
</element>

<!-- constant Visibility: default -->
<element name="MEMF_ANY">
<short>Memory Requirement Type. Any type of memory will do.</short>
<descr>
</descr>
<seealso>
<link id="Exec.ExecAllocMem"/>
<link id="AvailMem"/>
<link id="CreatePool"/>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="MEMF_PUBLIC">
<short>Memory Requirement Type.</short>
<descr>
</descr>
<seealso>
<link id="Exec.ExecAllocMem"/>
<link id="AvailMem"/>
<link id="CreatePool"/>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="MEMF_CHIP">
<short>Memory Requirement Type</short>
<descr>
</descr>
<seealso>
<link id="Exec.ExecAllocMem"/>
<link id="AvailMem"/>
<link id="CreatePool"/>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="MEMF_FAST">
<short>Memory Requirement Type</short>
<descr>
</descr>
<seealso>
<link id="Exec.ExecAllocMem"/>
<link id="AvailMem"/>
<link id="CreatePool"/>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="MEMF_LOCAL">
<short>Memory Requirement Type</short>
<descr>
</descr>
<seealso>
<link id="Exec.ExecAllocMem"/>
<link id="AvailMem"/>
<link id="CreatePool"/>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="MEMF_24BITDMA">
<short>Memory Requirement Type. DMAable memory within 24 bits of address.</short>
<descr>
</descr>
<seealso>
<link id="Exec.ExecAllocMem"/>
<link id="AvailMem"/>
<link id="CreatePool"/>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="MEMF_KICK">
<short>Memory Requirement Type. Memory that can be used for KickTags.</short>
<descr>
</descr>
<seealso>
<link id="Exec.ExecAllocMem"/>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="MEMF_CLEAR">
<short>Memory Requirement Type. Clear the memory when allocate.</short>
<descr>
</descr>
<seealso>
<link id="Exec.ExecAllocMem"/>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="MEMF_LARGEST">
<short>Memory Requirement Type. Return the largest available memory block.</short>
<descr>
</descr>
<seealso>
<link id="AvailMem"/>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="MEMF_REVERSE">
<short>Memory Requirement Type</short>
<descr>
</descr>
<seealso>
<link id="AvailMem"/>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="MEMF_TOTAL">
<short>Memory Requirement Type. Return the total size of Memory.</short>
<descr>
</descr>
<seealso>
<link id="AvailMem"/>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="MEMF_NO_EXPUNGE">
<short>Memory Requirement Type. Do not cause expunge on failure</short>
<descr>
</descr>
<seealso>
<link id="Exec.ExecAllocMem"/>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="MEM_BLOCKSIZE">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="MEM_BLOCKMASK">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- pointer type Visibility: default -->
<element name="pMemHandlerData">
<short>Memory Handler</short>
<descr>
This structure is <b>READ ONLY</b> and only EXEC can create it!
</descr>
<seealso>
</seealso>
</element>

<!-- record type Visibility: default -->
<element name="tMemHandlerData">
<short>Memory Handler</short>
<descr>
This structure is <b>READ ONLY</b> and only EXEC can create it!
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="tMemHandlerData.memh_RequestSize">
<short>Requested allocation size</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="tMemHandlerData.memh_RequestFlags">
<short>Requested allocation flags</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="tMemHandlerData.memh_Flags">
<short>Flags = <link id="MEMHF_RECYCLE"/></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="MEMHF_RECYCLE">
<short>0 = First time, 1 = recycle</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="MEM_DID_NOTHING">
<short>Nothing we could do</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="MEM_ALL_DONE">
<short>We did all we could do</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="MEM_TRY_AGAIN">
<short>We did some, try the allocation again</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- pointer type Visibility: default -->
<element name="pInterrupt">
<short></short>
<descr>
</descr>
<seealso>
<link id="AddIntServer"/>
<link id="RemIntServer"/>
<link id="AddMemHandler"/>
<link id="RemMemHandler"/>
<link id="Cause"/>
<link id="SetIntVector"/>
</seealso>
</element>

<!-- record type Visibility: default -->
<element name="tInterrupt">
<short></short>
<descr>
</descr>
<seealso>
<link id="AddIntServer"/>
<link id="RemIntServer"/>
<link id="AddMemHandler"/>
<link id="RemMemHandler"/>
<link id="Cause"/>
<link id="SetIntVector"/>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="tInterrupt.is_Node">
<short></short>
</element>

<!-- variable Visibility: default -->
<element name="tInterrupt.is_Data">
<short>Server data segment</short>
</element>

<!-- variable Visibility: default -->
<element name="tInterrupt.is_Code">
<short>Server code entry</short>
</element>

<!-- pointer type Visibility: default -->
<element name="pIntVector">
<short>For EXEC use ONLY!</short>
<descr>
</descr>
<seealso>
<link id="TExecBase"/>
</seealso>
</element>

<!-- record type Visibility: default -->
<element name="tIntVector">
<short>For EXEC use ONLY!</short>
<descr>
</descr>
<seealso>
<link id="TExecBase"/>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="tIntVector.iv_Data">
<short></short>
</element>

<!-- variable Visibility: default -->
<element name="tIntVector.iv_Code">
<short></short>
</element>

<!-- variable Visibility: default -->
<element name="tIntVector.iv_Node">
<short></short>
</element>

<!-- pointer type Visibility: default -->
<element name="pSoftIntList">
<short>For EXEC use ONLY!</short>
<descr>
</descr>
<seealso>
<link id="TExecBase"/>
</seealso>
</element>

<!-- record type Visibility: default -->
<element name="tSoftIntList">
<short>For EXEC use ONLY!</short>
<descr>
</descr>
<seealso>
<link id="TExecBase"/>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="tSoftIntList.sh_List">
<short></short>
</element>

<!-- variable Visibility: default -->
<element name="tSoftIntList.sh_Pad">
<short></short>
</element>

<!-- constant Visibility: default -->
<element name="SIH_PRIMASK">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="INTB_NMI">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="INTF_NMI">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- pointer type Visibility: default -->
<element name="pTask">
<short>Pointer to Task structure</short>
<descr>Every Amiga Task has one of these Task structures associated with it.
    To find yours, use <link id="FindTask">FindTask(nil)</link>. Amiga processes tack a few more
    values on to the end of this structure, which is the difference between
    Tasks and Processes.
</descr>
<seealso>
<link id="FindTask"/>
<link id="AddTask"/>
<link id="RemTask"/>
<link id="SetTaskPri"/>
<link id="Signal"/>
</seealso>
</element>

<!-- record type Visibility: default -->
<element name="tTask">
<short>Every Amiga Task has one of these Task structures associated with it.
    To find yours, use <link id="FindTask">FindTask(nil)</link>. Amiga processes tack a few more
    values on to the end of this structure, which is the difference between
    Tasks and Processes.</short>
<descr>
</descr>
<seealso>
<link id="FindTask"/>
<link id="AddTask"/>
<link id="RemTask"/>
<link id="SetTaskPri"/>
<link id="Signal"/>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="tTask.tc_Node">
<short>Node for connecting several tasks.</short>
</element>

<!-- variable Visibility: default -->
<element name="tTask.tc_Flags">
<short>Task flags (TF_*)</short>
</element>

<!-- variable Visibility: default -->
<element name="tTask.tc_State">
<short>Task status (TS_*)</short>
</element>

<!-- variable Visibility: default -->
<element name="tTask.tc_IDNestCnt">
<short>Number of suppressed Interrupts</short>
</element>

<!-- variable Visibility: default -->
<element name="tTask.tc_TDNestCnt">
<short>Number of suppressed Tasks</short>
</element>

<!-- variable Visibility: default -->
<element name="tTask.tc_SigAlloc">
<short>Signals reserved for this Task</short>
</element>

<!-- variable Visibility: default -->
<element name="tTask.tc_SigWait">
<short>Signals, the task wait for.</short>
</element>

<!-- variable Visibility: default -->
<element name="tTask.tc_SigRecvd">
<short>Signals, the task recieved</short>
</element>

<!-- variable Visibility: default -->
<element name="tTask.tc_SigExcept">
<short>Signals, which fires Exceptions</short>
</element>

<!-- variable Visibility: default -->
<element name="tTask.tc_TrapAlloc">
<short>Traps, reserved for this task</short>
</element>

<!-- variable Visibility: default -->
<element name="tTask.tc_TrapAble">
<short>Traps, allowed for this task</short>
</element>

<!-- variable Visibility: default -->
<element name="tTask.tc_ExceptData">
<short>Pointer to exception data.</short>
</element>

<!-- variable Visibility: default -->
<element name="tTask.tc_ExceptCode">
<short>Pointer to exception code</short>
</element>

<!-- variable Visibility: default -->
<element name="tTask.tc_TrapData">
<short>Pointer to trap data.</short>
</element>

<!-- variable Visibility: default -->
<element name="tTask.tc_TrapCode">
<short>Pointer to trap code</short>
</element>

<!-- variable Visibility: default -->
<element name="tTask.tc_SPReg">
<short>Pointer to Stack of Task</short>
</element>

<!-- variable Visibility: default -->
<element name="tTask.tc_SPLower">
<short>Lower border of stack.</short>
</element>

<!-- variable Visibility: default -->
<element name="tTask.tc_SPUpper">
<short>Upper border of stack + 2</short>
</element>

<!-- variable Visibility: default -->
<element name="tTask.tc_Switch">
<short>Pointer to switch code (remove task from CPU)</short>
</element>

<!-- variable Visibility: default -->
<element name="tTask.tc_Launch">
<short>Pointer to switch code (put task to CPU)</short>
</element>

<!-- variable Visibility: default -->
<element name="tTask.tc_MemEntry">
<short>Pointer to memory the task uses.</short>
</element>

<!-- variable Visibility: default -->
<element name="tTask.tc_UserData">
<short>Pointer for userdata.</short>
</element>

<!-- pointer type Visibility: default -->
<element name="pStackSwapStruct">
<short>Stack swap structure as passed to <link id="StackSwap"/></short>
</element>

<!-- record type Visibility: default -->
<element name="tStackSwapStruct">
<short>Stack swap structure as passed to <link id="StackSwap"/></short>
</element>

<!-- variable Visibility: default -->
<element name="tStackSwapStruct.stk_Lower">
<short>Lowest byte of stack</short>
</element>

<!-- variable Visibility: default -->
<element name="tStackSwapStruct.stk_Upper">
<short>Upper end of stack (size + Lowest)</short>
</element>

<!-- variable Visibility: default -->
<element name="tStackSwapStruct.stk_Pointer">
<short>Stack pointer at switch point</short>
</element>

<!-- constant Visibility: default -->
<element name="TB_PROCTIME">
<short>Flag Bit for <link id="TTask">tc_Flags</link> Task uses CPU.</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="TB_ETASK">
<short>Flag Bit for <link id="TTask">tc_Flags</link></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="TB_STACKCHK">
<short>Flag Bit for <link id="TTask">tc_Flags</link> Stack is checked.</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="TB_EXCEPT">
<short>Flag Bit for <link id="TTask">tc_Flags</link> Task gets no CPU time.</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="TB_SWITCH">
<short>Flag Bit for <link id="TTask">tc_Flags</link> Task is switched away from CPU.</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="TB_LAUNCH">
<short>Flag Bit for <link id="TTask">tc_Flags</link> Task is switched to CPU.</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="TF_PROCTIME">
<short>Flag value for <link id="TTask">tc_Flags</link> Task uses CPU.</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="TF_ETASK">
<short>Flag value for <link id="TTask">tc_Flags</link> </short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="TF_STACKCHK">
<short>Flag value for <link id="TTask">tc_Flags</link> Stack is checked.</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="TF_EXCEPT">
<short>Flag value for <link id="TTask">tc_Flags</link> Task gets no CPU time.</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="TF_SWITCH">
<short>Flag value for <link id="TTask">tc_Flags</link> Task is switched away from CPU.</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="TF_LAUNCH">
<short>Flag value for <link id="TTask">tc_Flags</link> Task is switched to CPU.</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="TS_INVALID">
<short>Task State for <link id="TTask">tc_State</link> Invalid Task.</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="TS_ADDED">
<short>Task State for <link id="TTask">tc_State</link> Task is currently inserted in List.</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="TS_RUN">
<short>Task State for <link id="TTask">tc_State</link> Task is running.</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="TS_READY">
<short>Task State for <link id="TTask">tc_State</link> Task is ready to work.</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="TS_WAIT">
<short>Task State for <link id="TTask">tc_State</link> Task is waiting for a signal.</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="TS_EXCEPT">
<short>Task State for <link id="TTask">tc_State</link> Task gets no CPU time.</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="TS_REMOVED">
<short>Task State for <link id="TTask">tc_State</link> Task is removed at the moment.</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SIGB_ABORT">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SIGB_CHILD">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SIGB_BLIT">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SIGB_SINGLE">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SIGB_INTUITION">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SIGB_DOS">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SIGF_ABORT">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SIGF_CHILD">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SIGF_BLIT">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SIGF_SINGLE">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SIGF_INTUITION">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SIGF_DOS">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- pointer type Visibility: default -->
<element name="pMsgPort">
<short>Port for inter-task communication.</short>
<descr>
</descr>
<seealso>
<link id="AddPort"/>
<link id="RemPort"/>
<link id="CreateIORequest"/>
<link id="CreateMsgPort"/>
<link id="DeleteMsgPort"/>
<link id="FindPort"/>
<link id="GetMsg"/>
<link id="PutMsg"/>
<link id="WaitPort"/>
</seealso>
</element>

<!-- record type Visibility: default -->
<element name="tMsgPort">
<short>Port for inter-task communication.</short>
<descr>
</descr>
<seealso>
<link id="AddPort"/>
<link id="RemPort"/>
<link id="CreateIORequest"/>
<link id="CreateMsgPort"/>
<link id="DeleteMsgPort"/>
<link id="FindPort"/>
<link id="GetMsg"/>
<link id="PutMsg"/>
<link id="WaitPort"/>
<link id="tMessage"/>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="tMsgPort.mp_Node">
<short>Node for connections to other Msgports in the system.</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="tMsgPort.mp_Flags">
<short>Flags, showing if a message arrived at port. (PA_*)</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="tMsgPort.mp_SigBit">
<short>Number of signal bit dedicated to this port.</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="tMsgPort.mp_SigTask">
<short>Pointer to task to get the signal.</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="tMsgPort.mp_MsgList">
<short>List of all available messages</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- pointer type Visibility: default -->
<element name="pMessage">
<short>Message from/for a MessagePort</short>
<descr>
</descr>
<seealso>
<link id="GetMsg"/>
<link id="PutMsg"/>
<link id="ReplyMsg"/>
<link id="WaitPort"/>
</seealso>
</element>

<!-- record type Visibility: default -->
<element name="tMessage">
<short>Message from/for a MessagePort</short>
<descr>
</descr>
<seealso>
<link id="GetMsg"/>
<link id="PutMsg"/>
<link id="ReplyMsg"/>
<link id="WaitPort"/>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="tMessage.mn_Node">
<short>Node for linking of different messages.</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="tMessage.mn_ReplyPort">
<short>Message port for the reply message using <link id="ReplyMsg"/>.</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="tMessage.mn_Length">
<short>Length ob message in bytes</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="PF_ACTION">
<short>Mask for all PA_* <link id="tMsgPort"/> Flags</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="PA_SIGNAL">
<short>Signal task in mp_SigTask in <link id="tMsgPort"/></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="PA_SOFTINT">
<short>Signal SoftInt in mp_SoftInt/mp_SigTask in <link id="TMsgPort"/> </short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="PA_IGNORE">
<short>Ignore arrival in <link id="TMsgPort"/></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- pointer type Visibility: default -->
<!--element name="PSemaphore">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element-->

<!-- record type Visibility: default -->
<!--element name="TSemaphore">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element-->

<!-- variable Visibility: default -->
<!--element name="TSemaphore.sm_MsgPort">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element-->

<!-- variable Visibility: default -->
<!--element name="TSemaphore.sm_Bids">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element -->

<!-- pointer type Visibility: default -->
<element name="PSemaphoreRequest">
<short>This is the structure used to request a signal semaphore</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- record type Visibility: default -->
<element name="TSemaphoreRequest">
<short>This is the structure used to request a signal semaphore</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TSemaphoreRequest.sr_Link">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TSemaphoreRequest.sr_Waiter">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- pointer type Visibility: default -->
<element name="PSignalSemaphore">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- record type Visibility: default -->
<element name="TSignalSemaphore">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TSignalSemaphore.ss_Link">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TSignalSemaphore.ss_NestCount">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TSignalSemaphore.ss_WaitQueue">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TSignalSemaphore.ss_MultipleLink">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TSignalSemaphore.ss_Owner">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TSignalSemaphore.ss_QueueCount">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- pointer type Visibility: default -->
<element name="PSemaphoreMessage">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- record type Visibility: default -->
<element name="TSemaphoreMessage">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TSemaphoreMessage.ssm_Message">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TSemaphoreMessage.ssm_Semaphore">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SM_SHARED">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SM_EXCLUSIVE">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="LIB_VECTSIZE">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="LIB_RESERVED">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="LIB_BASE">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="LIB_USERDEF">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="LIB_NONSTD">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="LIB_OPEN">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="LIB_CLOSE">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="LIB_EXPUNGE">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="LIB_EXTFUNC">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- pointer type Visibility: default -->
<element name="pLibrary">
<short>Library Base Structure</short>
<descr>Also used for Devices and some Resources
</descr>
<seealso>
<link id="OpenLibrary"/>
<link id="OldOpenLibrary"/>
<link id="CloseLibrary"/>
<link id="AddLibrary"/>
<link id="MakeLibrary"/>
<link id="RemLibrary"/>
<link id="SumLibrary"/>
<link id="SetFunction"/>
</seealso>
</element>

<!-- record type Visibility: default -->
<element name="tLibrary">
<short>Library Base Structure</short>
<descr>Also used for Devices and some Resources
</descr>
<seealso>
<link id="OpenLibrary"/>
<link id="OldOpenLibrary"/>
<link id="CloseLibrary"/>
<link id="AddLibrary"/>
<link id="MakeLibrary"/>
<link id="RemLibrary"/>
<link id="SumLibrary"/>
<link id="SetFunction"/>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="tLibrary.lib_Node">
<short>For integrating the library into the system lists.</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="tLibrary.lib_Flags">
<short>Flags for the Library (LIBF_*)</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="tLibrary.lib_pad">
<short>padding byte</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="tLibrary.lib_NegSize">
<short>Size of vector tavle in bytes.</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="tLibrary.lib_PosSize">
<short>Size of data in bytes.</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="tLibrary.lib_Version">
<short>Version number of the library.</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="tLibrary.lib_Revision">
<short>Revision number of the library.</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="tLibrary.lib_IdString">
<short>Pointer to identification text.</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="tLibrary.lib_Sum">
<short>Library checksum.</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="tLibrary.lib_OpenCnt">
<short>Openning counter. Counts how many times this library is currently open.</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="LIBF_SUMMING">
<short>The checksum of <link id="tLibrary">Library</link> is currently being calculated.</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="LIBF_CHANGED">
<short>One or some <link id="tLibrary">Library</link> functions are changed.</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="LIBF_SUMUSED">
<short>A checksum error of a <link id="tLibrary">Library</link> results into a reset.</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="LIBF_DELEXP">
<short><link id="tLibrary">Library</link> should be closed but an other tasks still use it. Waiting.</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- pointer type Visibility: default -->
<element name="pDevice">
<short>Device has the same structure as an <link id="tLibrary">Library</link></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- record type Visibility: default -->
<element name="tDevice">
<short>Device has the same structure as an <link id="tLibrary">Library</link></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="tDevice.dd_Library">
<short>Device has the same structure as an <link id="tLibrary">Library</link></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- pointer type Visibility: default -->
<element name="pUnit">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- record type Visibility: default -->
<element name="tUnit">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="tUnit.unit_MsgPort">
<short>Pointer to message port for unprocessed messages</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="tUnit.unit_flags">
<short>Flags of Unit (UNITF_*)</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="tUnit.unit_pad">
<short>Padding byte</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="tUnit.unit_OpenCnt">
<short>Number of open Requests</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="UNITF_ACTIVE">
<short><link id="tUnit"/> is accessable</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="UNITF_INTASK">
<short><link id="tUnit"/> is currently working</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- pointer type Visibility: default -->
<element name="pIORequest">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- record type Visibility: default -->
<element name="tIORequest">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="tIORequest.io_Message">
<short>Message structure</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="tIORequest.io_Device">
<short>Pointer to the device to use</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="tIORequest.io_Unit">
<short>pointer to unit (depends on device)</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="tIORequest.io_Command">
<short>Command send to device (CMD_*)</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="tIORequest.io_Flags">
<short>Device flags, different for every device.</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TIORequest.io_Error">
<short>Device error messages, different for every device.</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- pointer type Visibility: default -->
<element name="pIOStdReq">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- record type Visibility: default -->
<element name="tIOStdReq">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="tIOStdReq.io_Message">
<short>Message structure</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="tIOStdReq.io_Device">
<short>Pointer to device to use</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="tIOStdReq.io_Unit">
<short>Pointer to unit, depend on the device</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="tIOStdReq.io_Command">
<short>Command to sent to device</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="tIOStdReq.io_Flags">
<short>Flags for device, depend on device.</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="tIOStdReq.io_Error">
<short>Error of device, depend on device</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="tIOStdReq.io_Actual">
<short>Number of bytes sent to device</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="tIOStdReq.io_Length">
<short>Number of bytes transfered.</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="tIOStdReq.io_Data">
<short>Pointer to data buffer</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="tIOStdReq.io_Offset">
<short>Offset for block structured devices</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="DEV_BEGINIO">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="DEV_ABORTIO">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="IOB_QUICK">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="IOF_QUICK">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="CMD_INVALID">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="CMD_RESET">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="CMD_READ">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="CMD_WRITE">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="CMD_UPDATE">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="CMD_CLEAR">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="CMD_STOP">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="CMD_START">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="CMD_FLUSH">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="CMD_NONSTD">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- pointer type Visibility: default -->
<element name="pExecBase">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- record type Visibility: default -->
<element name="tExecBase">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="tExecBase.LibNode">
<short>Standard library structure</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="tExecBase.SoftVer">
<short>Kickstart release number</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="tExecBase.LowMemChkSum">
<short>Lower memory checksum</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="tExecBase.ChkBase">
<short>System base address</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="tExecBase.ColdCapture">
<short>Cold boot address</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="tExecBase.CoolCapture">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="tExecBase.WarmCapture">
<short>Warm start address</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="tExecBase.SysStkUpper">
<short>System stack: upper border</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="tExecBase.SysStkLower">
<short>System stack: lower border</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="tExecBase.MaxLocMem">
<short>Maximal useable memory</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="tExecBase.DebugEntry">
<short>Jump address for debugger</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="tExecBase.DebugData">
<short>Pointer to data for debugger</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="tExecBase.AlertData">
<short>Pointer to alert data</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="tExecBase.MaxExtMem">
<short>Maximal available external memory</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="tExecBase.ChkSum">
<short>Checksum of the upper values</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="tExecBase.IntVects">
<short>Vector table of interrupts</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="tExecBase.ThisTask">
<short>Pointer of the currently running task</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="tExecBase.IdleCount">
<short>Idle Counter</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="tExecBase.DispCount">
<short>Dispatch Counter</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="tExecBase.Quantum">
<short>CPU time of every task</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="tExecBase.Elapsed">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="tExecBase.SysFlags">
<short>Used cput time</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="tExecBase.IDNestCnt">
<short>interrupt disable nesting count</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="tExecBase.TDNestCnt">
<short>task disable nesting count</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="tExecBase.AttnFlags">
<short>special attention flags (readable)</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="tExecBase.AttnResched">
<short>rescheduling attention</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="tExecBase.ResModules">
<short>resident module array pointer</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="tExecBase.TaskTrapCode">
<short>Task - Pointer</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="tExecBase.TaskExceptCode">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="tExecBase.TaskExitCode">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="tExecBase.TaskSigAlloc">
<short>Task - Signals</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="tExecBase.TaskTrapAlloc">
<short>Task - Traps</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="tExecBase.MemList">
<short>List of available memory.</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="tExecBase.ResourceList">
<short>List of available resources.</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="tExecBase.DeviceList">
<short>List of available devices.</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="tExecBase.IntrList">
<short>List of available Interrupts</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="tExecBase.LibList">
<short>List of open libraries</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="tExecBase.PortList">
<short>List of open Ports.</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="tExecBase.TaskReady">
<short>Tasks with state Ready</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="tExecBase.TaskWait">
<short>Tasks with State waiting for singal</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="tExecBase.SoftInts">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="tExecBase.LastAlert">
<short>Last alert number</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="tExecBase.VBlankFrequency">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="tExecBase.PowerSupplyFrequency">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="tExecBase.SemaphoreList">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="tExecBase.KickMemPtr">
<short>Pointer to queue of mem lists</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="tExecBase.KickTagPtr">
<short>Pointer to rom tag queue</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="tExecBase.KickCheckSum">
<short>Checksum for mem and tags</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="tExecBase.ex_Pad0">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="tExecBase.ex_LaunchPoint">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="tExecBase.ex_RamLibPrivate">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="tExecBase.ex_EClockFrequency">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="tExecBase.ex_CacheControl">
<short>Private to CacheControl calls</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="tExecBase.ex_TaskID">
<short>Next available Task ID</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="tExecBase.ex_Reserved1">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="tExecBase.ex_MMULock">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="tExecBase.ex_Reserved2">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="tExecBase.ex_DebugFlags">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="tExecBase.ex_MemHandlers">
<short>Memory Handler List</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="tExecBase.ex_MemHandler">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>


<!-- constant Visibility: default -->
<element name="AFB_68010">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="AFB_68020">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="AFB_68030">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="AFB_68040">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="AFB_68881">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="AFB_68882">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="AFB_FPU40">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="AFB_68060">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="AFF_68010">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="AFF_68020">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="AFF_68030">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="AFF_68040">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="AFF_68881">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="AFF_68882">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="AFF_FPU40">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="AFF_68060">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="CACRF_EnableI">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="CACRF_FreezeI">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="CACRF_ClearI">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="CACRF_IBE">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="CACRF_EnableD">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="CACRF_FreezeD">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="CACRF_ClearD">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="CACRF_DBE">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="CACRF_WriteAllocate">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="CACRF_EnableE">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="CACRF_CopyBack">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="DMA_Continue">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="DMA_NoModify">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="DMA_ReadFromRAM">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- function Visibility: default -->
<element name="AbortIO">
<short>Attempt to abort an in-progress I/O request</short>
<descr>
  <p>Ask a device to abort a previously started IORequest.  This is done
  by calling the device's ABORTIO vector, with your given IORequest.
  </p>
  <p>
  <var>AbortIO()</var> is a command the device that may or may not grant.  If
  successful, the device will stop processing the IORequest, and
  reply to it earlier than it would otherwise have done.</p>
  <p><b>NOTE:</b></p>
  <p>
  <var>AbortIO()</var> does NOT <link id="Remove">Remove()</link> the IORequest from your ReplyPort, OR
  wait for it to complete.  After an <var>AbortIO()</var> you must wait normally
  for the reply message before actually reusing the request.</p>
  <p>
  If a request has already completed when <var>AbortIO()</var> is called, no
  action is taken.</p>
  <p>
  <b>Snippet:</b></p>
  <code>
AbortIO(timer_request);
WaitIO(timer_request);
// Message is free to be reused
  </code>
</descr>
<errors>
</errors>
<seealso>
<link id="SendIO"/>
<link id="WaitIO"/>
<link id="DoIO"/>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="AbortIO.Result">
<short>0 if the I/O Request is aborted</short>
</element>

<!-- argument Visibility: default -->
<element name="AbortIO.ioRequest">
<short>Pointer to an I/O request block (must have been used
    at least once. May be active or finished).</short>
</element>

<!-- procedure Visibility: default -->
<element name="AddDevice">
<short>Adds a device to the system</short>
<descr>This function adds a new device to the system device list, making
  it available to other programs.  The device must be ready to be
  opened at this time.
</descr>
<errors>
</errors>
<seealso>
<link id="RemDevice"/>
<link id="OpenDevice"/>
<link id="CloseDevice"/>
<link id="MakeLibrary"/>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="AddDevice.device">
<short>Pointer to a initialized device structure</short>
</element>

<!-- procedure Visibility: default -->
<element name="AddHead">
<short>Insert a node at the head of a list</short>
<descr>
<p>This function inserts a node at the head of the list. The node will be the first node in the list after this function.</p>
<p><b>WARNING</b></p>
<p>
  This function does not arbitrate for access to the list.  The
  calling task must be the owner of the involved list.</p>
</descr>
<errors>
</errors>
<seealso>
<link id="Exec.ExecInsert"/>
<link id="Remove"/>
<link id="RemHead"/>
<link id="AddTail"/>
<link id="RemTail"/>
<link id="Enqueue"/>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="AddHead.list">
<short>Pointer to list to which the node should be inserted</short>
</element>

<!-- argument Visibility: default -->
<element name="AddHead.node">
<short>Pointer to node to insert</short>
</element>

<!-- procedure Visibility: default -->
<element name="AddIntServer">
<short>Adds a interrupt server to the system</short>
<descr>This function adds a new interrupt server to a given server chain.
  The node is located on the chain in a priority dependent position.
  If this is the first server on a particular chain, interrupts will
  be enabled for that chain.
</descr>
<errors>
</errors>
<seealso>
<link id="RemIntServer"/>
<link id="Cause"/>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="AddIntServer.intNumber">
<short>Number of Interrupt</short>
</element>

<!-- argument Visibility: default -->
<element name="AddIntServer.interrupt_">
<short>Pointer to an Interrupt structure. By convention, the LN_NAME of the interrupt structure must
     point a descriptive string so that other users may
     identify who currently has control of the interrupt.</short>
</element>

<!-- procedure Visibility: default -->
<element name="AddLibrary">
<short>Adds a library to the system</short>
<descr>This function adds a new library to the library list. All programs can open it from now on.
This function also calculates the checksum of the library.
</descr>
<errors>
</errors>
<seealso>
<link id="MakeLibrary"/>
<link id="OpenLibrary"/>
<link id="RemLibrary"/>
<link id="CloseLibrary"/>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="AddLibrary.lib">
<short>Pointer to a previously initialized library structure</short>
</element>

<!-- procedure Visibility: default -->
<element name="AddMemHandler">
<short></short>
<descr>
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="AddMemHandler.memhand">
<short></short>
</element>

<!-- procedure Visibility: default -->
<element name="AddMemList">
<short>add memory to the system free pool</short>
<descr>Add a new region of memory to the system free pool.  The first few
  bytes will be used to hold the MemHeader structure.  The remainder
  will be made available to the rest of the world.
</descr>
<errors>
</errors>
<seealso>
<link id="Exec.ExecAllocMem"/>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="AddMemList.size">
<short>the size (in bytes) of the memory area</short>
</element>

<!-- argument Visibility: default -->
<element name="AddMemList.attributes">
<short>the attributes word that the memory pool will have</short>
</element>

<!-- argument Visibility: default -->
<element name="AddMemList.pri">
<short>the priority for this memory. The higher the
         priority, the closer to the head of the memory list it will
         be placed.</short>
</element>

<!-- argument Visibility: default -->
<element name="AddMemList.base">
<short>the base of the new memory area</short>
</element>

<!-- argument Visibility: default -->
<element name="AddMemList.name">
<short>the name that will be used in the memory header, or nil
         if no name is to be provided.  This name is not copied, so it
         must remain valid for as long as the memory header is in the
         system.</short>
</element>

<!-- procedure Visibility: default -->
<element name="AddPort">
<short>Add a public message port to the system</short>
<descr><p>This function attaches a message port structure to the system's
  public message port list, where it can be found by the <link id="FindPort">FindPort()</link>
  function.  The name and priority fields of the port structure must
  be initialized prior to calling this function.  If the user does
  not require the priority field, it should be initialized to zero.</p>
<p>
  Only ports that will be searched for with <link id="FindPort">FindPort()</link> need to
  be added to the system list.  In addition, adding ports is often
  useful during debugging.  If the port will be searched for,
  the priority field should be at least 1 (to avoid the large number
  of inactive ports at priority zero). If the port will be searched
  for often, set the priority in the 50-100 range (so it will be
  before other less used ports).</p>
<p>
  Once a port has been added to the naming list, you must be careful
  to remove the port from the list (via <link id="RemPort">RemPort()</link>)
  before deallocating its memory.
</p>
<p>
  Do not AddPort an active port.
</p>
</descr>
<errors>
</errors>
<seealso>
<link id="RemPort"/>
<link id="FindPort"/>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="AddPort.port">
<short>Pointer to a message port
</short>
</element>

<!-- procedure Visibility: default -->
<element name="AddResource">
<short>Add a resource to the system
</short>
<descr>
  <p>This function adds a new resource to the system and makes it
  available to other users.  The resource must be ready to be called
  at this time.</p>
<p>
  Resources currently have no system-imposed structure, however they
  must start with a standard named node (<var>LN_SIZE</var>), and should with
  a standard Library node (<var>LIB_SIZE</var>).</p>
</descr>
<errors>
</errors>
<seealso>
<link id="RemResource"/>
<link id="OpenResource"/>
<link id="MakeLibrary"/>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="AddResource.resource">
<short>Pointer an initialized resource node</short>
</element>

<!-- procedure Visibility: default -->
<element name="AddSemaphore">
<short>Initialize then add a signal semaphore to the system</short>
<descr><p>This function attaches a signal semaphore structure to the system's
  public signal semaphore list.  The name and priority fields of the
  semaphore structure must be initialized prior to calling this
  function.  If you do not want to let others rendezvous with this
  semaphore, use <link id="InitSemaphore">InitSemaphore()</link> instead.</p>
<p>
  If a semaphore has been added to the naming list, you must be
  careful to remove the semaphore from the list (via <link id="RemSemaphore">RemSemaphore()</link>)
  before deallocating its memory.</p>
<p>
  Semaphores that are linked together in an allocation list (which
  <link id="ObtainSemaphoreList">ObtainSemaphoreList()</link> would use) may not be added to the system
  naming list, because the facilities use the link field of the
  signal semaphore in incompatible ways</p>
</descr>
<errors>
</errors>
<seealso>
<link id="RemSemaphore"/>
<link id="FindSemaphore"/>
<link id="InitSemaphore"/>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="AddSemaphore.sigSem">
<short>An signal semaphore structure</short>
</element>

<!-- procedure Visibility: default -->
<element name="AddTail">
<short>Append node to tail of a list
</short>
<descr><p>Add a node to the tail of a <link id="tList">list</link>. The Node will be the last node in the list.</p>
  <p><b>WARNING</b></p>
  <p>
  This function does not arbitrate for access to the list.  The
  calling task must be the owner of the involved list.
</p>
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="AddTail.list">
<short>Pointer to the target list</short>
</element>

<!-- argument Visibility: default -->
<element name="AddTail.node">
<short>Pointer to the Node to be added</short>
</element>

<!-- function Visibility: default -->
<element name="AddTask">
<short>Add a Task to the System</short>
<descr>
  <p>Add a task to the system.  A reschedule will be run; the task with
  the highest priority in the system will start to execute (this may
  or may not be the new task).</p>
<p>
  Certain fields of the task control block must be initialized and a
  stack allocated prior to calling this function.  The absolute
  smallest stack that is allowable is something in the range of 100
  bytes, but in general the stack size is dependent on what
  subsystems are called. In general 256 bytes is sufficient if only
  Exec is called, and 4K will do if anything in the system is called.
  DO NOT UNDERESTIMATE.  If you use a stack sniffing utility,
  leave a healthy pad above the minimum value.  The system guarantees
  that its stack operations will leave the stack longword aligned.</p>
<p>
  This function will temporarily use space from the new task's stack
  for the task's initial set of registers.  This space is allocated
  starting at the <var>SPREG</var> location specified in the task control block
  (not from <var>SPUPPER</var>).  This means that a task's stack may contain
  static data put there prior to its execution.  This is useful for
  providing initialized global variables or some tasks may want to
  use this space for passing the task its initial arguments.</p>

<p>A task's initial registers are set to zero (except the PC).</p>
<p>
  The <var>TC_MEMENTRY</var> field of the task structure may be extended by
  the user to hold additional MemLists (as returned by <link id="AllocEntry">AllocEntry()</link>).
  These will be automatically be deallocated at <link id="RemTask">RemTask()</link> time.
  If the code you have used to start the task has already added
  something to the <var>MEMENTRY</var> list, simply use <link id="AddHead"/> to add your
  new MemLists in.  If no initialization has been done, a NewList will
  need to be performed.</p>
</descr>
<errors>
If cannot create task <var>Result</var> will be <var>nil</var>.
</errors>
<seealso>
<link id="RemTask"/>
<link id="FindTask"/>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="AddTask.Result">
<short>Pointer to Task</short>
</element>

<!-- argument Visibility: default -->
<element name="AddTask.task">
<short>Pointer to the task control block (TCB). All unset fields
    must be zero.</short>
</element>

<!-- argument Visibility: default -->
<element name="AddTask.initPC">
<short>The initial entry point's address</short>
</element>

<!-- argument Visibility: default -->
<element name="AddTask.finalPC">
<short>the finalization code entry point's address. If zero,
      the system will use a general finalizer. This pointer is
      placed on the stack as if it were the outermost return
      address.</short>
</element>

<!-- procedure Visibility: default -->
<element name="Alert">
<short>Alert the user of an error</short>
<descr>
  <p>Alerts the user of a serious system problem.  This function will
  bring the system to a grinding halt, and do whatever is necessary
  to present the user with a message stating what happened.
  Interrupts are disabled, and an attempt to post the alert is made.
  If that fails, the system is reset.  When the system comes up
  again, Exec notices the cause of the failure and tries again to
  post the alert.</p>
<p>
  If the Alert is a recoverable type, this call MAY return.</p>
<p>
  This call may be made at any time, including interrupts.</p>
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="Alert.alertNum">
<short>A number indicating the particular alert. -1 is
    not a valid input.</short>
</element>

<!-- function Visibility: default -->
<element name="AllocAbs">
<short>Allocate at a given location</short>
<descr><p>This function attempts to allocate memory at a given absolute
  memory location.  Often this is used by boot-surviving entities
  such as recoverable ram-disks.  If the memory is already being
  used, or if there is not enough memory to satisfy the request,
  <var>AllocAbs</var> will return <var>nil</var>.</p>
<p>
  This block may not be exactly the same as the requested block
  because of rounding, but if the return value is non-zero, the block
  is guaranteed to contain the requested range.</p>
</descr>
<errors>
Result is <var>nil</var> if failed. If the free list is corrupt, the system will panic with alert
  <var>AN_MemCorrupt</var>, $01000005.

</errors>
<seealso>
<link id="Exec.ExecAllocMem"/>
<link id="Exec.ExecFreeMem"/>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="AllocAbs.Result">
<short>A pointer to the newly allocated memory block or <var>nil</var>
</short>
</element>

<!-- argument Visibility: default -->
<element name="AllocAbs.byteSize">
<short>The size of the desired block in bytes
       This number is rounded up to the next larger
       block size for the actual allocation.
</short>
</element>

<!-- argument Visibility: default -->
<element name="AllocAbs.location">
<short>The address where the memory MUST be.</short>
</element>

<!-- function Visibility: default -->
<element name="Allocate">
<short>Allocate a block of memory</short>
<descr>
<p>This function is used to allocate blocks of memory from a given
  private free memory pool (as specified by a MemHeader and its
  memory chunk list).  <var>Allocate</var> will return the first free block that
  is greater than or equal to the requested size.</p>
<p>
  All blocks, whether free or allocated, will be block aligned;
  hence, all allocation sizes are rounded up to the next block even
  value (e.g. the minimum allocation resolution is currently 8
  bytes.  A request for 8 bytes will use up exactly 8 bytes.  A
  request for 7 bytes will also use up exactly 8 bytes.).</p>
<p>
  This function can be used to manage an application's internal data
  memory.  Note that no arbitration of the MemHeader and associated
  free chunk list is done.  You must be the owner before calling
  <var>Allocate</var>.</p>
</descr>
<errors>
If the free list is corrupt, the system will panic with alert
  <var>AN_MemCorrupt</var>, $01000005.
</errors>
<seealso>
<link id="Deallocate"/>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="Allocate.Result">
<short>A pointer to the just allocated free block.
         If there are no free regions large enough to satisfy the
         request, return <var>nil</var>.</short>
</element>

<!-- argument Visibility: default -->
<element name="Allocate.freeList">
<short>Pointer to the local memory list header.</short>
</element>

<!-- argument Visibility: default -->
<element name="Allocate.byteSize">
<short>Size of the desired block in bytes.</short>
</element>

<!-- function Visibility: default -->
<element name="AllocEntry">
<short>Allocate many regions of memory</short>
<descr><p>
  This function takes a memList structure and allocates enough memory
  to hold the required memory as well as a MemList structure to keep
  track of it.</p>
<p>
  These MemList structures may be linked together in a task control
  block to keep track of the total memory usage of this task. (See
  the description of <var>TC_MEMENTRY</var> under <link id="RemTask">RemTask</link>).</p>
</descr>
<errors>
</errors>
<seealso>
<link id="RemTask"/>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="AllocEntry.Result">
<short> A different MemList filled in with the actual memory
      allocated in the me_Addr field, and their sizes in <var>me_Length</var>.
      If enough memory cannot be obtained, then the requirements of
      the allocation that failed is returned and bit 31 is set.
</short>
</element>

<!-- argument Visibility: default -->
<element name="AllocEntry.entry">
<short>A MemList structure filled in with MemEntry structures.</short>
</element>

<!-- function Visibility: default -->
<element name="ExecAllocMem">
<short>Allocate memory given certain requirements
</short>
<descr><p>
  This is the memory allocator to be used by system code and
  applications.  It provides a means of specifying that the allocation
  should be made in a memory area accessible to the chips, or
  accessible to shared system code.</p>
<p>
  Memory is allocated based on requirements and options.  Any
  "requirement" must be met by a memory allocation, any "option" will
  be applied to the block regardless.  AllocMem will try all memory
  spaces until one is found with the proper requirements and room for
  the memory request.</p>
</descr>
<errors>
  <p>>If the free list is corrupt, the system will panic with alert
  <var>AN_MemCorrupt</var>, $01000005.</p>
<p>
  This function may not be called from interrupts.</p>
<p>
  A DOS process will have its <var>pr_Result2</var> field set to
  <var>ERROR_NO_FREE_STORE</var> if the memory allocation fails.</p>
</errors>
<seealso>
<link id="Exec.ExecFreeMem"/>
<link id="AllocVec"/>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="ExecAllocMem.Result">
<short>A pointer to the newly allocated memory block.
    If there are no free memory regions large enough to satisfy
    the request, <var>nil</var> will be returned.  The pointer must be
    checked for <var>nil</var> before the memory block may be used!
</short>
</element>

<!-- argument Visibility: default -->
<element name="ExecAllocMem.byteSize">
<short>The size of the desired block in bytes.  (The operating
    system will automatically round this number to a multiple of
    the system memory chunk size)
</short>
</element>

<!-- argument Visibility: default -->
<element name="ExecAllocMem.requirements">
<short>If no flags are set, the system will return the best
    available memory block. (MEMF_*)</short>
</element>

<!-- function Visibility: default -->
<element name="AllocPooled">
<short>Allocate memory in a memory pool</short>
<descr>Allocates memory in a memory pool which is tracked in the pool.
A call to <link id="DeletePool"/> will free all memory blocks allocated in the pool.
</descr>
<errors>
</errors>
<seealso>
<link id="FreePooled"/>
<link id="CreatePool"/>
<link id="DeletePool"/>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="AllocPooled.Result">
<short>Pointer to the allocated memory or <var>nil</var></short>
</element>

<!-- argument Visibility: default -->
<element name="AllocPooled.poolHeader">
<short>Pointer to the memory pool in which the memory should be allocated.</short>
</element>

<!-- argument Visibility: default -->
<element name="AllocPooled.memSize">
<short>Size of the memory block in bytes</short>
</element>

<!-- function Visibility: default -->
<element name="AllocSignal">
<short>Allocate a signal bit</short>
<descr><p>
  Allocate a signal bit from the current tasks' pool.  Either a
  particular bit, or the next free bit may be allocated.  The signal
  associated with the bit will be properly initialized (cleared).  At
  least 16 user signals are available per task.  Signals should be
  deallocated before the task exits.</p>
<p>
  If the signal is already in use (or no free signals are available)
  a -1 is returned.</p>
<p>
  Allocated signals are only valid for use with the task that
  allocated them.</p>
<p><b>WARNING</b></p>
<p>Signals may not be allocated or freed from exception handling code.</p>
</descr>
<errors>
</errors>
<seealso>
<link id="FreeSignal"/>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="AllocSignal.Result">
<short>The signal bit number allocated [0..31]. If no signals
        are available, this function returns -1.
</short>
</element>

<!-- argument Visibility: default -->
<element name="AllocSignal.signalNum">
<short>The desired signal number (of [0..31]) or -1 for no
        preference.</short>
</element>

<!-- function Visibility: default -->
<element name="AllocTrap">
<short>Allocate a processor trap vector</short>
<descr><p>
  Allocate a trap number from the current task's pool.  These trap
  numbers are those associated with the 68000 TRAP type instructions.
  Either a particular number, or the next free number may be
  allocated.</p>
<p>
  If the trap is already in use (or no free traps are available) a -1
  is returned.</p>
<p>
  This function only affects the currently running task.</p>
<p>
  Traps are sent to the trap handler pointed at by tc_TrapCode.
  Unless changed by user code, this points to a standard trap
  handler.</p>
<p>
  tc_TrapData is not used.</p>
<p><b>WARNING</b></p>
<p>
  Traps may not be allocated or freed from exception handling code.
  You are not allowed to write to the exception table yourself.</p>
</descr>
<errors>
</errors>
<seealso>
<link id="FreeTrap"/>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="AllocTrap.Result">
<short>The trap number allocated [0..15]. If no traps are
      available, this function returns -1. </short>
</element>

<!-- argument Visibility: default -->
<element name="AllocTrap.trapNum">
<short>the desired trap number [0..15] or -1
      for no preference.</short>
</element>

<!-- function Visibility: default -->
<element name="AllocVec">
<short>Allocate memory and keep track of the size</short>
<descr>
<p>Allocate a memory block and record its size,
  <link id="FreeVec">FreeVec()</link> knows how many bytes to free.</p>
<p>
  Memory is allocated based on requirements and options.  Any
  "requirement" must be met by a memory allocation, any "option" will
  be applied to the block regardless.  AllocMem will try all memory
  spaces until one is found with the proper requirements and room for
  the memory request.</p>
</descr>
<errors>
</errors>
<seealso>
<link id="FreeVec"/>
<link id="Exec.ExecAllocMem"/>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="AllocVec.Result">
<short>A pointer to the newly allocated memory block.
    If there are no free memory regions large enough to satisfy
    the request, <var>nil</var> will be returned.  The pointer must be
    checked for <var>zero</var> before the memory block may be used!
</short>
</element>

<!-- argument Visibility: default -->
<element name="AllocVec.byteSize">
<short>The size of the desired block in bytes.  (The operating
    system will automatically round this number to a multiple of
    the system memory chunk size)</short>
</element>

<!-- argument Visibility: default -->
<element name="AllocVec.requirements">
<short>If no flags are set, the system will return the best
    available memory block.  For expanded systems, the fast
    memory pool is searched first. (MEMF_*)</short>
</element>

<!-- function Visibility: default -->
<element name="AttemptSemaphore">
<short>Try to obtain a Semaphore without blocking</short>
<descr>
  Try to obtain a lock on a Semaphore in exclusive mode all other exclusive and shared locks on this semaphore
  has to be released before.
  This call is similar to <link id="ObtainSemaphore">ObtainSemaphore()</link>,
  except that it will not block if the semaphore could not be locked.
</descr>
<errors>
</errors>
<seealso>
<link id="ReleaseSemaphore"/>
<link id="ObtainSemaphore"/>
<link id="AttemptSemaphoreShared"/>
<link id="ObtainSemaphoreShared"/>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="AttemptSemaphore.Result">
<short><var>True</var> if the semaphore was locked, <var>false</var> if some
      other task already possessed the semaphore.
</short>
</element>

<!-- argument Visibility: default -->
<element name="AttemptSemaphore.sigSem">
<short>An initialized signal semaphore structure
</short>
</element>

<!-- function Visibility: default -->
<element name="AttemptSemaphoreShared">
<short>Try to obtain a Semaphore without blocking in shared mode</short>
<descr><p>
  A lock on a signal semaphore may either be exclusive, or shared.
  Exclusive locks are granted by the <link id="ObtainSemaphore">ObtainSemaphore()</link> and
  <link id="ObtainSemaphore">AttemptSemaphore()</link> functions.  Shared locks are granted by
  <link id="ObtainSemaphoreShared">ObtainSemaphoreShared()</link>.  Calls may be nested.</p>
<p>
  Any number of tasks may simultaneously hold a shared lock on a
  semaphore.  Only one task may hold an exclusive lock.  A typical
  application is a list that is often read, but only occasionally
  written to.</p>
<p>
  Any exlusive locker will be held off until all shared lockers
  release the semaphore.  Likewise, if an exlusive lock is held,
  all potential shared lockers will block until the exclusive lock
  is released.  All shared lockers are restarted at the same time.
  This call is similar to <link id="ObtainSemaphoreShared">ObtainSemaphoreShared()</link>, except that it
   will not block if the semaphore could not be locked.</p>
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="AttemptSemaphoreShared.Result">
<short><var>True</var> if the semaphore was locked, <var>false</var> if some
      other task already exclusively locked the semaphore.</short>
</element>

<!-- argument Visibility: default -->
<element name="AttemptSemaphoreShared.sigSem">
<short>An initialized signal semaphore structure</short>
</element>

<!-- function Visibility: default -->
<element name="AvailMem">
<short>Check memory available given certain requirements
</short>
<descr><p>
  This function returns the amount of free memory given certain
  attributes.</p>
<p>
  To find out what the largest block of a particular type is, add
  <link id="MEMF_LARGEST"/> into the requirements argument.  Returning the largest
  block is a slow operation.</p>
<p><b>WARNING</b></p>
<p>
  Due to the effect of multitasking, the value returned may not
  actually be the amount of free memory available at that instant.</p>
<p><b>Snippet:</b></p>
<code>
  AvailMem(MEMF_LARGEST);
  // return size of largest available memory chunk
</code>
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="AvailMem.Result">
<short>Number of bytes free with the given properties (or biggest Memory Block)</short>
</element>

<!-- argument Visibility: default -->
<element name="AvailMem.requirements">
<short>A requirements mask for the memory properties (MEMF_*)</short>
</element>

<!-- procedure Visibility: default -->
<element name="CacheClearE">
<short></short>
<descr>
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="CacheClearE.address">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="CacheClearE.length">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="CacheClearE.caches">
<short></short>
</element>

<!-- procedure Visibility: default -->
<element name="CacheClearU">
<short></short>
<descr>
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>

<!-- function Visibility: default -->
<element name="CacheControl">
<short></short>
<descr>
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="CacheControl.Result">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="CacheControl.cacheBits">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="CacheControl.cacheMask">
<short></short>
</element>

<!-- procedure Visibility: default -->
<element name="CachePostDMA">
<short></short>
<descr>
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="CachePostDMA.address">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="CachePostDMA.length">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="CachePostDMA.flags">
<short></short>
</element>

<!-- function Visibility: default -->
<element name="CachePreDMA">
<short></short>
<descr>
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="CachePreDMA.Result">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="CachePreDMA.address">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="CachePreDMA.length">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="CachePreDMA.flags">
<short></short>
</element>

<!-- procedure Visibility: default -->
<element name="Cause">
<short>Fire and software interrupt</short>
<descr><p>
  This function causes a software interrupt to occur.  If it is
  called from user mode (and processor level 0), the software
  interrupt will preempt the current task.  This call is often used
  by high-level hardware interrupts to defer medium-length processing
  down to a lower interrupt level.  Note that a software interrupt is
  still a real interrupt, and must obey the same restrictions on what
  system function it may call.</p>
<p><b>NOTE</b></p>
<p>
  When setting up the <link id="PInterrupt"/> structure, set the node type to
  <link id="NT_INTERRUPT"/>, or <var>NT_UNKOWN</var>.</p>
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="Cause.interrupt_">
<short>Pointer to a initialized interrupt node</short>
</element>

<!-- function Visibility: default -->
<element name="CheckIO">
<short>Check status on an I/O request</short>
<descr><p>
  This function determines the current state of an I/O request and
  returns <var>False</var> if the I/O has not yet completed.  This function
  effectively hides the internals of the I/O completion mechanism.</p>
<p>
  <var>CheckIO()</var> will NOT remove the returned IORequest from the reply port.
  This is best performed with <link id="WaitIO">WaitIO()</link>. If the request has already
  completed, <link id="WaitIO">WaitIO()</link> will return quickly. Use of the <link id="Remove">Remove()</link>
  function is dangerous, since other tasks may still be adding things
  to your message port; a <link id="Disable">Disable()</link> would be required.</p>
<p>
  This function should NOT be used to busy loop (looping until IO is
  complete).  <var>WaitIO()</var> is provided for that purpose.</p>
</descr>
<errors>
</errors>
<seealso>
<link id="DoIO"/>
<link id="SendIO"/>
<link id="WaitIO"/>
<link id="AbortIO"/>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="CheckIO.Result">
<short><var>Nil</var> if I/O is still in progress otherwise a pointer to the I/O Request.</short>
</element>

<!-- argument Visibility: default -->
<element name="CheckIO.ioRequest">
<short>Pointer to an I/O request block</short>
</element>

<!-- procedure Visibility: default -->
<element name="CloseDevice">
<short>Close access to a device.</short>
<descr><p>
  This function informs the device that access to a device/unit
  previously opened has been concluded.  The device may perform
  certain house-cleaning operations.</p>
<p>
  The user must ensure that all outstanding IORequests have been
  returned before closing the device.  The AbortIO function can kill
  any stragglers.</p>
<p>
  After a close, the I/O request structure is free to be reused.
</p>
</descr>
<errors>
</errors>
<seealso>
<link id="OpenDevice"/>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="CloseDevice.ioRequest">
<short>A pointer to an I/O request structure</short>
</element>

<!-- procedure Visibility: default -->
<element name="CloseLibrary">
<short>Close access to library</short>
<descr>This function informs the system that access to the given library
  has been concluded.  The user must not reference the library or any
  function in the library after this close.
</descr>
<errors>
</errors>
<seealso>
<link id="OpenLibrary"/>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="CloseLibrary.lib">
<short>A Pointer to a library structure used to open the library</short>
</element>

<!-- procedure Visibility: default -->
<element name="ColdReboot">
<short>Reboot the Computer</short>
<descr><p>Reboot the machine.  All external memory and periperals will be
  reseted, and the machine will start its power up diagnostics.</p>
<p>
  This function never returns.</p>
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>

<!-- procedure Visibility: default -->
<element name="CopyMem">
<short>Copy a given numbers ob bytes in memory</short>
<descr>
<p>
  This function implements a fast memory copy function.  It can
  deal with arbitrary lengths, with its pointers on arbitrary
  alignments.  It attempts to optimize larger copies with more
  efficient copies, it uses byte copies for small moves, parts of
  larger copies, or the entire copy if the source and destination are
  misaligned with respect to each other.</p>
<p>
  Arbitrary overlapping copies are not supported.</p>
</descr>
<errors>
</errors>
<seealso>
<link id="CopyMemQuick"/>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="CopyMem.source">
<short>A pointer to the begin of source data</short>
</element>

<!-- argument Visibility: default -->
<element name="CopyMem.dest">
<short>A pointer to the begin of destination memory block</short>
</element>

<!-- argument Visibility: default -->
<element name="CopyMem.size">
<short>Number of bytes to be copied from <var>source</var> to <var>destination</var>, 0 is allowed and do nothing</short>
</element>

<!-- procedure Visibility: default -->
<element name="CopyMemQuick">
<short>Fast memory copy function</short>
<descr><p>
  CopyMemQuick is a highly optimized memory copy function, with
  restrictions on the size and alignment of its arguments. Both the
  source and destination pointers must be longword aligned.  In
  addition, the size must be an integral number of longwords (e.g.
  the size must be evenly divisible by four).</p>
<p>
  Arbitrary overlapping copies are not supported.</p>
</descr>
<errors>
</errors>
<seealso>
<link id="CopyMem"/>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="CopyMemQuick.source">
<short>A long aligned pointer to the begin of source data</short>
</element>

<!-- argument Visibility: default -->
<element name="CopyMemQuick.dest">
<short>A long aligned pointer to begin of destination memory block</short>
</element>

<!-- argument Visibility: default -->
<element name="CopyMemQuick.size">
<short>Number of bytes to be copied from <var>source</var> to <var>destination</var>, 0 is allowed and do nothing</short>
</element>

<!-- function Visibility: default -->
<element name="CreateIORequest">
<short>Create a structure usable for an I/O request</short>
<descr>
  Allocates memory for and initializes a new IO request block
  of a user-specified number of bytes.  The number of bytes
  must be at least as large as a <link id="TMessage"/>.
</descr>
<errors>
</errors>
<seealso>
<link id="DeleteIORequest"/>
<link id="CreateMsgPort"/>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="CreateIORequest.Result">
<short>A pointer to the I/O request structure created or <var>nil</var></short>
</element>

<!-- argument Visibility: default -->
<element name="CreateIORequest.port">
<short>A pointer to a port for replies (an initialized message
    port, as created by <link id="CreateMsgPort">CreateMsgPort()</link>).  If <var>nil</var>, this
    function fails.</short>
</element>

<!-- argument Visibility: default -->
<element name="CreateIORequest.size">
<short>The size of the IO request to be created.
</short>
</element>

<!-- function Visibility: default -->
<element name="CreateMsgPort">
<short>Create a new message port</short>
<descr><p>
  Allocates and initializes a new message port.  The message list
  of the new port will be prepared for use (via NewList).  A signal
  bit will be allocated, and the port will be set to signal your
  task when a message arrives (<link id="PA_SIGNAL"/>).</p>
<p>
  You <b>must</b> use <link id="DeleteMsgPort">DeleteMsgPort()</link> to delete ports created with this function!</p>
</descr>
<errors>
</errors>
<seealso>
  <link id="DeleteMsgPort"/>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="CreateMsgPort.Result">
<short>A pointer to the fresh allocted and initialized MsgPort or <var>nil</var> if failed.</short>
</element>

<!-- function Visibility: default -->
<element name="CreatePool">
<short>Create a new pool for memory allocations</short>
<descr><p>
  Each pool is a
  separate tracking system for memory of a specific type.  Any number
  of pools may exist in the system.</p>
<p>
  Pools automatically expand and shrink based on demand.  Fixed sized
  "puddles" are allocated by the pool manager when more total memory
  is needed.  Many small allocations can fit in a single puddle.
  Allocations larger than the <var>threshSize</var> are allocation in their own
  puddles.</p>
<p>
  At any time individual allocations may be freed.  Or, the entire
  pool may be removed in a single step.</p>
</descr>
<errors>
</errors>
<seealso>
  <link id="DeletePool"/>
  <link id="AllocPooled"/>
  <link id="FreePooled"/>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="CreatePool.Result">
<short>A pointer to the new pool, or <var>nil</var> for error.</short>
</element>

<!-- argument Visibility: default -->
<element name="CreatePool.requirements">
<short>Memory flags requirement (MEMF_*), all puddles will have this requirement.</short>
</element>

<!-- argument Visibility: default -->
<element name="CreatePool.puddleSize">
<short>Size of puddles</short>
</element>

<!-- argument Visibility: default -->
<element name="CreatePool.threshSize">
<short>The largest allocation that goes into normal puddles
       This <b>MUST</b> be less than or equal to <var>puddleSize</var>
       (<var>CreatePool()</var> will fail if it is not)</short>
</element>

<!-- procedure Visibility: default -->
<element name="Deallocate">
<short>Free a block of memory</short>
<descr><p>
  This function deallocates memory by returning it to the appropriate
  private free memory pool.  This function can be used to free an
  entire block allocated with the above function, or it can be used
  to free a sub-block of a previously allocated block.  Sub-blocks
  must be an even multiple of the memory chunk size (currently 8
  bytes).</p>
<p>
  This function can even be used to add a new free region to an
  existing MemHeader, however the extent pointers in the MemHeader
  will no longer be valid.</p>
<p>
  If <var>memoryBlock</var> is not on a block boundary then it
  will be rounded down in a manner compatible with <link id="Allocate">Allocate()</link>.  Note
  that this will work correctly with all the memory allocation
  functions, but may cause surprises if one is freeing only part of a
  region.  The size of the block will be rounded up, so the freed
  block will fill to an even memory block boundary.</p>
</descr>
<errors>
</errors>
<seealso>
<link id="Allocate"/>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="Deallocate.freeList">
<short>Points to the memory header this block is part of</short>
</element>

<!-- argument Visibility: default -->
<element name="Deallocate.memoryBlock">
<short>Address of memory block to free</short>
</element>

<!-- argument Visibility: default -->
<element name="Deallocate.byteSize">
<short>Number of bytes to free. <var>nil</var> is allowed and does nothing</short>
</element>

<!-- procedure Visibility: default -->
<element name="Debug">
<short>Calls the debugger</short>
<descr>This function calls the system debugger. Debuggers  are
  encouraged to take over this entry point (via <link id="SetFunction">SetFunction()</link>) so
  that when an application calls <var>Debug()</var>, the alternative debugger
  will get control.
</descr>
<errors>
</errors>
<seealso>
<link id="SetFunction"/>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="Debug.flags">
<short> Currently a 0 is passed to allow future expansion.</short>
</element>

<!-- procedure Visibility: default -->
<element name="DeleteIORequest">
<short>Free an i/O request</short>
<descr>
  Frees up an I/O request created by <link id="CreateIORequest">CreateIORequest()</link>.
</descr>
<errors>
</errors>
<seealso>
<link id="CreateIORequest"/>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="DeleteIORequest.iorequest">
<short>A pointer to the I/O request block to be freed.
    This function uses the <var>mn_Length</var> field to determine how
    much memory to free. <var>nil</var> is allowed and does nothing.</short>
</element>

<!-- procedure Visibility: default -->
<element name="DeleteMsgPort">
<short>Free a message port</short>
<descr>
  Frees a message port create by <link id="CreateMsgPort">CreateMsgPort()</link>. All messages that
  may have been attached to this port must have already been replied to.
</descr>
<errors>
</errors>
<seealso>
  <link id="CreateMsgPort"/>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="DeleteMsgPort.port">
<short>A pointer to a message port to free.  <var>nil</var> is allowed and does nothing</short>
</element>

<!-- procedure Visibility: default -->
<element name="DeletePool">
<short>Free a memory pool</short>
<descr>
  Frees all memory in all pudles of the specified pool header, then
  deletes the pool header.  Individual free calls are not needed.
</descr>
<errors>
</errors>
<seealso>
<link id="CreatePool"/>
<link id="AllocPooled"/>
<link id="FreePooled"/>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="DeletePool.poolHeader">
<short></short>
</element>

<!-- procedure Visibility: default -->
<element name="Disable">
<short>Disable interrupt processing</short>
<descr><p>
  Prevents interrupts from being handled by the system, until a
  matching <link id="Enable">Enable()</link> is executed.  <var>Disable()</var> implies <link id="Forbid">Forbid()</link>. Normal task rescheduling does not occur while interrupts are disabled.</p>
<p>
  Do <b>not</b> use this call without a special reason, its very dangerous and
  hinder the basic function of the operating system and computer.
  It is important to remember that there is a danger in using
  disabled sections.  Disabling interrupts for more than ~250
  microseconds will prevent vital system functions (especially serial
  I/0) from operating in a normal fashion.</p>
<p>
  Think twice before using <var>Disable()</var>, then think once more.
  After all that, think again.  With enough thought, the need
  for a <var>Disable()</var> can often be eliminated.</p>
</descr>
<errors>
</errors>
<seealso>
<link id="Forbid"/>
<link id="Permit"/>
<link id="Enable"/>
</seealso>
</element>

<!-- function Visibility: default -->
<element name="DoIO">
<short>Perform an I/O request and wait for its finish</short>
<descr><p>
  This function requests a device driver to perform the I/O command
  specified in the I/O request.  This function will always wait until
  the I/O request is fully complete.</p>
<p>
  <var>DoIO()</var> handles all the details, including Quick I/O, waiting for
  the request, and removing the reply message, etc..</p>
<p>
  This function first tries to complete the IO via the "Quick I/O"
  mechanism.  The <var>io_Flags</var> field is always set to IOF_QUICK (0x01)
  before the internal device call.</p>
<p>
  The <var>LN_TYPE field</var> is used internally to flag completion.  Active
  requests have type <link id="NT_MESSAGE"/>.  Requests that have been replied
  have type <link id="NT_REPLYMSG"/>.  It is illegal to start IO using a
  still active IORequest, or a request with type <link id="NT_REPLYMSG"/>.</p>
</descr>
<errors>
</errors>
<seealso>
<link id="SendIO"/>
<link id="CheckIO"/>
<link id="WaitIO"/>
<link id="AbortIO"/>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="DoIO.Result">
<short>A pointer to an I/O Request initialized by <link id="OpenDevice">OpenDevice()</link>
</short>
</element>

<!-- argument Visibility: default -->
<element name="DoIO.ioRequest">
<short>A sign-extended copy of the <var>io_Error</var> field of the
    I/O request. Most device commands require that the error
    return be checked.</short>
</element>

<!-- procedure Visibility: default -->
<element name="Enable">
<short>Enable interrupt processing</short>
<descr>
Allow system interrupts again occur after a <link id="Disable">Disable()</link> was called.
</descr>
<errors>
The programmer must execute exactly one call to <var>Enable()</var> for every call to <link id="Disable">Disable()</link>.
</errors>
<seealso>
<link id="Disable"/>
<link id="Permit"/>
<link id="Forbid"/>
</seealso>
</element>

<!-- procedure Visibility: default -->
<element name="Enqueue">
<short>Insert or append node to a system list
</short>
<descr><p>
  Insert or append a node into a system list.  The insert is
  performed based on the node priority. It will keep the list
  properly sorted.  New nodes will be inserted in front of the first
  node with a lower priority. Hence a FIFO queue for nodes of equal
  priority</p>
<p><b>WARNING</b></p>
<p>This function does not arbitrate for access to the list.  The
  calling task must be the owner of the involved list.</p>
</descr>
<errors>
</errors>
<seealso>
<link id="AddHead"/>
<link id="AddTail"/>
<link id="Exec.ExecInsert"/>
<link id="Remove"/>
<link id="RemHead"/>
<link id="RemTail"/>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="Enqueue.list">
<short>A pointer to the system list header</short>
</element>

<!-- argument Visibility: default -->
<element name="Enqueue.node">
<short>The node to enqueue.  This must be a full featured node with type, priority and name fields.</short>
</element>

<!-- procedure Visibility: default -->
<element name="ExecFreeMem">
<short>Free a memory block with given size</short>
<descr>
  Free a memory block allocated using <link id="Exec.ExecAllocMem">ExecAllocMem()</link>, program should not access this memory area anymore. If a memory block is freed twice an Guru will appear <link id="AN_FreeTwice"/>. if a wrong pointer is passed a <link id="AN_MemCorrupt"/> is fired. The original name <var>FreeMem</var> is colliding with the RTL Freemem.
</descr>
<errors>
</errors>
<seealso>
<link id="Exec.ExecAllocMem"/>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="ExecFreeMem.memoryBlock">
<short>A pointer to the memory block to free</short>
</element>

<!-- argument Visibility: default -->
<element name="ExecFreeMem.byteSize">
<short>The size of the desired block in bytes. (The operating
    system will automatically round this number to a multiple of
    the system memory chunk size)
</short>
</element>

<!-- procedure Visibility: default -->
<element name="ExecInsert">
<short>Insert a node into a list</short>
<descr><p>
  Insert a node into a system list after a given node.
  Insertion at the head of a list is possible by passing a
  <var>nil</var> value for listNode, though the <link id="AddHead">AddHead()</link>
  function is slightly faster for that special case.
  The original name <var>Insert</var> is colliding with the RTL Insert.</p>
<p><b>WARNING</b></p>
<p>This function does not arbitrate for access to the list.  The
  calling task must be the owner of the involved list.</p>
</descr>
<errors>
</errors>
<seealso>
<link id="AddHead"/>
<link id="AddTail"/>
<link id="Enqueue"/>
<link id="Remove"/>
<link id="RemHead"/>
<link id="RemTail"/>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="ExecInsert.list">
<short>A pointer to the target list</short>
</element>

<!-- argument Visibility: default -->
<element name="ExecInsert.node">
<short>Node to insert</short>
</element>

<!-- argument Visibility: default -->
<element name="ExecInsert.pred">
<short>A node of the list after the new node will be inserted</short>
</element>

<!-- function Visibility: default -->
<element name="FindName">
<short>Find a node in a system list by name</short>
<descr><p>
  Search a system list for a node with the given name.
  To find multiple occurrences of a string, this function may be
  called with a different node starting point.</p>
<p>
  No arbitration is done for access to the list!  If multiple tasks
  access the same list, an arbitration mechanism such as
  SignalSemaphores must be used.</p>
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="FindName.Result">
<short>A pointer to the node with the same name else
      <var>nil</var> to indicate that the string was not found.</short>
</element>

<!-- argument Visibility: default -->
<element name="FindName.list">
<short>A list or a list node to start the search
    (if node, this one is skipped)</short>
</element>

<!-- argument Visibility: default -->
<element name="FindName.name">
<short>Node name to find in the list</short>
</element>

<!-- function Visibility: default -->
<element name="FindPort">
<short>Find a system message port by name</short>
<descr><p>
  This function will search the system message port list for a port
  with the given name.  The first port matching this name will be
  returned.  No arbitration of the port list is done.  This function
  <b>must</b> be protected with A <link id="Forbid">Forbid()</link>/<link id="Permit">Permit()</link> pair!
  </p>
</descr>
<example file="../examples/SafePort.pp"/>
<errors>
</errors>
<seealso>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="FindPort.Result">
<short>A pointer to the message port, or <var>nil</var> if
    not found.</short>
</element>

<!-- argument Visibility: default -->
<element name="FindPort.name">
<short>Name of the message port to find.</short>
</element>

<!-- function Visibility: default -->
<element name="FindResident">
<short>Find a resident module by name</short>
<descr><p>
  Search the system resident tag list for a resident tag ("ROMTag") with
  the given name.  If found return a pointer to the resident tag
  structure, else return <var>nil</var>.</p>
<p>
  Resident modules are used by the system to pull all its parts
  together at startup.  Resident tags are also found in disk based
  devices and libraries.</p>
</descr>
<errors>
</errors>
<seealso>
<link id="InitResident"/>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="FindResident.Result">
<short>A pointer to the resident tag structure or <var>nil</var> if none found.
</short>
</element>

<!-- argument Visibility: default -->
<element name="FindResident.name">
<short>Name of the resident to find</short>
</element>

<!-- function Visibility: default -->
<element name="FindSemaphore">
<short>Find Semaphore by name</short>
<descr>This function will search the system signal semaphore list for a
  semaphore with the given name.  The first semaphore matching this
  name will be returned. This function  <b>must</b> be protected with A <link id="Forbid">Forbid()</link>/<link id="Permit">Permit()</link> pair!
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="FindSemaphore.Result">
<short>A pointer to the signal semaphore, or <var>nil</var> if none
        found.</short>
</element>

<!-- argument Visibility: default -->
<element name="FindSemaphore.sigSem">
<short>Name of the semaphore to find</short>
</element>

<!-- function Visibility: default -->
<element name="FindTask">
<short>Find task by name get own task</short>
<descr><p>
  This function will check all task queues for a task with the given
  name, and return a pointer to its task control block.  If a <var>nil</var>
  name pointer is given a pointer to the current task will be
  returned.</p>
<p>
  Finding oneself with a <var>nil</var> for the name is very quick. Finding a
  task by name is very system expensive, and will disable interrupts
  for a long time.  Since a task may remove itself at any time,
  a <link id="Forbid">Forbid()</link>/<link id="Permit">Permit()</link> pair may be needed to ensure the pointer
  returned by <var>FindTask()</var> is still valid when used.</p>
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="FindTask.Result">
<short>A pointer to the task or process, or <var>nil</var> if none found.</short>
</element>

<!-- argument Visibility: default -->
<element name="FindTask.name">
<short>Name of task to found.</short>
</element>

<!-- procedure Visibility: default -->
<element name="Forbid">
<short>Forbid task scheduling.</short>
<descr><p>
  Prevents other tasks from being scheduled to run by the dispatcher,
  until a matching <link id="Permit">Permit()</link> is executed, or this task is scheduled to
  <link id="Wait">Wait()</link>.  Interrupts are <b>not</b> disabled.</p>
  <p>
  The current task will not be rescheduled as long as it is ready to
  run.  In the event that the current task enters a wait state, other
  tasks may be scheduled.  Upon return from the wait state, the original
  task will continue to run without disturbing the <var>Forbid()</var>.</p>
<p>
  Calls to <var>Forbid()</var> nest. In order to restore normal task rescheduling,
  the programmer must execute exactly one call to <link id="Permit">Permit()</link> for every
  call to <var>Forbid()</var>.</p>
<p><b>Warning:</b></p>
<p>In the event of a task entering a <link id="Wait">Wait()</link> after a <var>Forbid()</var>, the system
  "breaks" the forbidden state and runs normally until the task which
  called <var>Forbid()</var> is rescheduled.  If caution is not taken, this can
  cause subtile bugs, since any device or DOS call will (in effect)
  cause your task to wait.</p>
</descr>
<errors>
</errors>
<seealso>
<link id="Permit"/>
<link id="Disable"/>
<link id="Enable"/>
</seealso>
</element>

<!-- procedure Visibility: default -->
<element name="FreeEntry">
<short>Free many blocks of memory at once</short>
<descr>This function frees a list of memory blocks and frees all entries at once.
</descr>
<errors>
</errors>
<seealso>
<link id="AllocEntry"/>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="FreeEntry.entry">
<short>A Pointer to a list filled with <link id="PMemEntry"/></short>
</element>

<!-- procedure Visibility: default -->
<element name="FreePooled">
<short>Free pooled memory block</short>
<descr>
Free a memory block which belongs to a memory pool. The block is removed from the pool. Only Memory
allocated with <link id="AllocPooled">AllocPooled()</link> are freed with this function.
</descr>
<errors>
</errors>
<seealso>
<link id="AllocPooled"/>
<link id="CreatePool"/>
<link id="DeletePool"/>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="FreePooled.poolHeader">
<short>A pointer to the pool this memory block belongs to.</short>
</element>

<!-- argument Visibility: default -->
<element name="FreePooled.memory">
<short>Pointer to the memory to free.</short>
</element>

<!-- argument Visibility: default -->
<element name="FreePooled.memSize">
<short>Number of bytes to free. <b>Must</b> match the size used when <link id="AllocPooled">AllocPooled</link> was done.</short>
</element>

<!-- procedure Visibility: default -->
<element name="FreeSignal">
<short>Free a signal bit</short>
<descr>This function frees a previously allocated signal bit for reuse.
  This call must be performed while running in the same task in which
  the signal was allocated.
</descr>
<errors>
</errors>
<seealso>
<link id="AllocSignal"/>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="FreeSignal.signalNum">
<short>The signal number to free [0..31].</short>
</element>

<!-- procedure Visibility: default -->
<element name="FreeTrap">
<short>Free a processor trap</short>
<descr>
  This function frees a previously allocated trap number for reuse.
  This call must be performed while running in the same task in which
  the trap was allocated.
</descr>
<errors>
</errors>
<seealso>
<link id="AllocTrap"/>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="FreeTrap.trapNum">
<short>The trap number to free [of 0..15]</short>
</element>

<!-- procedure Visibility: default -->
<element name="FreeVec">
<short>Free memory with tracked size made using <link id="exec.AllocVec">AllocVec()</link></short>
<descr>
</descr>
<errors>
</errors>
<seealso>
<link id="AllocVec"/>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="FreeVec.memoryBlock">
<short>A Pointer to the memory block to free. <var>nil</var> is allowed and does nothing. </short>
</element>

<!-- function Visibility: default -->
<element name="GetCC">
<short></short>
<descr>
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="GetCC.Result">
<short></short>
</element>

<!-- function Visibility: default -->
<element name="GetMsg">
<short>Get next message from message port</short>
<descr><p>
  This function receives a message from a given message port. It
  provides a fast, non-copying message receiving mechanism. The
  received message is removed from the message port.</p>
<p>
  This function will not wait.  If a message is not present this
  function will return <var>nil</var>.  If a program must wait for a message,
  it can <link id="Wait">Wait()</link> on the signal specified for the port or use the
  WaitPort() function.  There can only be one task waiting for any
  given port.</p>
<p>
  Getting a message does not imply to the sender that the message is
  free to be reused by the sender.  When the receiver is finished
  with the message, it may <link id="ReplyMsg">ReplyMsg()</link> it back to the sender.</p>
<p>
  Getting a signal does NOT always imply a message is ready.  More
  than one message may arrive per signal, and signals may show up
  without messages.  Typically you must loop to <var>GetMsg()</var> until it
  returns zero, then <link id="Wait">Wait()</link> or <link id="WaitPort">WaitPort()</link>.</p>
</descr>
<errors>
</errors>
<seealso>
<link id="PutMsg"/>
<link id="ReplyMsg"/>
<link id="WaitPort"/>
<link id="Wait"/>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="GetMsg.Result">
<short>A pointer to the first message available.  If
      there are no messages, <var>nil</var> is returned.</short>
</element>

<!-- argument Visibility: default -->
<element name="GetMsg.port">
<short>Message port to check for new message</short>
</element>

<!-- procedure Visibility: default -->
<element name="InitCode">
<short>Initialize resident code modules (internal function)</short>
<descr>(This function may be ignored by application programmers)
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="InitCode.startClass">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="InitCode.version">
<short></short>
</element>

<!-- function Visibility: default -->
<element name="InitResident">
<short>Initialize resident module</short>
<descr>Initialize a ROMTag.  ROMTags are used to link system modules
  together.  Each disk based device or library must contain a
  ROMTag structure in the first code hunk.
</descr>
<errors>
<link id="FindResident"/>
</errors>
<seealso>

</seealso>
</element>

<!-- function result Visibility: default -->
<element name="InitResident.Result">
<short>Return value from the init code, usually the library
      or device base.  <var>Nil</var> for failure.</short>
</element>

<!-- argument Visibility: default -->
<element name="InitResident.resident_">
<short>Pointer to a ROMTag</short>
</element>

<!-- argument Visibility: default -->
<element name="InitResident.segList">
<short>SegList of the loaded object, if loaded from disk.
       Libraries and Devices will cache this value for later
       return at close or expunge time.  Pass <var>nil</var> for ROM
       modules.</short>
</element>

<!-- procedure Visibility: default -->
<element name="InitSemaphore">
<short>Initialize a signal semaphore</short>
<descr><p>
 This function initializes a signal semaphore and prepares it for
  use.  It does not allocate anything, but does initialize list
  pointers and the semaphore counters.</p>
<p>
  Semaphores are often used to protect critical data structures
  or hardware that can only be accessed by one task at a time.
  After initialization, the address of the SignalSemaphore may be
  made available to any number of tasks.  Typically a task will
  try to <link id="ObtainSemaphore">ObtainSemaphore()</link>, passing this address in.
  If no other task owns the semaphore, then the call will lock and return
  quickly.  If more tasks try to <link id="ObtainSemaphore">ObtainSemaphore()</link>, they will
  be put to sleep.  When the owner of the semaphore releases
  it, the next waiter in turn will be woken up.</p>
<p>
  Semaphores are often preferable to the old-style <link id="Forbid">Forbid()</link>/<link id="Permit">Permit()</link>
  type arbitration.  With <link id="Forbid">Forbid()</link>/<link id="Permit">Permit()</link> <b>>all</b> other tasks are
  prevented from running.  With semaphores, only those tasks that
  need access to whatever the semaphore protects are subject
  to waiting.
</p>
</descr>
<errors>
</errors>
<seealso>
<link id="ObtainSemaphore"/>
<link id="ObtainSemaphoreShared"/>
<link id="AttemptSemaphore"/>
<link id="ReleaseSemaphore"/>
<link id="Procure"/>
<link id="Vacate"/>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="InitSemaphore.sigSem">
<short>A pointer to a signal semaphore structure (with all fields
         set to 0 before the call)</short>
</element>

<!-- procedure Visibility: default -->
<element name="InitStruct">
<short>Initialize memory from a table</short>
<descr>Clear a memory area, then set up default values according to
  the data and offset values in the initTable.
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="InitStruct.initTable">
<short>The beginning of the commands and data to init
    Memory with.  Must be on an even boundary unless only
    byte initialization is done.</short>
</element>

<!-- argument Visibility: default -->
<element name="InitStruct.memory">
<short>The beginning of the memory to initialize.  Must be
    on an even boundary if size is specified.</short>
</element>

<!-- argument Visibility: default -->
<element name="InitStruct.size">
<short>The size of memory, which is used to clear it before
    initializing it via the initTable.  If Size is zero,
    memory is not cleared before initializing. Must be an even number.
</short>
</element>

<!-- procedure Visibility: default -->
<element name="MakeFunctions">
<short>Construct a function jump table
</short>
<descr>A low level function used by <link id="MakeLibrary">MakeLibrary()</link> to build jump tables of
  the type used by libraries, devices and resources.  It allows the
  table to be built anywhere in memory, and can be used both for
  initialization and replacement. This function also supports function
  pointer compression by expanding relative displacements into absolute
  pointers.
</descr>
<errors>
</errors>
<seealso>
<link id="MakeLibrary"/>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="MakeFunctions.target">
<short>The target address for the high memory end of the
    function jump table.  Typically this will be the library
    base pointer.</short>
</element>

<!-- argument Visibility: default -->
<element name="MakeFunctions.functionArray">
<short>A Pointer to an array of function pointers or
    function displacements.  If <var>nil</var>, the array
    is assumed to contain absolute pointers to functions. If
    not <var>nil</var>, then the array is assumed to
    contain word displacements to functions.  In both cases,
    the array is terminated by a -1 (of the same size as the
    actual entry.</short>
</element>

<!-- argument Visibility: default -->
<element name="MakeFunctions.funcDispBase">
<short>A Pointer to the base about which all function
    displacements are relative.  If <var>nil</var>, then the function
    array contains absolute pointers.
</short>
</element>

<!-- function Visibility: default -->
<element name="MakeLibrary">
<short>Construct a library</short>
<descr>This function is used for constructing a library vector and data
  area.  The same call is used to make devices.  Space for the library
  is allocated from the system's free memory pool.  The data portion of
  the library is initialized.  Init may point to a library specific
  entry point.
</descr>
<errors>
</errors>
<seealso>
<link id="InitStruct"/>
<link id="InitResident"/>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="MakeLibrary.Result">
<short>The reference address of the library.  This is the
      address used in references to the library, not the
      beginning of the memory area allocated.  If the library
      vector table require more system memory than is
      available, this function will return <var>nil</var>.</short>
</element>

<!-- argument Visibility: default -->
<element name="MakeLibrary.funcInit">
<short>A pointer to an array of function pointers or function
    displacements.  If the first word of the array is -1, then
    the array contains relative word displacements (based off
    of vectors); otherwise, the array contains absolute
    function pointers. The vector list is terminated by a -1
    (of the same size as the pointers).
</short>
</element>

<!-- argument Visibility: default -->
<element name="MakeLibrary.structInit">
<short>points to an <link id="InitStruct">InitStruct"</link> data region.  If <var>nil</var>,
    then it will not be used.
</short>
</element>

<!-- argument Visibility: default -->
<element name="MakeLibrary.libInit">
<short>Entry point for the library, used for initcode, function must return the library address or <var>nil</var></short>
</element>

<!-- argument Visibility: default -->
<element name="MakeLibrary.dataSize">
<short>the size of the library data area, including the
    standard library node data.  This must be at leas
    SizeOf(<link id="TLibrary">TLibrary</link>).</short>
</element>

<!-- argument Visibility: default -->
<element name="MakeLibrary.segList">
<short>A pointer to an Amiga SegList (segment list).
     This is passed to a library's init code, and is used later
     for removing the library from memory.
</short>
</element>

<!-- function Visibility: default -->
<element name="ObtainQuickVector">
<short>Obtain and install a Quick Interrupt vector</short>
<descr><p>
  This function will install the code pointer into the quick interrupt
  vector it allocates and returns to you the interrupt vector that
  your Quick Interrupt system needs to use.</p>
<p>
  This function may also return 0 if no vectors are available.  Your
  hardware should be able to then fall back to using the shared
  interrupt server chain should this happen.</p>
<p>
  The interrupt code is a direct connect to the physical interrupt.
  This means that it is the responsibility of your code to do all
  of the context saving/restoring required by interrupt code.</p>
<p>
  Also, due to the performance of the interrupt controller, you may
  need to also watch for "false" interrupts.  These are interrupts
  that come in just after a DISABLE.  The reason this happens is
  because the interrupt may have been posted before the DISABLE
  hardware access is completed.</p>
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="ObtainQuickVector.Result">
<short>If it returns 0, no quick interrupt was allocatable.  The device
  should at this point switch to using the shared interrupt server
  method.</short>
</element>

<!-- argument Visibility: default -->
<element name="ObtainQuickVector.interruptCode">
<short>A pointer to your interrupt code.  This code is not an EXEC interrupt
  but is dirrectly connected to the hardware interrupt.</short>
</element>

<!-- procedure Visibility: default -->
<element name="ObtainSemaphore">
<short>Gain exclusive access to a semaphore</short>
<descr><p>
  Signal semaphores are used to gain exclusive access to an object.
  <var>ObtainSemaphore</var> is the call used to gain this access.  If another
  user currently has the semaphore locked the call will block until
  the object is available.</p>
<p>
  If the current task already has locked the semaphore and attempts to
  lock it again the call will still succeed.  A "nesting count" is
  incremented each time the current owning task of the semaphore calls
  <var>ObtainSemaphore()</var>.  This counter is decremented each time
  <link id="ReleaseSemaphore">ReleaseSemaphore()</link> is called.
  When the counter returns to zero the
  semaphore is actually released, and the next waiting task is called.</p>
<p>
  A queue of waiting tasks is maintained on the stacks of the waiting
  tasks.  Each will be called in turn as soon as the current task
  releases the semaphore.</p>
<p>
  Signal Semaphores are different than <link id="Procure">Procure()</link>/<link id="Vacate">Vacate()</link> semaphores.
  The former requires less CPU time, especially if the semaphore is
  not currently locked.  They require very little set up and user
  thought.  The latter flavor of semaphore make no assumptions about
  how they are used -- they are completely general.  Unfortunately
  they are not as efficient as signal semaphores, and require the
  locker to have done some setup before doing the call.</p>
</descr>
<errors>
</errors>
<seealso>
<link id="ObtainSemaphoreShared"/>
<link id="InitSemaphore"/>
<link id="ReleaseSemaphore"/>
<link id="AttemptSemaphore"/>
<link id="ObtainSemaphoreList"/>
<link id="Procure"/>
<link id="Vacate"/>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="ObtainSemaphore.sigSem">
<short>An initialized signal semaphore structure</short>
</element>

<!-- procedure Visibility: default -->
<element name="ObtainSemaphoreList">
<short>Get a List of semaphores</short>
<descr><p>
  Signal semaphores may be linked together into a list. This function
  takes a list of these semaphores and attempts to lock all of them at
  once. This call is preferable to applying  <link id="ObtainSemaphore">ObtainSemaphore()</link> to each
  element in the list because it attempts to lock all the elements
  simultaneously, and won't deadlock if someone is attempting to lock
  in some other order.</p>
<p>
  This function assumes that only one task at a time will attempt to
  lock the entire list of semaphores.  In other words, there needs to
  be a higher level lock (perhaps another signal semaphore...) that is
  used before someone attempts to lock the semaphore list via
  <var>ObtainSemaphoreList()</var>.</p>
<p>
  Note that deadlocks may result if this call is used AND someone
  attempts to use <link id="ObtainSemaphore">ObtainSemaphore()</link> to lock more than one semaphore on
  the list.  If you wish to lock more than one semaphore (but not all of
  them) then you should obtain the higher level lock</p>
</descr>
<errors>
</errors>
<seealso>
<link id="ObtainSemaphoreShared"/>
<link id="InitSemaphore"/>
<link id="ReleaseSemaphore"/>
<link id="AttemptSemaphore"/>
<link id="ObtainSemaphore"/>
<link id="Procure"/>
<link id="Vacate"/>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="ObtainSemaphoreList.sigSem">
<short>A list of signal semaphores</short>
</element>

<!-- procedure Visibility: default -->
<element name="ObtainSemaphoreShared">
<short>Gain access to a semaphore in shared mode</short>
<descr><p>
  A lock on a signal semaphore may either be exclusive, or shared.
  Exclusive locks are granted by the ObtainSemaphore() and
  AttemptSemaphore() functions.  Shared locks are granted by
  ObtainSemaphoreShared().  Calls may be nested.</p>
<p>
  Any number of tasks may simultaneously hold a shared lock on a
  semaphore.  Only one task may hold an exclusive lock.  A typical
  application is a list that is often read, but only occasionally
  written to.</p>
<p>
  Any exlusive locker will be held off until all shared lockers
  release the semaphore.  Likewise, if an exlusive lock is held,
  all potential shared lockers will block until the exclusive lock
  is released.  All shared lockers are restarted at the same time.</p>
<p>
  A task owning a shared lock must not attempt to get an exclusive
  lock on the same semaphore.</p>
</descr>
<errors>
</errors>
<seealso>
<link id="ObtainSemaphoreList"/>
<link id="InitSemaphore"/>
<link id="ReleaseSemaphore"/>
<link id="AttemptSemaphore"/>
<link id="ObtainSemaphore"/>
<link id="Procure"/>
<link id="Vacate"/>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="ObtainSemaphoreShared.sigSem">
<short>An initialized signal semaphore structure</short>
</element>

<!-- function Visibility: default -->
<element name="OldOpenLibrary">
<short>Old Version of <link id="OpenLibrary"/> (deprecated)</short>
<descr>This is the same function as <link id="OpenLibrary">OpenLibrary()</link>, only that it uses 0 as
  version number. This function is obsolete. Don't use it.
</descr>
<errors>
</errors>
<seealso>
<link id="OpenLibrary"/>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="OldOpenLibrary.Result">
<short>A library pointer for a successful open, else <var>nil</var>.
</short>
</element>

<!-- argument Visibility: default -->
<element name="OldOpenLibrary.libName">
<short>The name of the library to open
</short>
</element>

<!-- function Visibility: default -->
<element name="OpenDevice">
<short>Open a device for use</short>
<descr><p>
  This function opens the named device/unit and initializes the given
  I/O request block.  Specific documentation on opening procedures
  may come with certain devices.</p>
<p>
  The device may exist in memory, or on disk; this is transparent to
  the OpenDevice caller.</p>
<p>
  A full path name for the device name is legitimate.  For example
  "test:devs/fred.device".  This allows the use of custom devices
  without requiring the user to copy the device into the system's
  DEVS: directory.</p>
</descr>
<errors>
</errors>
<seealso>
<link id="CloseDevice"/>
<link id="DoIO"/>
<link id="SendIO"/>
<link id="CheckIO"/>
<link id="AbortIO"/>
<link id="WaitIO"/>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="OpenDevice.Result">
<short>Returns a sign-extended copy of the <var>io_Error</var> field
    of the IORequest.  Zero if successful, else an error code
    is returned.</short>
</element>

<!-- argument Visibility: default -->
<element name="OpenDevice.devName">
<short>Requested device name</short>
</element>

<!-- argument Visibility: default -->
<element name="OpenDevice.unite">
<short>The unit number to open on that device.  The format of
    the unit number is device specific.  If the device does
    not have separate units, send a zero.
</short>
</element>

<!-- argument Visibility: default -->
<element name="OpenDevice.ioRequest">
<short>The I/O request block to be returned with
    appropriate fields initialized.</short>
</element>

<!-- argument Visibility: default -->
<element name="OpenDevice.flags">
<short>An additional driver specific information.  This is sometimes
    used to request opening a device with exclusive access.</short>
</element>

<!-- function Visibility: default -->
<element name="OpenLibrary">
<short>Open a library to use</short>
<descr><p>
  This function returns a pointer to a library that was previously
  installed into the system.  If the requested library is exists, and
  if the library version is greater than or equal to the requested
  version, then the open will succeed.</p>
<p>
  The library may exist in memory, or on disk; this is transparent to
  the OpenLibrary caller.  Only Processes are allowed to call
  OpenLibrary (since OpenLibrary may in turn call dos.library).</p>
<p>
  A full path name for the library name is legitimate.  For example
  "wp:libs/wp.library".  This allows the use of custom libraries
  without requiring the user to copy the library into the system's
  LIBS: directory.</p>
</descr>
<errors>
</errors>
<seealso>
<link id="CloseLibrary"/>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="OpenLibrary.Result">
<short>A library pointer for a successful open, else <var>nil</var>
</short>
</element>

<!-- argument Visibility: default -->
<element name="OpenLibrary.libName">
<short>The name of the library to open</short>
</element>

<!-- argument Visibility: default -->
<element name="OpenLibrary.version">
<short>The version of the library required, 0 if no special version required.</short>
</element>

<!-- function Visibility: default -->
<element name="OpenResource">
<short>Open an resource for use</short>
<descr><p>
This function returns a pointer to a resource that was previously
  installed into the system.</p>
<p>
  There is no <var>CloseResource()</var> function.</p>
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="OpenResource.Result">
<short>A resource pointer if successful, else <var>nil</var></short>
</element>

<!-- argument Visibility: default -->
<element name="OpenResource.resName">
<short>The name of the resource requested.</short>
</element>

<!-- procedure Visibility: default -->
<element name="Permit">
<short>Permit task rescheduling.
</short>
<descr>Allow other tasks to be scheduled to run by the dispatcher, after a
  matching <link id="Forbid">Forbid()</link> has been executed. Other tasks
  will be rescheduled as they are ready to run. In order
  to restore normal task rescheduling, the programmer must execute
  exactly one call to <var>Permit()</var> for every call to <link id="forbid">Forbid()</link>.
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>

<!-- function Visibility: default -->
<element name="Procure">
<short>Asynchron locking of a semaphore</short>
<descr>This function is used to obtain a semaphore in an async manner.
  Like <link id="ObtainSemaphore">ObtainSemaphore()</link>, it will obtain a SignalSemaphore for you
  but unlike <link id="ObtainSemaphore">ObtainSemaphore()</link>, you will not block until you get
  the semaphore.  <var>Procure()</var> will just post a request for the semaphore
  and will return.  When the semaphore is available (which could
  be at any time) the bidMessage will <link id="ReplyMsg">ReplyMsg()</link> and you will own
  the semaphore.  This lets you wait on multiple semaphores at once
  and to continue processing while waiting for the semaphore.
</descr>
<errors>
</errors>
<seealso>
<link id="ObtainSemaphoreList"/>
<link id="InitSemaphore"/>
<link id="ReleaseSemaphore"/>
<link id="AttemptSemaphore"/>
<link id="ObtainSemaphore"/>
<link id="ObtainSemaphoreShared"/>
<link id="Vacate"/>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="Procure.Result">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="Procure.sigSem">
<short>The SignalSemaphore that you wish to lock</short>
</element>

<!-- argument Visibility: default -->
<element name="Procure.bidMsg">
<short>The SemaphoreMessage that you wish replied when
    you obtain access to the semaphore.  The message's
    <var>ssm_Semaphore</var> field will point at the semaphore that
    was obtained.  If the <var>ssm_Semaphore</var> field is <var>nil</var>,
    the <var>Procure()</var> was aborted via <link id="Vacate">Vacate()</link>.
    The <var>mn_ReplyPort</var> field of the message must point to
    a valid message port.
    To obtain a shared semaphore, the <var>ln_Name</var> field
    must be set to 1.  For an exclusive lock, the <var>ln_Name</var>
    field must be 0.  No other values are valid.</short>
</element>

<!-- procedure Visibility: default -->
<element name="PutMsg">
<short>Put a message to a message port</short>
<descr><p>
  This function attaches a message to the end of a given message port.
  It provides a fast, non-copying message sending mechanism.</p>
<p>
  Messages can be attached to only one port at a time.  The message
  body can be of any size or form.  Because messages are not copied,
  cooperating tasks share the same message memory.  The sender task
  must not recycle the message until it has been replied by the
  receiver.  Of course this depends on the message handling conventions
  setup by the involved tasks.  If the ReplyPort field is non-zero,
  when the message is replied by the receiver, it will be sent back to
  that port.</p>
</descr>
<errors>
</errors>
<seealso>
<link id="GetMsg"/>
<link id="ReplyMsg"/>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="PutMsg.port">
<short>A pointer to a message port</short>
</element>

<!-- argument Visibility: default -->
<element name="PutMsg.message">
<short>A pointer to a message
</short>
</element>

<!-- function Visibility: default -->
<element name="RawDoFmt">
<short>Format data into a character stream.</short>
<descr><p>
  perform "C"-language-like formatting of a data stream, outputting
  the result a character at a time.  Where % formatting commands are
  found in the FormatString, they will be replaced with the
  corresponding element in the DataStream.  %% must be used in the
  string if a % is desired in the output.</p>
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="RawDoFmt.Result">
<short>A pointer to the rest of the DataStream.</short>
</element>

<!-- argument Visibility: default -->
<element name="RawDoFmt.formatString">
<short>
  %[flags][width.limit][length]type
</short>
</element>

<!-- argument Visibility: default -->
<element name="RawDoFmt.dataStream">
<short>A pointer to a zone of memory containing the data. Data has to be WORD aligned.
</short>
</element>

<!-- argument Visibility: default -->
<element name="RawDoFmt.putChProc">
<short>Callback function. Called for each character, including
the NULL terminator. or one of the values RAWFMTFUNC_*</short>
</element>

<!-- argument Visibility: default -->
<element name="RawDoFmt.putChData">
<short>Data propagated to each call of the callback hook.</short>
</element>

<!-- procedure Visibility: default -->
<element name="ReleaseSemaphore">
<short>Make signal semaphore available to others</short>
<descr><p>
  <var>ReleaseSemaphore()</var> is the inverse of <link id="ObtainSemaphore">ObtainSemaphore()</link>. It makes
  the semaphore lockable to other users.  If tasks are waiting for
  the semaphore and this this task is done with the semaphore then
  the next waiting task is signalled.</p>
<p>
  Each <link id="ObtainSemaphore">ObtainSemaphore()</link> call must be balanced by exactly one
  <var>ReleaseSemaphore()</var> call.  This is because there is a nesting count
  maintained in the semaphore of the number of times that the current
  task has locked the semaphore. The semaphore is not released to
  other tasks until the number of releases matches the number of
  obtains.</p>
<p>
  Signal semaphores locked via <link id="ObtainSemaphoreShared"/> are also released with this function.</p>
<p>
  Semaphores must released the same amount as is obtained.</p>
</descr>
<errors>
</errors>
<seealso>
<link id="InitSemaphore"/>
<link id="ObtainSemaphore"/>
<link id="ObtainSemaphoreShared"/>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="ReleaseSemaphore.sigSem">
<short>An initialized signal semaphore structure which was obtained before
</short>
</element>

<!-- procedure Visibility: default -->
<element name="ReleaseSemaphoreList">
<short>Make a list of semaphores available</short>
<descr><var>ReleaseSemaphoreList()</var> is the inverse of <link id="ObtainSemaphoreList">ObtainSemaphoreList()</link>. It  releases each element in the semaphore list.
</descr>
<errors>
</errors>
<seealso>
<link id="ObtainSemaphoreList"/>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="ReleaseSemaphoreList.sigSem">
<short>A list of signal semaphores</short>
</element>

<!-- procedure Visibility: default -->
<element name="RemDevice">
<short>Remove a device from the system
</short>
<descr><p>This function calls the device's EXPUNGE vector, which requests
  that a device delete itself.  The device may refuse to do this if
  it is busy or currently open. This is not typically called by user
  code.</p>
<p>
  There are certain, limited circumstances where it may be
  appropriate to attempt to specifically flush a certain device.</p>
</descr>
<errors>
</errors>
<seealso>
<link id="AddDevice"/>
<link id="OpenDevice"/>
<link id="CloseDevice"/>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="RemDevice.device">
<short>A pointer to a device node</short>
</element>

<!-- function Visibility: default -->
<element name="RemHead">
<short>Remove the head node from a list</short>
<descr>Get a pointer to the head node and remove it from the list.
</descr>
<errors>
</errors>
<seealso>
<link id="AddTail"/>
<link id="AddHead"/>
<link id="Enqueue"/>
<link id="Exec.ExecInsert"/>
<link id="Remove"/>
<link id="RemTail"/>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="RemHead.Result">
<short>The node removed or <var>nil</var> when empty list</short>
</element>

<!-- argument Visibility: default -->
<element name="RemHead.list">
<short>A pointer to the list</short>
</element>

<!-- procedure Visibility: default -->
<element name="RemIntServer">
<short>Remove an interrupt server from a server chain</short>
<descr><p>>This function removes an interrupt server node from the given
  server chain.</p>
<p>
  If this server was the last one on this chain, interrupts for this
  chain are disabled.</p>
</descr>
<errors>
</errors>
<seealso>
<link id="AddIntServer"/>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="RemIntServer.intNumber">
<short>The interrupt bit [0..14]</short>
</element>

<!-- argument Visibility: default -->
<element name="RemIntServer.interrupt_">
<short>A pointer to an interrupt server node
</short>
</element>

<!-- procedure Visibility: default -->
<element name="RemLibrary">
<short>Remove a library from the system
</short>
<descr><p>
  This function calls the library's EXPUNGE vector, which requests
  that a library delete itself.  The library may refuse to do this if
  it is busy or currently open. This is not typically called by user
  code.</p>
<p>
  There are certain, limited circumstances where it may be
  appropriate to attempt to specifically flush a certain Library.</p>
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="RemLibrary.lib">
<short>A pointer to a library node structure</short>
</element>

<!-- procedure Visibility: default -->
<element name="RemMemHandler">
<short>Remove low memory handler from exec</short>
<descr>This function removes the low memory handler from the system.
  This function can be called from within a handler.  If removing
  oneself, it is important that the handler returns <var>MEM_ALL_DONE</var>.
</descr>
<errors>
</errors>
<seealso>
<link id="AddMemHandler"/>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="RemMemHandler.memhand">
<short>Pointer to a handler added with <link id="AddMemHandler">AddMemHandler()</link>
</short>
</element>

<!-- procedure Visibility: default -->
<element name="Remove">
<short>Remove a node from a list
</short>
<descr>Unlink a node from whatever list it is in.  Nodes that are not part
  of a list must not be passed to this function!
</descr>
<errors>
</errors>
<seealso>
<link id="AddTail"/>
<link id="AddHead"/>
<link id="Enqueue"/>
<link id="Exec.ExecInsert"/>
<link id="RemHead"/>
<link id="RemTail"/>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="Remove.node">
<short>A node to remove</short>
</element>

<!-- procedure Visibility: default -->
<element name="RemPort">
<short>Remove a message port from the system
</short>
<descr>This function removes a message port structure from the system's
  message port list.  Subsequent attempts to rendezvous by name with
  this port will fail.
</descr>
<errors>
</errors>
<seealso>
<link id="AddPort"/>
<link id="FindPort"/>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="RemPort.port">
<short>A pointer to a message port</short>
</element>

<!-- procedure Visibility: default -->
<element name="RemResource">
<short>Remove a resource from the system</short>
<descr>This function removes an existing resource from the system resource
  list.  There must be no outstanding users of the resource.
</descr>
<errors>
</errors>
<seealso>
<link id="AddResource"/>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="RemResource.resource">
<short>A pointer to a resource node
</short>
</element>

<!-- procedure Visibility: default -->
<element name="RemSemaphore">
<short>Remove a signal semaphore from the system
</short>
<descr>This function removes a signal semaphore structure from the
  system's signal semaphore list.  Subsequent attempts to
  rendezvous by name with this semaphore will fail.

</descr>
<errors>
</errors>
<seealso>
<link id="AddSemaphore"/>
<link id="FindSemaphore"/>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="RemSemaphore.sigSem">
<short>An initialized signal semaphore structure</short>
</element>

<!-- function Visibility: default -->
<element name="RemTail">
<short>Remove the tail node from a list
</short>
<descr>Remove the last node from a list, and return a pointer to it. If
  the list is empty, return <var>nil</var>.
</descr>
<errors>
</errors>
<seealso>
<link id="exec.AddTail">AddTail</link>
<link id="exec.AddHead">AddHead</link>
<link id="exec.Enqueue">Enqueue</link>
<link id="exec.ExecInsert">ExecInsert</link>
<link id="Exec.RemHead">RemHead</link>
<link id="exec.Remove">Remove</link>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="RemTail.Result">
<short>The node removed or <var>nil</var> when empty list
</short>
</element>

<!-- argument Visibility: default -->
<element name="RemTail.list">
<short>A pointer to a list</short>
</element>

<!-- procedure Visibility: default -->
<element name="RemTask">
<short>Remove a task from the system
</short><p>
  This function removes a task from the system.  Deallocation of
  resources should have been performed prior to calling this
  function.  Removing some other task is very dangerous.  Generally
  is is best to arrange for tasks to call <var>RemTask(nil)</var> on themselves.</p>
<p>
  RemTask will automagically free any memory lists attached to the
  task's <var>TC_MEMENTRY</var> list.</p>
<descr>
</descr>
<errors>
</errors>
<seealso>
<link id="AddTask"/>
<link id="AllocEntry"/>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="RemTask.task">
<short>A pointer to the task node representing the task to be
         removed.  A zero value indicates self removal, and will
         cause the next ready task to begin execution.</short>
</element>

<!-- procedure Visibility: default -->
<element name="ReplyMsg">
<short>Put a message to its reply port</short>
<descr><p>This function sends a message to its reply port.  This is usually
  done when the receiver of a message has finished and wants to
  return it to the sender (so that it can be re-used or deallocated,
  whatever). The contents of the message should be copied before if it is needed for further processing.</p>
<p>
  This call may be made from interrupts.</p>
</descr>
<errors>
</errors>
<seealso>
<link id="GetMsg"/>
<link id="PutMsg"/>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="ReplyMsg.message">
<short>A pointer to the message
</short>
</element>

<!-- procedure Visibility: default -->
<element name="SendIO">
<short>Initiate an I/O command</short>
<descr><p>This function requests the device driver start processing the given
  I/O request.  The device will return control without waiting for
  the I/O to complete.</p>
<p>
  The <var>io_Flags</var> field of the IORequest will be set to zero before the
  request is sent.</p>
</descr>
<errors>
</errors>
<seealso>
<link id="DoIO"/>
<link id="CheckIO"/>
<link id="WaitIO"/>
<link id="AbortIO"/>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="SendIO.ioRequest">
<short>A pointer to an I/O request, or a device specific
        extended IORequest.</short>
</element>

<!-- function Visibility: default -->
<element name="SetExcept">
<short>Define certain signals to cause exceptions</short>
<descr>This function defines which of the task's signals will cause a
  private task exception.  When any of the signals occurs the task's
  exception handler will be dispatched.  If the signal occurred prior
  to calling SetExcept, the exception will happen immediately.
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="SetExcept.Result">
<short>The prior exception signals</short>
</element>

<!-- argument Visibility: default -->
<element name="SetExcept.newSignals">
<short>Set of signals causing the exception.</short>
</element>

<!-- argument Visibility: default -->
<element name="SetExcept.signalSet">
<short>the set of signals to be effected
</short>
</element>

<!-- function Visibility: default -->
<element name="SetFunction">
<short>Change a function vector in a library</short>
<descr><p>SetFunction is a functional way of changing where vectors in a
  library point.  They are changed in such a way that the
  checksumming process will never falsely declare a library to be
  invalid.</p>
<p><b>Warning</b></p>
<p>
While it's more or less safe to patch a library vector with
SetFunction() it's not possible to safely remove the patch later.
So don't use this function if it can be avoided.</p>
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="SetFunction.Result">
<short>Pointer to the old function that was just replaced
</short>
</element>

<!-- argument Visibility: default -->
<element name="SetFunction.lib">
<short>A pointer to the library to be changed</short>
</element>

<!-- argument Visibility: default -->
<element name="SetFunction.funcOffset">
<short>The offset of the function to be replaced</short>
</element>

<!-- argument Visibility: default -->
<element name="SetFunction.newFunction">
<short>A Pointer to new function</short>
</element>

<!-- function Visibility: default -->
<element name="SetIntVector">
<short>Set a new handler for a system interrupt vector</short>
<descr><p>
  This function provides a mechanism for setting the system interrupt
  vectors.  These are non-sharable; setting a new interrupt handler
  disconnects the old one.  Installed handlers are responsible for
  processing, enabling and clearing the interrupt.  Note that interrupts
  may have been left in any state by the previous code.</p>
<p>
  The <var>IS_CODE</var> and <var>IS_DATA</var> pointers of the Interrupt structure will
  be copied into a private place by Exec.  A pointer to the previously
  installed Interrupt structure is returned.</p>
</descr>
<errors>
</errors>
<seealso>
<link id="AddIntServer"/>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="SetIntVector.Result">
<short>A pointer to the prior interrupt structure which had control
  of this interrupt.</short>
</element>

<!-- argument Visibility: default -->
<element name="SetIntVector.intNumber">
<short>Interrupt bit number [0..14].  Only non-chained
     interrupts should be set.  Use <link id="AddIntServer">AddIntServer()</link> for server
     chains.</short>
</element>

<!-- argument Visibility: default -->
<element name="SetIntVector.interrupt_">
<short>A pointer to an Interrupt structure containing the
     handler's entry point and data segment pointer.  A NULL
     interrupt pointer will remove the current interrupt and
     set illegal values for <var>IS_CODE</var> and <var>IS_DATA</var>.

     By convention, the <var>LN_NAME</var> of the interrupt structure must
     point a descriptive string so that other users may
     identify who currently has control of the interrupt.
</short>
</element>

<!-- function Visibility: default -->
<element name="SetSignal">
<short>Define the state of this task's signals
</short>
<descr><p>This function can query or modify the state of the current task's
  received signal mask.  Setting the state of signals is considered
  dangerous.  Reading the state of signals is safe.</p>
  <code>
//Get the current state of all signals
Sig := SetSignal(0, 0);
//Clear the CTRL-C signal:
Sig := SetSignal(0, SIGBREAKF_CTRL_C);
// Check and Clear Ctrl C Signal
if (SetSignal(0, SIGBREAKF_CTRL_C) and SIGBREAKF_CTRL_C) &lt;&gt; 0 then
begin
  writeln('CTRL-C pressed!');
end;
  </code>
</descr>
<errors>
</errors>
<seealso>
<link id="Signal"/>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="SetSignal.Result">
<short>The prior values for all signals
</short>
</element>

<!-- argument Visibility: default -->
<element name="SetSignal.newSignals">
<short>The new values for the signals specified in
         signalSet.</short>
</element>

<!-- argument Visibility: default -->
<element name="SetSignal.signalSet">
<short>The set of signals to be affected.
</short>
</element>

<!-- function Visibility: default -->
<element name="SetSR">
<short>Get and/or set processor status register</short>
<descr><p>This function provides a means of modifying the CPU status register
  in a "safe" way (well, how safe can a function like this be
  anyway?).  This function will only affect the status register bits
  specified in the mask parameter.  The prior content of the entire
  status register is returned.</p>
<p>
  The bits in the register mapped to those of the Motorola MC680x0
family of microprocessors.</p>
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="SetSR.Result">
<short>The old contents of the status register or 0 if this function
is not implemented.</short>
</element>

<!-- argument Visibility: default -->
<element name="SetSR.newSR">
<short>The new contents of the status register.</short>
</element>

<!-- argument Visibility: default -->
<element name="SetSR.mask">
<short>Mask of bits to change.
</short>
</element>

<!-- function Visibility: default -->
<element name="SetTaskPri">
<short>Get and set the priority of a task
</short>
<descr><p>
This function changes the priority of a task regardless of its
  state.  The old priority of the task is returned.  A reschedule is
  performed, and a context switch may result.</p>
<p>
  To change the priority of the currently running task, pass the
  result of <var>FindTask(nil);</var> as the task pointer.</p>
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="SetTaskPri.Result">
<short>The tasks previous priority</short>
</element>

<!-- argument Visibility: default -->
<element name="SetTaskPri.task">
<short>Task to be affected</short>
</element>

<!-- argument Visibility: default -->
<element name="SetTaskPri.priority">
<short>The new priority for the task (-127 to 5).
</short>
</element>

<!-- procedure Visibility: default -->
<element name="Signal">
<short>Signal a task</short>
<descr><p>
  This function signals a task with the given signals.  If the task
  is currently waiting for one or more of these signals, it will be
  made ready and a reschedule will occur. If the task is not waiting
  for any of these signals, the signals will be posted to the task
  for possible later use. A signal may be sent to a task regardless
  of whether it is running, ready, or waiting.</p>
<p>
  This function is considered "low level".  Its main purpose is to
  support multiple higher level functions like <link id="PutMsg">PutMsg()</link>.</p>
<p>
  This function is safe to call from interrupts.</p>
</descr>
<errors>
</errors>
<seealso>
<link id="Wait"/>
<link id="SetSignal"/>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="Signal.task">
<short>The task to be signalled</short>
</element>

<!-- argument Visibility: default -->
<element name="Signal.signalSet">
<short>The signals to be sent</short>
</element>

<!-- procedure Visibility: default -->
<element name="StackSwap">
<short></short>
<descr>
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="StackSwap.newStack">
<short></short>
</element>

<!-- procedure Visibility: default -->
<element name="SumKickData">
<short></short>
<descr>
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>

<!-- procedure Visibility: default -->
<element name="SumLibrary">
<short>Compute and check the checksum on a library</short>
<descr><p>
  SumLibrary computes a new checksum on a library.  It can also be
  used to check an old checksum.  If an old checksum does not match,
  and the library has not been marked as changed, then the system
  will call <link id="Alert"/>.</p>
<p>
  This call could also be periodically made by some future
  system-checking task.</p>
</descr>
<errors>
</errors>
<seealso>
<link id="SetFunction"/>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="SumLibrary.lib">
<short>A pointer to the library to be changed</short>
</element>

<!-- function Visibility: default -->
<element name="SuperState">
<short>Enter supervisor state with user stack</short>
<descr>Enter supervisor mode while running on the user's stack. The user
  still has access to user stack variables.  Be careful though, the
  user stack must be large enough to accommodate space for all
  interrupt data -- this includes all possible nesting of interrupts.
  This function does nothing when called from supervisor state.
This is not a good function to use, it has limited scope, and will
probably be even less useful in the future.

</descr>
<errors>
You can easily cause your system to cease operating normally.
</errors>
<seealso>
<link id="Supervisor"/>
<link id="UserState"/>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="SuperState.Result">
<short></short>
</element>

<!-- function Visibility: default -->
<element name="Supervisor">
<short>Trap to a short supervisor mode function</short>
<descr>Allow a normal user-mode program to execute a short assembly language
  function in the supervisor mode of the processor.  <var>Supervisor()</var> does
  not modify or save registers; the user function has full access to the
  register set.   All rules that apply to interrupt code must be
  followed.  In addition, no system calls are permitted.
</descr>
<errors>You can very easily make the system unusable with this function.
In fact it is recommended that you do not use it at all.
</errors>
<seealso>
<link id="SuperState"/>
<link id="UserState"/>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="Supervisor.Result">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="Supervisor.userFunction">
<short>The address of the code you want called in supervisor mode.</short>
</element>

<!-- function Visibility: default -->
<element name="TypeOfMem">
<short>Determine attributes of a given memory address</short>
<descr><p>
  Given a RAM memory address, search the system memory lists and
  return its memory attributes.  The memory attributes are similar to
  those specified when the memory was first allocated: (eg. MEMF_*)</p>
<p>
  If the address is not in known-space, a zero will be returned.
  (Anything that is not RAM, like the ROM or expansion area, will
  return zero.  Also the first few bytes of a memory area are used up
  by the MemHeader.)</p>
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="TypeOfMem.Result">
<short>A long word of memory attribute flags.
  If the address is not in known RAM, zero is returned.</short>
</element>

<!-- argument Visibility: default -->
<element name="TypeOfMem.address">
<short>A memory address
</short>
</element>

<!-- procedure Visibility: default -->
<element name="UserState">
<short>Return to user state with user stack</short>
<descr><p>Return to user state with user stack, from supervisor state with
  user stack.  This function is normally used in conjunction with the
  <link id="SuperState">SuperState</link> function.</p>
<p>
  This function must not be called from the user state.
</p>
</descr>
<errors>
</errors>
<seealso>
<link id="SuperState"/>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="UserState.sysStack">
<short>Supervisor stack pointer
</short>
</element>

<!-- procedure Visibility: default -->
<element name="Vacate">
<short>Release a bidMessage from Procure() </short>
<descr>This function can be used to release a semaphore obtained via
  <link id="Procure">Procure()</link>.  However, the main purpose for this call is to be
  able to remove a bid for a semaphore that has not yet responded.
  This is required when a <link id="Procure">Procure()</link> was issued and the program
  no longer needs to get the semaphore and wishes to cancel the
  <link id="Procure">Procure()</link> request.  The canceled request will be replied with
  the ssm_Semaphore field set to <var>nil</var>.  If you own the semaphore,
  the message was already replied and only the <var>ssm_Semaphore</var> field
  will be cleared.
</descr>
<errors>
</errors>
<seealso>
<link id="ObtainSemaphoreList"/>
<link id="InitSemaphore"/>
<link id="ReleaseSemaphore"/>
<link id="AttemptSemaphore"/>
<link id="ObtainSemaphore"/>
<link id="ObtainSemaphoreShared"/>
<link id="Procure"/>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="Vacate.sigSem">
<short>The SignalSemaphore that you wish to Vacate()</short>
</element>

<!-- argument Visibility: default -->
<element name="Vacate.bidMsg">
<short>The SemaphoreMessage that you wish to abort.
    The message's <var>ssm_Semaphore</var> field will be cleared.
    The message will be replied if it is still on the waiting
    list.  If it is not on the waiting list, it is assumed
    that the semaphore is owned and it will be released.</short>
</element>

<!-- function Visibility: default -->
<element name="Wait">
<short>Wait for one or more signals</short>
<descr><p>
  This function will cause the current task to suspend waiting for
  one or more signals.  When one or more of the specified signals
  occurs, the task will return to the ready state, and those signals
  will be cleared.</p>
<p>
  If a signal occurred prior to calling <var>Wait()</var>, the wait condition will
  be immediately satisfied, and the task will continue to run without
  delay.</p>
<p><b>Warning:</b></p>
<p>This function cannot be called while in supervisor mode or
  interrupts!  This function will break the action of a <link id="Forbid">Forbid()</link> or
  <link id="Disable">Disable()</link> call. </p>
</descr>
<errors>
</errors>
<seealso>

</seealso>
</element>

<!-- function result Visibility: default -->
<element name="Wait.Result">
<short>The set of signals that were active</short>
</element>

<!-- argument Visibility: default -->
<element name="Wait.signalSet">
<short>The set of signals for which to wait.
        Each bit represents a particular signal.</short>
</element>

<!-- function Visibility: default -->
<element name="WaitIO">
<short>Wait for completion of an I/O request
</short>
<descr><p>
  This function waits for the specified I/O request to complete, then
  removes it from the replyport.  If the I/O has already completed,
  this function will return immediately.</p>
<p>
  This function should be used with care, as it does not return until
  the I/O request completes; if the I/O never completes, this
  function will never return, and your task will hang.  If this
  situation is a possibility, it is safer to use the <link id="Wait">Wait()</link> function.
  <link id="Wait">Wait()</link> will return return when any of a specified set of signal is
  received.  This is how I/O timeouts can be properly handled.</p>
</descr>
<errors>
</errors>
<seealso>
<link id="DoIO"/>
<link id="SendIO"/>
<link id="CheckIO"/>
<link id="AbortIO"/>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="WaitIO.Result">
<short>A zero if successful, else an error is returned
    (a sign extended copy of io_Error).</short>
</element>

<!-- argument Visibility: default -->
<element name="WaitIO.ioRequest">
<short>A pointer to an I/O request block</short>
</element>

<!-- function Visibility: default -->
<element name="WaitPort">
<short>Wait for a given port to be non-empty</short>
<descr><p>
  This function waits for the given port to become non-empty.  If
  necessary, the <link id="Wait">Wait()</link> function will be called to wait for the port
  signal.  If a message is already present at the port, this function
  will return immediately.  The return value is always a pointer to
  the first message queued (but it is not removed from the queue).</p>
<p>
  More than one message may be at the port when this returns.  It is
  proper to call the <link id="GetMsg">GetMsg()</link> function in a loop until all messages
  have been handled, then wait for more to arrive.</p>
<p>
  To wait for more than one port, combine the signal bits from each
  port into one call to the <link id="Wait">Wait()</link> function, then use a <link id="GetMsg">GetMsg()</link> loop
  to collect any and all messages.  It is possible to get a signal
  for a port WITHOUT a message showing up.  Plan for this.</p>
</descr>
<errors>
</errors>
<seealso>
  <link id="GetMsg"/>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="WaitPort.Result">
<short>A pointer to the first available message</short>
</element>

<!-- argument Visibility: default -->
<element name="WaitPort.port">
<short>A pointer to the message port</short>
</element>

<!-- variable Visibility: default -->
<element name="TResident.rt_Revision">
<short></short>
</element>

<!-- variable Visibility: default -->
<element name="TResident.rt_Tags">
<short></short>
</element>

<!-- variable Visibility: default -->
<element name="TMemEntry.me_Un.meu_Reqs">
<short></short>
</element>

<!-- variable Visibility: default -->
<element name="TMemEntry.me_Un.meu_Addr">
<short></short>
</element>

<!-- variable Visibility: default -->
<element name="TTask.tc_ETask">
<short></short>
</element>

<!-- variable Visibility: default -->
<element name="TAVLNode.avl_link">
<short></short>
</element>

<!-- variable Visibility: default -->
<element name="TAVLNode.avl_parent">
<short></short>
</element>

<!-- variable Visibility: default -->
<element name="TAVLNode.avl_balance">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="Reschedule.Task">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="AddTask.InitialPC">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="AddLibrary.Library_">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="RemLibrary.Library_">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="CloseLibrary.Library_">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="SetFunction.Library_">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="SumLibrary.Library_">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="OpenDevice.UnitNumber">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="CreateIORequest.IOReplyPort">
<short></short>
</element>

<!-- function result Visibility: default -->
<element name="ChildOrphan.Result">
<short></short>
</element>

<!-- function result Visibility: default -->
<element name="ChildStatus.Result">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="AddMemHandler.MemHandler">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="RemMemHandler.MemHandler">
<short></short>
</element>

<!-- function Visibility: default -->
<element name="CreateExtIO">
<short></short>
<descr>
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="CreateExtIO.Result">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="CreateExtIO.Mp">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="CreateExtIO.Size">
<short></short>
</element>

<!-- procedure Visibility: default -->
<element name="DeleteExtIO">
<short></short>
<descr>
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="DeleteExtIO.ioReq">
<short></short>
</element>


<!-- variable Visibility: default -->
<element name="ExecBase">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- alias type Visibility: default -->
<element name="WSTRPTR">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- alias type Visibility: default -->
<element name="IPTR">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- alias type Visibility: default -->
<element name="SIPTR">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="TRAP_MASK">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="TRAP_AREA_START">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="TRAP_LIB">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="TRAP_LIB_QUICK">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="TRAP_LIBNR">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="TRAP_LIBNR_QUICK">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="TRAP_ISYNC">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="TRAP_SYNC">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="TRAP_EIEIO">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="TRAP_LIBSR">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="TRAP_LIBSRNR">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="TRAP_LIBD0_D1">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="TRAP_LIBRESTORE">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="TRAP_LIBD0D1SR">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="TRAP_LIBD0D1A0A1SR">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="EMULTAG_NAME">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="EMULTAG_VERSION">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="EMULTAG_REVISION">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="EMULTAG_OPCODETABLE">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="EMULTAG_TYPE">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="EMULTAG_EMULHANDLE">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="EMULTAG_EMULHANDLESIZE">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="EMULTAG_SUPERHANDLE">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="EMULTAG_SUPERHANDLESIZE">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- pointer type Visibility: default -->
<element name="PEmulLibEntry">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- record type Visibility: default -->
<element name="TEmulLibEntry">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TEmulLibEntry.Trap">
<short></short>
</element>

<!-- variable Visibility: default -->
<element name="TEmulLibEntry.Extension">
<short></short>
</element>

<!-- variable Visibility: default -->
<element name="TEmulLibEntry.Func">
<short></short>
</element>

<!-- enumeration type Visibility: default -->
<element name="TEmulRegs">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- enumeration value Visibility: default -->
<element name="TEmulRegs.regD0">
<short></short>
</element>

<!-- enumeration value Visibility: default -->
<element name="TEmulRegs.regD1">
<short></short>
</element>

<!-- enumeration value Visibility: default -->
<element name="TEmulRegs.regD2">
<short></short>
</element>

<!-- enumeration value Visibility: default -->
<element name="TEmulRegs.regD3">
<short></short>
</element>

<!-- enumeration value Visibility: default -->
<element name="TEmulRegs.regD4">
<short></short>
</element>

<!-- enumeration value Visibility: default -->
<element name="TEmulRegs.regD5">
<short></short>
</element>

<!-- enumeration value Visibility: default -->
<element name="TEmulRegs.regD6">
<short></short>
</element>

<!-- enumeration value Visibility: default -->
<element name="TEmulRegs.regD7">
<short></short>
</element>

<!-- enumeration value Visibility: default -->
<element name="TEmulRegs.regA0">
<short></short>
</element>

<!-- enumeration value Visibility: default -->
<element name="TEmulRegs.regA1">
<short></short>
</element>

<!-- enumeration value Visibility: default -->
<element name="TEmulRegs.regA2">
<short></short>
</element>

<!-- enumeration value Visibility: default -->
<element name="TEmulRegs.regA3">
<short></short>
</element>

<!-- enumeration value Visibility: default -->
<element name="TEmulRegs.regA4">
<short></short>
</element>

<!-- enumeration value Visibility: default -->
<element name="TEmulRegs.regA5">
<short></short>
</element>

<!-- enumeration value Visibility: default -->
<element name="TEmulRegs.regA6">
<short></short>
</element>

<!-- enumeration value Visibility: default -->
<element name="TEmulRegs.regA7">
<short></short>
</element>

<!-- enumeration value Visibility: default -->
<element name="TEmulRegs.regPC">
<short></short>
</element>

<!-- enumeration value Visibility: default -->
<element name="TEmulRegs.regSR">
<short></short>
</element>

<!-- pointer type Visibility: default -->
<element name="PEmulHandle">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- record type Visibility: default -->
<element name="TEmulHandle">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TEmulHandle.reg">
<short></short>
</element>

<!-- variable Visibility: default -->
<element name="TEmulHandle.SuperHandle">
<short></short>
</element>

<!-- variable Visibility: default -->
<element name="TEmulHandle._Type">
<short></short>
</element>

<!-- variable Visibility: default -->
<element name="TEmulHandle.Flags">
<short></short>
</element>

<!-- variable Visibility: default -->
<element name="TEmulHandle.EmulFunc">
<short></short>
</element>

<!-- variable Visibility: default -->
<element name="TEmulHandle.EmulCallOS">
<short></short>
</element>

<!-- function result Visibility: default -->
<element name="TEmulHandle.EmulCallOS.Result">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="TEmulHandle.EmulCallOS.EmulCaos">
<short></short>
</element>

<!-- variable Visibility: default -->
<element name="TEmulHandle.EmulCall68k">
<short></short>
</element>

<!-- function result Visibility: default -->
<element name="TEmulHandle.EmulCall68k.Result">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="TEmulHandle.EmulCall68k.EmulCaos">
<short></short>
</element>

<!-- variable Visibility: default -->
<element name="TEmulHandle.EmulCallQuick68k">
<short></short>
</element>

<!-- function result Visibility: default -->
<element name="TEmulHandle.EmulCallQuick68k.Result">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="TEmulHandle.EmulCallQuick68k.EmulCaos">
<short></short>
</element>

<!-- variable Visibility: default -->
<element name="TEmulHandle.EmulCallDirectOS">
<short></short>
</element>

<!-- function result Visibility: default -->
<element name="TEmulHandle.EmulCallDirectOS.Result">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="TEmulHandle.EmulCallDirectOS.arg">
<short></short>
</element>

<!-- variable Visibility: default -->
<element name="TEmulHandle.EmulCallDirect68k">
<short></short>
</element>

<!-- function result Visibility: default -->
<element name="TEmulHandle.EmulCallDirect68k.Result">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="TEmulHandle.EmulCallDirect68k.arg">
<short></short>
</element>

<!-- variable Visibility: default -->
<element name="TEmulHandle.OldEmulHandle">
<short></short>
</element>

<!-- function Visibility: default -->
<element name="GetEmulHandle">
<short></short>
<descr>
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="GetEmulHandle.Result">
<short></short>
</element>

<!-- function Visibility: default -->
<element name="REG_D0">
<short></short>
<descr>
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="REG_D0.Result">
<short></short>
</element>

<!-- function Visibility: default -->
<element name="REG_D1">
<short></short>
<descr>
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="REG_D1.Result">
<short></short>
</element>

<!-- function Visibility: default -->
<element name="REG_D2">
<short></short>
<descr>
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="REG_D2.Result">
<short></short>
</element>

<!-- function Visibility: default -->
<element name="REG_D3">
<short></short>
<descr>
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="REG_D3.Result">
<short></short>
</element>

<!-- function Visibility: default -->
<element name="REG_D4">
<short></short>
<descr>
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="REG_D4.Result">
<short></short>
</element>

<!-- function Visibility: default -->
<element name="REG_D5">
<short></short>
<descr>
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="REG_D5.Result">
<short></short>
</element>

<!-- function Visibility: default -->
<element name="REG_D6">
<short></short>
<descr>
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="REG_D6.Result">
<short></short>
</element>

<!-- function Visibility: default -->
<element name="REG_D7">
<short></short>
<descr>
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="REG_D7.Result">
<short></short>
</element>

<!-- function Visibility: default -->
<element name="REG_A0">
<short></short>
<descr>
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="REG_A0.Result">
<short></short>
</element>

<!-- function Visibility: default -->
<element name="REG_A1">
<short></short>
<descr>
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="REG_A1.Result">
<short></short>
</element>

<!-- function Visibility: default -->
<element name="REG_A2">
<short></short>
<descr>
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="REG_A2.Result">
<short></short>
</element>

<!-- function Visibility: default -->
<element name="REG_A3">
<short></short>
<descr>
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="REG_A3.Result">
<short></short>
</element>

<!-- function Visibility: default -->
<element name="REG_A4">
<short></short>
<descr>
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="REG_A4.Result">
<short></short>
</element>

<!-- function Visibility: default -->
<element name="REG_A5">
<short></short>
<descr>
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="REG_A5.Result">
<short></short>
</element>

<!-- function Visibility: default -->
<element name="REG_A6">
<short></short>
<descr>
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="REG_A6.Result">
<short></short>
</element>

<!-- function Visibility: default -->
<element name="REG_A7">
<short></short>
<descr>
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="REG_A7.Result">
<short></short>
</element>

<!-- function Visibility: default -->
<element name="REG_PC">
<short></short>
<descr>
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="REG_PC.Result">
<short></short>
</element>

<!-- function Visibility: default -->
<element name="REG_SR">
<short></short>
<descr>
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="REG_SR.Result">
<short></short>
</element>

<!-- alias type Visibility: default -->
<element name="PTagItem">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- alias type Visibility: default -->
<element name="PHook">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TList.lh_pad">
<short></short>
</element>

<!-- constant Visibility: default -->
<element name="IOERR_NOMEMORY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="RTF_EXTENDED">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="RTF_PPC">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="MEMF_SWAP">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="MEMF_31BIT">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="MEMF_SEM_PROTECTED">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- record type Visibility: default -->
<element name="TFreeBlocksData">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TFreeBlocksData.fbd_NumBlocks">
<short></short>
</element>

<!-- variable Visibility: default -->
<element name="TFreeBlocksData.fbd_Blocks">
<short></short>
</element>

<!-- pointer type Visibility: default -->
<element name="PFreeBlocksData">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- pointer type Visibility: default -->
<element name="PETask">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- pointer type Visibility: default -->
<element name="PTaskTrapMessage">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- record type Visibility: default -->
<element name="TETask">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TETask.Message">
<short></short>
</element>

<!-- variable Visibility: default -->
<element name="TETask.Parent">
<short></short>
</element>

<!-- variable Visibility: default -->
<element name="TETask.UniqueID">
<short></short>
</element>

<!-- variable Visibility: default -->
<element name="TETask.Children">
<short></short>
</element>

<!-- variable Visibility: default -->
<element name="TETask.TrapAlloc">
<short></short>
</element>

<!-- variable Visibility: default -->
<element name="TETask.TrapAble">
<short></short>
</element>

<!-- variable Visibility: default -->
<element name="TETask.Result1">
<short></short>
</element>

<!-- variable Visibility: default -->
<element name="TETask.Result2">
<short></short>
</element>

<!-- variable Visibility: default -->
<element name="TETask.MsgPort">
<short></short>
</element>

<!-- variable Visibility: default -->
<element name="TETask.MemPool">
<short></short>
</element>

<!-- variable Visibility: default -->
<element name="TETask.PPCSPLower">
<short></short>
</element>

<!-- variable Visibility: default -->
<element name="TETask.PPCSPUpper">
<short></short>
</element>

<!-- variable Visibility: default -->
<element name="TETask.PPCRegFrame">
<short></short>
</element>

<!-- variable Visibility: default -->
<element name="TETask.PPCLibData">
<short></short>
</element>

<!-- variable Visibility: default -->
<element name="TETask.PPCTrapMsgPort">
<short></short>
</element>

<!-- variable Visibility: default -->
<element name="TETask.PPCTrapMessage">
<short></short>
</element>

<!-- record type Visibility: default -->
<element name="TTaskTrapMessage">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TTaskTrapMessage.Message">
<short></short>
</element>

<!-- variable Visibility: default -->
<element name="TTaskTrapMessage.Task">
<short></short>
</element>

<!-- variable Visibility: default -->
<element name="TTaskTrapMessage.Version">
<short></short>
</element>

<!-- variable Visibility: default -->
<element name="TTaskTrapMessage.TType">
<short></short>
</element>

<!-- variable Visibility: default -->
<element name="TTaskTrapMessage.DAR">
<short></short>
</element>

<!-- variable Visibility: default -->
<element name="TTaskTrapMessage.DSISR">
<short></short>
</element>

<!-- pointer type Visibility: default -->
<element name="PTaskInitExtension">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- record type Visibility: default -->
<element name="TTaskInitExtension">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TTaskInitExtension.Trap">
<short></short>
</element>

<!-- variable Visibility: default -->
<element name="TTaskInitExtension.Extension">
<short></short>
</element>

<!-- variable Visibility: default -->
<element name="TTaskInitExtension.Tags">
<short></short>
</element>

<!-- constant Visibility: default -->
<element name="TAG_USER">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="TASKTAG_DUMMY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="TASKTAG_ERROR">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="TASKTAG_CODETYPE">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="TASKTAG_PC">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="TASKTAG_FINALPC">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="TASKTAG_STACKSIZE">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="TASKTAG_STACKSIZE_M68K">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="TASKTAG_NAME">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="TASKTAG_USERDATA">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="TASKTAG_PRI">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="TASKTAG_POOLPUDDLE">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="TASKTAG_POOLTHRESH">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="TASKTAG_PPC_ARG1">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="TASKTAG_PPC_ARG2">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="TASKTAG_PPC_ARG3">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="TASKTAG_PPC_ARG4">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="TASKTAG_PPC_ARG5">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="TASKTAG_PPC_ARG6">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="TASKTAG_PPC_ARG7">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="TASKTAG_PPC_ARG8">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="TASKTAG_STARTUPMSG">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="TASKTAG_TASKMSGPORT">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="TASKTAG_FLAGS">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="TASKTAG_TCBEXTRASIZE">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="CODETYPE_M68K">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="CODETYPE_PPC">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="TASKERROR_OK">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="TASKERROR_NOMEMORY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SIGB_NET">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SIGF_NET">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- pointer type Visibility: default -->
<element name="PTaskTrapMessage_68k">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- record type Visibility: default -->
<element name="TTaskTrapMessage_68k">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TTaskTrapMessage_68k.Message">
<short></short>
</element>

<!-- variable Visibility: default -->
<element name="TTaskTrapMessage_68k.Task">
<short></short>
</element>

<!-- variable Visibility: default -->
<element name="TTaskTrapMessage_68k.Version">
<short></short>
</element>

<!-- variable Visibility: default -->
<element name="TTaskTrapMessage_68k.TType">
<short></short>
</element>

<!-- variable Visibility: default -->
<element name="TTaskTrapMessage_68k.Format">
<short></short>
</element>

<!-- variable Visibility: default -->
<element name="TTaskTrapMessage_68k.Address">
<short></short>
</element>

<!-- variable Visibility: default -->
<element name="TTaskTrapMessage_68k.FLSW">
<short></short>
</element>

<!-- variable Visibility: default -->
<element name="TTaskTrapMessage_68k.MyEmulHandle">
<short></short>
</element>

<!-- constant Visibility: default -->
<element name="VERSION_TASKTRAPMESSAGE_68k">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="VERSION_TASKTRAPMESSAGE">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- pointer type Visibility: default -->
<element name="PPPCStackSwapArgs">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- record type Visibility: default -->
<element name="TPPCStackSwapArgs">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TPPCStackSwapArgs.Args">
<short></short>
</element>

<!-- constant Visibility: default -->
<element name="TASKINFOTYPE_ALLTASK">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="TASKINFOTYPE_NAME">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="TASKINFOTYPE_PRI">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="TASKINFOTYPE_TYPE">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="TASKINFOTYPE_STATE">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="TASKINFOTYPE_FLAGS">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="TASKINFOTYPE_SIGALLOC">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="TASKINFOTYPE_SIGWAIT">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="TASKINFOTYPE_SIGRECVD">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="TASKINFOTYPE_SIGEXCEPT">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="TASKINFOTYPE_EXCEPTDATA">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="TASKINFOTYPE_EXCEPTCODE">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="TASKINFOTYPE_TRAPDATA">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="TASKINFOTYPE_TRAPCODE">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="TASKINFOTYPE_STACKSIZE_M68K">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="TASKINFOTYPE_STACKSIZE">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="TASKINFOTYPE_USEDSTACKSIZE_M68K">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="TASKINFOTYPE_USEDSTACKSIZE">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="TASKINFOTYPE_TRAPMSGPORT">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="TASKINFOTYPE_STARTUPMSG">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="TASKINFOTYPE_TASKMSGPORT">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="TASKINFOTYPE_POOLPTR">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="TASKINFOTYPE_POOLMEMFLAGS">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="TASKINFOTYPE_POOLPUDDLESIZE">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="TASKINFOTYPE_POOLTHRESHSIZE">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="TASKINFOTYPE_NICE">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="TASKINFOTYPE_AGETICKS">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="TASKINFOTYPE_CPUTIME">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="TASKINFOTYPE_LASTSECCPUTIME">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="TASKINFOTYPE_RECENTCPUTIME">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="TASKINFOTYPE_VOLUNTARYCSW">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="TASKINFOTYPE_INVOLUNTARYCSW">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="TASKINFOTYPE_LASTSECVOLUNTARYCSW">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="TASKINFOTYPE_LASTSECINVOLUNTARYCSW">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="TASKINFOTYPE_LAUNCHTIMETICKS">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="TASKINFOTYPE_LAUNCHTIMETICKS1978">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="TASKINFOTYPE_PID_CLI">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="TASKINFOTYPE_SPLOWER">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="TASKINFOTYPE_SPUPPER">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="TASKINFOTYPE_SPLOWER_M68K">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="TASKINFOTYPE_SPUPPER_M68K">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="TASKINFOTYPE_NAMECOPY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="TASKINFOTYPE_USERDATA">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="TASKINFOTYPE_RESURRECT_TASK">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="TASKINFOTYPE_EMULHANDLE">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="TASKINFOTYPE_EXCEPTIONCOUNT">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="TASKINFOTYPE_HITCOUNT">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="TASKINFOTYPE_MAXHITCOUNT">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="TASKINFOTYPE_ALERTCOUNT">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="TASKINFOTYPE_MAXALERTCOUNT">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="TASKINFOTYPE_PID">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="TASKINFOTYPE_68K_NEWFRAME">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="TASKINFOTYPE_PPC_SRR0">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="TASKINFOTYPE_PPC_SRR1">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="TASKINFOTYPE_PPC_LR">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="TASKINFOTYPE_PPC_CTR">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="TASKINFOTYPE_PPC_CR">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="TASKINFOTYPE_PPC_XER">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="TASKINFOTYPE_PPC_GPR">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="TASKINFOTYPE_PPC_FPR">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="TASKINFOTYPE_PPC_FPSCR">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="TASKINFOTYPE_PPC_VSCR">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="TASKINFOTYPE_PPC_VMX">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="TASKINFOTYPE_PPC_VSAVE">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="TASKINFOTYPE_PPC_FRAME">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="TASKINFOTYPE_PPC_FRAMESIZE">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="TASKINFOTYPE_PPC_NEWFRAME">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="TASKINFOTAG_DUMMY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="TASKINFOTAG_HOOK">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="TASKINFOTAG_REGSTART">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="TASKINFOTAG_REGCOUNT">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- pointer type Visibility: default -->
<element name="PTaskFrame68k">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- record type Visibility: default -->
<element name="TTaskFrame68k">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TTaskFrame68k.PC">
<short></short>
</element>

<!-- variable Visibility: default -->
<element name="TTaskFrame68k.SR">
<short></short>
</element>

<!-- variable Visibility: default -->
<element name="TTaskFrame68k.Xn">
<short></short>
</element>

<!-- constant Visibility: default -->
<element name="DEFAULT_PPCSTACKSIZE">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="DEFAULT_M68KSTACKSIZE">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="DEFAULT_TASKPUDDLESIZE">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="DEFAULT_TASKTHRESHSIZE">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="PID_CURRENT">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="AG_MsgPortNotEmpty">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- record type Visibility: default -->
<element name="TAlertMessage">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TAlertMessage.Message">
<short></short>
</element>

<!-- variable Visibility: default -->
<element name="TAlertMessage.Task">
<short></short>
</element>

<!-- variable Visibility: default -->
<element name="TAlertMessage.Version">
<short></short>
</element>

<!-- variable Visibility: default -->
<element name="TAlertMessage.ID">
<short></short>
</element>

<!-- constant Visibility: default -->
<element name="VERSION_ALERTMESSAGE">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="MACHINE_M68k">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="MACHINE_PPC">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="MACHINE_NO">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="LIB_GETQUERYATTR">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="LIBF_RAMLIB">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="LIBF_QUERYINFO">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SETFUNCTAG_Dummy">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SETFUNCTAG_MACHINE">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SETFUNCTAG_TYPE">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SETFUNCTAG_IDNAME">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SETFUNCTAG_DELETE">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SETFUNCTYPE_NORMAL">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SETFUNCTYPE_QUICK">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SETFUNCTYPE_NORMALNR">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SETFUNCTYPE_QUICKNR">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SETFUNCTYPE_NORMALSR">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SETFUNCTYPE_NORMALSRNR">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SETFUNCTYPE_NORMALD0_D1">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SETFUNCTYPE_NORMALRESTORE">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SETFUNCTYPE_SYSTEMV">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SETFUNCTYPE_NORMALD0D1SR">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SETFUNCTYPE_NORMALD0D1A0A1SR">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="LIBTAG_BASE">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="LIBTAG_FUNCTIONINIT">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="LIBTAG_STRUCTINIT">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="LIBTAG_LIBRARYINIT">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="LIBTAG_MACHINE">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="LIBTAG_BASESIZE">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="LIBTAG_SEGLIST">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="LIBTAG_PRI">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="LIBTAG_TYPE">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="LIBTAG_VERSION">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="LIBTAG_FLAGS">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="LIBTAG_NAME">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="LIBTAG_IDSTRING">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="LIBTAG_PUBLIC">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="LIBTAG_REVISION">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="LIBTAG_QUERYINFO">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- pointer type Visibility: default -->
<element name="PFuncEntry">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- record type Visibility: default -->
<element name="TFuncEntry">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TFuncEntry.EmulLibEntry">
<short></short>
</element>

<!-- variable Visibility: default -->
<element name="TFuncEntry.OldFunction">
<short></short>
</element>

<!-- pointer type Visibility: default -->
<element name="PFuncOldEntry">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- record type Visibility: default -->
<element name="TFuncOldEntry">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TFuncOldEntry.Command">
<short></short>
</element>

<!-- variable Visibility: default -->
<element name="TFuncOldEntry.FuncEntry">
<short></short>
</element>

<!-- constant Visibility: default -->
<element name="FUNCENTRYEXTF_LIBRARY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="FUNCENTRYEXTF_SETFUNCTION">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="FUNCARRAY_16BIT_OLD">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="FUNCARRAY_32BIT_NATIVE">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="FUNCARRAY_BEGIN">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="FUNCARRAY_END">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="FUNCARRAY_32BIT_QUICK_NATIVE">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="FUNCARRAY_32BIT_QUICKNR_NATIVE">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="FUNCARRAY_32BIT_NR_NATIVE">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="FUNCARRAY_32BIT_SR_NATIVE">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="FUNCARRAY_32BIT_SRNR_NATIVE">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="FUNCARRAY_32BIT_D0D1_NATIVE">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="FUNCARRAY_32BIT_RESTORE_NATIVE">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="FUNCARRAY_32BIT_SYSTEMV">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="FUNCARRAY_32BIT_D0D1SR_NATIVE">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="FUNCARRAY_32BIT_D0D1A0A1SR_NATIVE">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="CPUTBSTACKTRACECOUNT">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TExecBase.ex_EmulHandleSize">
<short></short>
</element>

<!-- variable Visibility: default -->
<element name="TExecBase.ex_PPCTrapMsgPort">
<short></short>
</element>

<!-- variable Visibility: default -->
<element name="TExecBase.ex_PatchPool">
<short></short>
</element>

<!-- variable Visibility: default -->
<element name="TExecBase.ex_PPCTaskExitCode">
<short></short>
</element>

<!-- constant Visibility: default -->
<element name="AFB_PRIVATE">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="AFF_PRIVATE">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SB_SAR">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SB_TQE">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SB_SINT">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SF_SAR">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SF_TQE">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SF_SINT">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="EXECDEBUGF_INITRESIDENT">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="EXECDEBUGF_INITCODE">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="EXECDEBUGF_FINDRESIDENT">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="EXECDEBUGF_CREATELIBRARY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="EXECDEBUGF_SETFUNCTION">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="EXECDEBUGF_NEWSETFUNCTION">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="EXECDEBUGF_CHIPRAM">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="EXECDEBUGF_ADDTASK">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="EXECDEBUGF_REMTASK">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="EXECDEBUGF_GETTASKATTR">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="EXECDEBUGF_SETTASKATTR">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="EXECDEBUGF_EXCEPTHANDLER">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="EXECDEBUGF_ADDDOSNODE">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="EXECDEBUGF_PCI">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="EXECDEBUGF_RAMLIB">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="EXECDEBUGF_NOLOGSERVER">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="EXECDEBUGF_NOLOGWINDOW">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="EXECDEBUGF_LOGFILE">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="EXECDEBUGF_LOGKPRINTF">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="EXECDEBUGF_PERMMEMTRACK">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="EXECDEBUGF_MEMTRACK">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="EXECDEBUGF_CYBERGUARDDEADLY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="EXECDEBUGF_LOADSEG">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="EXECDEBUGF_UNLOADSEG">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="EXECDEBUGF_PPCSTART">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="EXECDEBUGF_CGXDEBUG">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="EXECDEBUGF_INIT">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="EXECDEBUGF_LOG">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="EXECLIST_DEVICE">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="EXECLIST_INTERRUPT">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="EXECLIST_LIBRARY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="EXECLIST_MEMHANDLER">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="EXECLIST_MEMHEADER">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="EXECLIST_PORT">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="EXECLIST_RESOURCE">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="EXECLIST_SEMAPHORE">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="EXECLIST_TASK">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- pointer type Visibility: default -->
<element name="PExecNotifyMessage">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- record type Visibility: default -->
<element name="TExecNotifyMessage">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TExecNotifyMessage.MType">
<short></short>
</element>

<!-- variable Visibility: default -->
<element name="TExecNotifyMessage.Flags">
<short></short>
</element>

<!-- variable Visibility: default -->
<element name="TExecNotifyMessage.Extra">
<short></short>
</element>

<!-- variable Visibility: default -->
<element name="TExecNotifyMessage.Extension">
<short></short>
</element>

<!-- constant Visibility: default -->
<element name="EXECNOTIFYF_REMOVE">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="EXECNOTIFYF_POST">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SAL_Dummy">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SAL_Type">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SAL_Priority">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SAL_Name">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="RAWFMTFUNC_STRING">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="RAWFMTFUNC_SERIAL">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="RAWFMTFUNC_COUNT">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SYSTEMINFOTYPE_SYSTEM">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SYSTEMINFOTYPE_MACHINE">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SYSTEMINFOTYPE_PPC_CPUVERSION">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SYSTEMINFOTYPE_PPC_CPUREVISION">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SYSTEMINFOTYPE_PPC_CPUCLOCK">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SYSTEMINFOTYPE_PPC_BUSCLOCK">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SYSTEMINFOTYPE_PPC_ICACHEL1SIZE">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SYSTEMINFOTYPE_PPC_ICACHEL1LINES">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SYSTEMINFOTYPE_PPC_ICACHEL1LINESIZE">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SYSTEMINFOTYPE_PPC_DCACHEL1SIZE">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SYSTEMINFOTYPE_PPC_DCACHEL1LINES">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SYSTEMINFOTYPE_PPC_DCACHEL1LINESIZE">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SYSTEMINFOTYPE_PPC_CACHEL1TYPE">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SYSTEMINFOTYPE_PPC_CACHEL1FLAGS">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SYSTEMINFOTYPE_PPC_ICACHEL2SIZE">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SYSTEMINFOTYPE_PPC_ICACHEL2LINES">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SYSTEMINFOTYPE_PPC_ICACHEL2LINESIZE">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SYSTEMINFOTYPE_PPC_DCACHEL2SIZE">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SYSTEMINFOTYPE_PPC_DCACHEL2LINES">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SYSTEMINFOTYPE_PPC_DCACHEL2LINESIZE">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SYSTEMINFOTYPE_PPC_CACHEL2TYPE">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SYSTEMINFOTYPE_PPC_CACHEL2FLAGS">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SYSTEMINFOTYPE_PPC_ICACHEL3SIZE">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SYSTEMINFOTYPE_PPC_ICACHEL3LINES">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SYSTEMINFOTYPE_PPC_ICACHEL3LINESIZE">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SYSTEMINFOTYPE_PPC_DCACHEL3SIZE">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SYSTEMINFOTYPE_PPC_DCACHEL3LINES">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SYSTEMINFOTYPE_PPC_DCACHEL3LINESIZE">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SYSTEMINFOTYPE_PPC_CACHEL3TYPE">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SYSTEMINFOTYPE_PPC_CACHEL3FLAGS">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SYSTEMINFOTYPE_PPC_TLBENTRIES">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SYSTEMINFOTYPE_PPC_TLBSETS">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SYSTEMINFOTYPE_PPC_FPU">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SYSTEMINFOTYPE_PPC_ALTIVEC">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SYSTEMINFOTYPE_PPC_PERFMONITOR">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SYSTEMINFOTYPE_PPC_DATASTREAM">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SYSTEMINFOTYPE_PPC_RESERVATIONSIZE">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SYSTEMINFOTYPE_PPC_BUSTICKS">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SYSTEMINFOTYPE_PPC_CPUTEMP">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SYSTEMINFOTYPE_PPC_DABR">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SYSTEMINFOTYPE_PAGESIZE">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SYSTEMINFOTYPE_CPUCOUNT">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SYSTEMINFOTYPE_TBCLOCKFREQUENCY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SYSTEMINFOTYPE_UPTIMETICKS">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SYSTEMINFOTYPE_LASTSECTICKS">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SYSTEMINFOTYPE_RECENTTICKS">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SYSTEMINFOTYPE_CPUTIME">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SYSTEMINFOTYPE_LASTSECCPUTIME">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SYSTEMINFOTYPE_RECENTCPUTIME">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SYSTEMINFOTYPE_VOLUNTARYCSW">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SYSTEMINFOTYPE_INVOLUNTARYCSW">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SYSTEMINFOTYPE_LASTSECVOLUNTARYCSW">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SYSTEMINFOTYPE_LASTSECINVOLUNTARYCSW">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SYSTEMINFOTYPE_LOADAVG1">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SYSTEMINFOTYPE_LOADAVG2">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SYSTEMINFOTYPE_LOADAVG3">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SYSTEMINFOTYPE_TASKSCREATED">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SYSTEMINFOTYPE_TASKSFINISHED">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SYSTEMINFOTYPE_LAUNCHTIMETICKS">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SYSTEMINFOTYPE_LAUNCHTIMETICKS1978">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SYSTEMINFOTYPE_TASKSRUNNING">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SYSTEMINFOTYPE_TASKSSLEEPING">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SYSTEMINFOTYPE_EMULHANDLESIZE">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SYSTEMINFOTYPE_EXCEPTIONMSGPORT">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SYSTEMINFOTYPE_TASKEXITCODE">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SYSTEMINFOTYPE_TASKEXITCODE_M68K">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SYSTEMINFOTYPE_EMULATION_START">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SYSTEMINFOTYPE_EMULATION_SIZE">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SYSTEMINFOTYPE_MODULE_START">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SYSTEMINFOTYPE_MODULE_SIZE">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SYSTEMINFOTYPE_EXCEPTIONMSGPORT_68K">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SYSTEMINFOTYPE_ALERTMSGPORT">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SYSTEMINFOTYPE_VENDOR">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SYSTEMINFOTYPE_REVISION">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SYSTEMINFOTYPE_MAGIC1">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SYSTEMINFOTYPE_MAGIC2">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SYSTEMINFOTYPE_MAXHITCOUNT">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SYSTEMINFOTYPE_MAXALERTCOUNT">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SYSTEMINFOTYPE_REGUSER">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SYSTEMINFOTYPE_FREEBLOCKS">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SYSTEMINFOTYPE_CPUNAME">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SYSTEMINFOTYPE_CPUFAMILYNAME">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SYSTEMINFOTAG_DUMMY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SYSTEMINFOTAG_CPUINDEX">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SYSTEMINFOTAG_MEMHEADER">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SYSTEMINFOTAG_HOOK">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="TLS_INVALID_INDEX">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="TLSTAG_DUMMY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="TLSTAG_DESTRUCTOR">
<short>Tag for <link id="TLSAllocA"/></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="TLSTAG_USERDATA">
<short>Tag for <link id="TLSAllocA"/></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="InitResident.resident">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="SetIntVector.interrupt">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="AddIntServer.interrupt">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="RemIntServer.interrupt">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="Cause.interrupt">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="AddLibrary.libHandle">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="RemLibrary.libHandle">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="CloseLibrary.libHandle">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="SetFunction.libHandle">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="SumLibrary.libHandle">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="OpenDevice.numunit">
<short></short>
</element>

<!-- procedure Visibility: default -->
<element name="RawIOInit">
<short></short>
<descr>
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>

<!-- function Visibility: default -->
<element name="RawMayGetChar">
<short></short>
<descr>
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="RawMayGetChar.Result">
<short></short>
</element>

<!-- procedure Visibility: default -->
<element name="RawPutChar">
<short></short>
<descr>
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="RawPutChar.d0arg">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="OpenLibrary.libver">
<short></short>
</element>

<!-- function result Visibility: default -->
<element name="SumKickData.Result">
<short></short>
</element>

<!-- function Visibility: default -->
<element name="NewGetTaskAttrsA">
<short></short>
<descr>
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="NewGetTaskAttrsA.Result">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="NewGetTaskAttrsA.Task">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="NewGetTaskAttrsA.Data">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="NewGetTaskAttrsA.DataSize">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="NewGetTaskAttrsA.TType">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="NewGetTaskAttrsA.Tags">
<short></short>
</element>

<!-- function Visibility: default -->
<element name="NewSetTaskAttrsA">
<short></short>
<descr>
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="NewSetTaskAttrsA.Result">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="NewSetTaskAttrsA.Task">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="NewSetTaskAttrsA.Data">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="NewSetTaskAttrsA.DataSize">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="NewSetTaskAttrsA.TType">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="NewSetTaskAttrsA.Tags">
<short></short>
</element>

<!-- function Visibility: default -->
<element name="NewSetFunction">
<short></short>
<descr>
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="NewSetFunction.Result">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="NewSetFunction.libHandle">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="NewSetFunction.newfunction">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="NewSetFunction.offset">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="NewSetFunction.tags">
<short></short>
</element>

<!-- function Visibility: default -->
<element name="NewCreateLibrary">
<short></short>
<descr>
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="NewCreateLibrary.Result">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="NewCreateLibrary.Tags">
<short></short>
</element>

<!-- function Visibility: default -->
<element name="NewPPCStackSwap">
<short></short>
<descr>
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="NewPPCStackSwap.Result">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="NewPPCStackSwap.newStack">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="NewPPCStackSwap.sfunction">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="NewPPCStackSwap.args">
<short></short>
</element>

<!-- function Visibility: default -->
<element name="TaggedOpenLibrary">
<short></short>
<descr>
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="TaggedOpenLibrary.Result">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="TaggedOpenLibrary.d0arg">
<short></short>
</element>

<!-- function Visibility: default -->
<element name="ReadGayle">
<short></short>
<descr>
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="ReadGayle.Result">
<short></short>
</element>

<!-- function Visibility: default -->
<element name="VNewRawDoFmt">
<short></short>
<descr>
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="VNewRawDoFmt.Result">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="VNewRawDoFmt.FmtString">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="VNewRawDoFmt.PutChProc">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="VNewRawDoFmt.PutChData">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="VNewRawDoFmt.args">
<short></short>
</element>

<!-- procedure Visibility: default -->
<element name="CacheFlushDataArea">
<short></short>
<descr>
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="CacheFlushDataArea.Address">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="CacheFlushDataArea.Size">
<short></short>
</element>

<!-- procedure Visibility: default -->
<element name="CacheInvalidInstArea">
<short></short>
<descr>
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="CacheInvalidInstArea.Address">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="CacheInvalidInstArea.Size">
<short></short>
</element>

<!-- procedure Visibility: default -->
<element name="CacheInvalidDataArea">
<short></short>
<descr>
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="CacheInvalidDataArea.Address">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="CacheInvalidDataArea.Size">
<short></short>
</element>

<!-- procedure Visibility: default -->
<element name="CacheFlushDataInstArea">
<short></short>
<descr>
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="CacheFlushDataInstArea.Address">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="CacheFlushDataInstArea.Size">
<short></short>
</element>

<!-- procedure Visibility: default -->
<element name="CacheTrashCacheArea">
<short></short>
<descr>
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="CacheTrashCacheArea.Address">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="CacheTrashCacheArea.Size">
<short></short>
</element>

<!-- function Visibility: default -->
<element name="AllocTaskPooled">
<short></short>
<descr>
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="AllocTaskPooled.Result">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="AllocTaskPooled.Size">
<short></short>
</element>

<!-- procedure Visibility: default -->
<element name="FreeTaskPooled">
<short></short>
<descr>
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="FreeTaskPooled.Address">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="FreeTaskPooled.Size">
<short></short>
</element>

<!-- function Visibility: default -->
<element name="AllocVecTaskPooled">
<short></short>
<descr>
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="AllocVecTaskPooled.Result">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="AllocVecTaskPooled.Size">
<short></short>
</element>

<!-- procedure Visibility: default -->
<element name="FreeVecTaskPooled">
<short></short>
<descr>
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="FreeVecTaskPooled.Address">
<short></short>
</element>

<!-- procedure Visibility: default -->
<element name="FlushPool">
<short></short>
<descr>
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="FlushPool.poolHeader">
<short></short>
</element>

<!-- procedure Visibility: default -->
<element name="FlushTaskPool">
<short></short>
<descr>
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>

<!-- function Visibility: default -->
<element name="AllocVecPooled">
<short></short>
<descr>
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="AllocVecPooled.Result">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="AllocVecPooled.poolHeader">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="AllocVecPooled.memSize">
<short></short>
</element>

<!-- function Visibility: default -->
<element name="FreeVecPooled">
<short></short>
<descr>
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="FreeVecPooled.Result">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="FreeVecPooled.poolHeader">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="FreeVecPooled.memory">
<short></short>
</element>

<!-- function Visibility: default -->
<element name="NewGetSystemAttrsA">
<short></short>
<descr>
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="NewGetSystemAttrsA.Result">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="NewGetSystemAttrsA.Data">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="NewGetSystemAttrsA.DataSize">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="NewGetSystemAttrsA.TType">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="NewGetSystemAttrsA.Tags">
<short></short>
</element>

<!-- function Visibility: default -->
<element name="NewSetSystemAttrsA">
<short></short>
<descr>
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="NewSetSystemAttrsA.Result">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="NewSetSystemAttrsA.Data">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="NewSetSystemAttrsA.DataSize">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="NewSetSystemAttrsA.TType">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="NewSetSystemAttrsA.Tags">
<short></short>
</element>

<!-- function Visibility: default -->
<element name="NewCreateTaskA">
<short></short>
<descr>
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="NewCreateTaskA.Result">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="NewCreateTaskA.Tags">
<short></short>
</element>

<!-- function Visibility: default -->
<element name="AllocateAligned">
<short></short>
<descr>
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="AllocateAligned.Result">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="AllocateAligned.memHeader">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="AllocateAligned.byteSize">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="AllocateAligned.alignSize">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="AllocateAligned.alignOffset">
<short></short>
</element>

<!-- function Visibility: default -->
<element name="AllocMemAligned">
<short></short>
<descr>
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="AllocMemAligned.Result">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="AllocMemAligned.byteSize">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="AllocMemAligned.attributes">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="AllocMemAligned.alignSize">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="AllocMemAligned.alignOffset">
<short></short>
</element>

<!-- function Visibility: default -->
<element name="AllocVecAligned">
<short></short>
<descr>
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="AllocVecAligned.Result">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="AllocVecAligned.byteSize">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="AllocVecAligned.attributes">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="AllocVecAligned.alignSize">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="AllocVecAligned.alignOffset">
<short></short>
</element>

<!-- procedure Visibility: default -->
<element name="AddExecNotify">
<short></short>
<descr>
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="AddExecNotify.hook">
<short></short>
</element>

<!-- procedure Visibility: default -->
<element name="RemExecNotify">
<short></short>
<descr>
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="RemExecNotify.hook">
<short></short>
</element>

<!-- function Visibility: default -->
<element name="FindExecNode">
<short></short>
<descr>
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="FindExecNode.Result">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="FindExecNode.ttype">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="FindExecNode.name">
<short></short>
</element>

<!-- function Visibility: default -->
<element name="AddExecNodeA">
<short></short>
<descr>
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="AddExecNodeA.Result">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="AddExecNodeA.innode">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="AddExecNodeA.TagItems">
<short></short>
</element>

<!-- function Visibility: default -->
<element name="AllocVecDMA">
<short></short>
<descr>
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="AllocVecDMA.Result">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="AllocVecDMA.byteSize">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="AllocVecDMA.requirements">
<short></short>
</element>

<!-- procedure Visibility: default -->
<element name="FreeVecDMA">
<short></short>
<descr>
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="FreeVecDMA.memoryBlock">
<short></short>
</element>

<!-- function Visibility: default -->
<element name="AllocPooledAligned">
<short></short>
<descr>
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="AllocPooledAligned.Result">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="AllocPooledAligned.poolHeader">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="AllocPooledAligned.byteSize">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="AllocPooledAligned.alignSize">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="AllocPooledAligned.alignOffset">
<short></short>
</element>

<!-- function Visibility: default -->
<element name="AddResident">
<short></short>
<descr>
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="AddResident.Result">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="AddResident.resident">
<short></short>
</element>

<!-- function Visibility: default -->
<element name="FindTaskByPID">
<short></short>
<descr>
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="FindTaskByPID.Result">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="FindTaskByPID.processID">
<short></short>
</element>

<!-- procedure Visibility: default -->
<element name="DumpTaskState">
<short></short>
<descr>
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="DumpTaskState.Task">
<short></short>
</element>

<!-- procedure Visibility: default -->
<element name="AddExecNotifyType">
<short></short>
<descr>
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="AddExecNotifyType.Hook">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="AddExecNotifyType.Type_">
<short></short>
</element>

<!-- function Visibility: default -->
<element name="ShutdownA">
<short></short>
<descr>
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="ShutdownA.Result">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="ShutdownA.MyTags">
<short></short>
</element>

<!-- function Visibility: default -->
<element name="AvailPool">
<short></short>
<descr>
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="AvailPool.Result">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="AvailPool.PoolHeader">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="AvailPool.Flags">
<short></short>
</element>

<!-- procedure Visibility: default -->
<element name="PutMsgHead">
<short></short>
<descr>
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="PutMsgHead.Port">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="PutMsgHead.Message">
<short></short>
</element>

<!-- function Visibility: default -->
<element name="NewGetTaskPIDAttrsA">
<short></short>
<descr>
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="NewGetTaskPIDAttrsA.Result">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="NewGetTaskPIDAttrsA.PID">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="NewGetTaskPIDAttrsA.Data">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="NewGetTaskPIDAttrsA.DataSize">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="NewGetTaskPIDAttrsA.Type_">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="NewGetTaskPIDAttrsA.Tags">
<short></short>
</element>

<!-- function Visibility: default -->
<element name="NewSetTaskPIDAttrsA">
<short></short>
<descr>
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="NewSetTaskPIDAttrsA.Result">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="NewSetTaskPIDAttrsA.PID">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="NewSetTaskPIDAttrsA.Data">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="NewSetTaskPIDAttrsA.DataSize">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="NewSetTaskPIDAttrsA.Type_">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="NewSetTaskPIDAttrsA.Tags">
<short></short>
</element>

<!-- function Visibility: default -->
<element name="TLSAlloc">
<short>VarArgs version of <link id="TLSAllocA"/></short>
<descr>
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="TLSAlloc.Result">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="TLSAlloc.Tags">
<short></short>
</element>

<!-- function Visibility: default -->
<element name="TLSFree">
<short>Free Thread-Local Storage index</short>
<descr><p>Deallocates a Thread-Local Storage index and returns it to the global
    index pool.</p>
<p><b>Attention</b></p>
<p>It is illegal to free a Thread-Local Storage index while it is still
    in use. Unspecified bad things may happen if this is done. The caller
    is responsible for ensuring that TLSFree is not called prematurely.</p>
</descr>
<errors>
</errors>
<seealso>  
  <link id="TLSAlloc"/>
  <link id="TLSGetValue"/>
  <link id="TLSSetValue"/>
  <link id="TLSCallDestructors"/>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="TLSFree.Result">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="TLSFree.Idx">
<short>Index to free. Must have been allocated with <link id="TLSAlloc"/> earlier. Passing <link id="TLS_INVALID_INDEX"/> is safe and does nothing.</short>
</element>

<!-- function Visibility: default -->
<element name="TLSGetValue">
<short>get the task specific value associated with a given Thread-Local Storage index (V51.46)</short>
<descr>
<p>Return the task specific value currently associated with the given
    Thread-Local Storage index. Initial value is NULL if not yet set with
    TLSSetValue.</p>
<p><b>Attention</b></p>
<p>This function is safe to abort mid-execution: This means that there
    is are global locks, nor does any state change during the execution
    of this function. Typically you don't need to care about such issues
    but in some specific instances this information is valueable.</p>
<p>
    This function is very fast.</p>
</descr>
<errors>
</errors>
<seealso>
  <link id="TLSAlloc"/>
  <link id="TLSFree"/>
  <link id="TLSSetValue"/>
  <link id="TLSCallDestructors"/>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="TLSGetValue.Result">
<short>value associated with the current task.</short>
</element>

<!-- argument Visibility: default -->
<element name="TLSGetValue.Idx">
<short>index to return value for.</short>
</element>

<!-- function Visibility: default -->
<element name="TLSSetValue">
<short>set the task specific value associated with a given Thread-Local Storage index (V51.46)</short>
<descr><p>Set the task specific value associated with the given Thread-Local Storage index.</p>
<p><b>Attention</b></p>
<p>The result of this call must be checked and a viable error handling path taken.</p>
</descr>
<example file="examples/TLS2.pp"/>
<errors>
</errors>
<seealso>
  <link id="TLSFree"/>
  <link id="TLSAlloc"/>
  <link id="TLSCallDestructors"/>
  <link id="TLSGetValue"/>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="TLSSetValue.Result">
<short>Non-zero if the value could be set, zero if out of
       resources. Note that setting value to nil will always
       succeed.</short>
</element>

<!-- argument Visibility: default -->
<element name="TLSSetValue.Idx">
<short>index to set value for.</short>
</element>

<!-- argument Visibility: default -->
<element name="TLSSetValue.Value">
<short>value to set.</short>
</element>

<!-- procedure Visibility: default -->
<element name="TLSCallDestructors">
<short>Call Thread-Local Storage index destructors for the given task (V51.46)</short>
<descr>
<p>Calls destructors for all Thread-Local Storage indices with non-NULL
    value. The value is passed to the destructor as the first parameter.
    The value for the given index is set to nil before the call.</p>
<p>
    If new indices with destructors appear after the destructors have
    been called this function performs unspecified number of retries
    until either there are no more destructors to call or the function
    gives up due to excessive retry attempts.</p>
<p><b>Attention</b></p>
<p>TLSCallDestructors is mainly meant to be used by someone
    implementing a custom threading solution. This function can be
    called after the thread has completed its processing and is
    about the end.</p>
<p>
    Calling this function for any other purpose, or before being
    terminated is illegal.</p>
<p>
    Calling this function for other task than self is unwise. The
    destructor functions might not be called in this case, but could
    still get deallocated and not called again, ever. Just Don't Do
    It.</p>
</descr>
<example file="examples/TLS1.pp"/>
<errors>
  MorphOS 3.14 (exec 51.46) had a bug which resulted in the
  destructors being called out of the expected order. In particular
  this could cause issues if destructor execution expected
  destructors getting called once before (potentially) getting called
  again. This bug was fixed in MorphOS 3.15 (exec 51.48) and later
  versions. Now all destructors are guaranteed to get called once
  before getting called again due to non-nil value appearing during
  some destructor function execution.
</errors>
<seealso>
  <link id="TLSFree"/>
  <link id="TLSAlloc"/>
  <link id="TLSSetValue"/>
  <link id="TLSGetValue"/>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="TLSCallDestructors.Task">
<short></short>
</element>

<!-- function Visibility: default -->
<element name="NewGetTaskAttrs">
<short></short>
<descr>
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="NewGetTaskAttrs.Result">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="NewGetTaskAttrs.Task">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="NewGetTaskAttrs.Data">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="NewGetTaskAttrs.DataSize">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="NewGetTaskAttrs.TType">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="NewGetTaskAttrs.Tags">
<short></short>
</element>

<!-- function Visibility: default -->
<element name="NewSetTaskAttrs">
<short></short>
<descr>
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="NewSetTaskAttrs.Result">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="NewSetTaskAttrs.Task">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="NewSetTaskAttrs.Data">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="NewSetTaskAttrs.DataSize">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="NewSetTaskAttrs.TType">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="NewSetTaskAttrs.Tags">
<short></short>
</element>

<!-- function Visibility: default -->
<element name="NewCreateLibraryTags">
<short></short>
<descr>
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="NewCreateLibraryTags.Result">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="NewCreateLibraryTags.Tags">
<short></short>
</element>

<!-- function Visibility: default -->
<element name="NewGetSystemAttrs">
<short></short>
<descr>
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="NewGetSystemAttrs.Result">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="NewGetSystemAttrs.Data">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="NewGetSystemAttrs.DataSize">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="NewGetSystemAttrs.MyType">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="NewGetSystemAttrs.Tags">
<short></short>
</element>

<!-- function Visibility: default -->
<element name="NewSetSystemAttrs">
<short></short>
<descr>
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="NewSetSystemAttrs.Result">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="NewSetSystemAttrs.Data">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="NewSetSystemAttrs.DataSize">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="NewSetSystemAttrs.MyType">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="NewSetSystemAttrs.Tags">
<short></short>
</element>

<!-- function Visibility: default -->
<element name="NewCreateTask">
<short></short>
<descr>
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="NewCreateTask.Result">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="NewCreateTask.Tags">
<short></short>
</element>

<!-- function Visibility: default -->
<element name="AddExecNode">
<short></short>
<descr>
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="AddExecNode.Result">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="AddExecNode.InNode">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="AddExecNode.Tags">
<short></short>
</element>

<!-- function Visibility: default -->
<element name="NewGetTaskPIDAttrs">
<short></short>
<descr>
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="NewGetTaskPIDAttrs.Result">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="NewGetTaskPIDAttrs.PID">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="NewGetTaskPIDAttrs.Data">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="NewGetTaskPIDAttrs.DataSize">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="NewGetTaskPIDAttrs.Type_">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="NewGetTaskPIDAttrs.Tags">
<short></short>
</element>

<!-- function Visibility: default -->
<element name="NewSetTaskPIDAttrs">
<short></short>
<descr>
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="NewSetTaskPIDAttrs.Result">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="NewSetTaskPIDAttrs.PID">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="NewSetTaskPIDAttrs.Data">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="NewSetTaskPIDAttrs.DataSize">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="NewSetTaskPIDAttrs.Type_">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="NewSetTaskPIDAttrs.Tags">
<short></short>
</element>

<!-- function Visibility: default -->
<element name="TLSAllocA">
<short>Allocate Thread-Local Storage index (V51.46)</short>
<descr>
<p>Allocates a Thread-Local Storage index from the global index pool.</p>
<p><b>Available Tags</b></p>
<dl>
  <dt>TLSTAG_DESTRUCTOR</dt><dd><p>A function to call when <link id="TLSCallDestructors"/>() function is called or when the task/process terminates.
    Default is to call no function. Passing nil has the same effect. destructor is called as</p> <code>procedure(value: APTR; userdata: APTR);</code> </dd>
  <dt>TLSTAG_USERDATA</dt><dd>Optional userdata to the <var>TLSTAG_DESTRUCTOR</var>
    function. The default value is nil if thistag is not specified.</dd>
</dl>
<p>The destructor function should not take very long to complete. It
    is for example unwise to ask for user input or similar. The
    destructor may call <link id="TLSSetValue"/>(index, nil) for the same index.
    It is also legal to <link id="TLSSetValue"/> some other index to non-nil value.
    Refer to <link id="TLSCallDestructors"/> documentation for details about this.</p>
<p>
    Care must be taken that all accessed resources are valid and
    accessible during destructor execution. It is also up to the caller
    to implement any arbitration of resources with for example
    signalsemaphore, if needed.</p>
<p>
    It is the responsiblity of the TLSAlloc caller to ensure that code
    pointed by <var>TLSTAG_DESTRUCTOR</var> will remain executable for the
    duration teh index is in use. Specifically the application may not
    terminate (which unloads the code segment) if there are any other
    tasks running which may call the destructor.</p>
<p>
    If you do not call <link id="TLSCallDestructors"/> yourself the destructor will
    be executed when the process/task is about to terminate. For process
    this happens before struct Process fields are deallocated.</p>
<p><b>Attention</b></p>
<p>The destructor function must remain callable for as long as index
    remains allocated.</p>
<p>
    It is illegal to <link id="TLSFree"/> an index while it is still being used
    by <link id="TLSGetValue"/> and/or <link id="TLSSetValue"/> by other tasks. The caller is
    responsible for making sure this does not happen.</p>
</descr>
<example file="examples/TLS3.pp"/>
<errors>
</errors>
<seealso>
  <link id="TLSAlloc"/>
  <link id="TLSFree"/>
  <link id="TLSCallDestructors"/>
  <link id="TLSSetValue"/>
  <link id="TLSGetValue"/>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="TLSAllocA.Result">
<short>a global index to Thread-Local Storage or <link id="TLS_INVALID_INDEX"/>
            if no index was available due to lack of resources.</short>
</element>

<!-- argument Visibility: default -->
<element name="TLSAllocA.Tags">
<short>Pointer to a taglist, or nil</short>
</element>


</module> <!-- EXEC -->

</package>
</fpdoc-descriptions>

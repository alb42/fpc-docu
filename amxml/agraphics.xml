<?xml version="1.0" encoding="ISO-8859-1"?>
<fpdoc-descriptions>
<package name="amunits">

<!--
  ====================================================================
    agraphics
  ====================================================================
-->

<module name="agraphics">
<short>Native Amiga graphic functions (graphics.library)</short>
<descr>The Graphics library provide graphic functions for graphic centered programs.
Beside drawing lines and circles, set points it provides function for Sprite-, Bob
and VSprite manipulation. There are also some functions to work together with the layers.library.
</descr>

<!-- constant Visibility: default -->
<element name="BITSET">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="BITCLR">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- alias type Visibility: default -->
<element name="TPlanePtr">
<short>Pointer to Bitplane coded image data, can be created with <link id="AllocRaster"/></short>
<descr>
</descr>
<seealso>
<link id="AllocRaster"/>
<link id="FreeRaster"/>
</seealso>
</element>

<!-- pointer type Visibility: default -->
<element name="PPoint">
<short>Pointer to an x,y defined point.</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- record type Visibility: default -->
<element name="TPoint">
<short>Basic definition of a point (x,y)</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TPoint.x">
<short>X-Value</short>
</element>

<!-- variable Visibility: default -->
<element name="TPoint.y">
<short>Y-Value</short>
</element>

<!-- pointer type Visibility: default -->
<element name="PBitMap">
<short>Pointer to a bitmap in memory, properties and data.</short>
<descr>
</descr>
<seealso>
<link id="AllocBitmap"/>
<link id="FreeBitmap"/>
<link id="AllocSpriteDataA"/>
<link id="BltBitMap"/>
<link id="BltBitMapRastPort"/>
<link id="BltMaskBitMapRastPort"/>
<link id="ChangeVPBitmap"/>
<link id="GetBitMapAttr"/>
<link id="InitBitMap"/>
<link id="TRastPort"/>
</seealso>
</element>

<!-- record type Visibility: default -->
<element name="TBitMap">
<short>Represents an image in ram.</short>
<descr>Drawing to a Bitmap is mostly done by drawing on a <link id="TRastPort"/> with the linked
Bitmap <link id="TRastPort"/>.Bitmap.
</descr>
<seealso>
<link id="AllocBitmap"/>
<link id="FreeBitmap"/>
<link id="AllocSpriteDataA"/>
<link id="BltBitMap"/>
<link id="BltBitMapRastPort"/>
<link id="BltMaskBitMapRastPort"/>
<link id="ChangeVPBitmap"/>
<link id="GetBitMapAttr"/>
<link id="InitBitMap"/>
<link id="TRastPort"/>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TBitMap.BytesPerRow">
<short>Width of a line it Bytes (To get the width of the Bitmap
in pixels you have to multiply this
value with 8 and divide by the <var>Depth.</var>)</short>
</element>

<!-- variable Visibility: default -->
<element name="TBitMap.Rows">
<short>Number of lines in the Bitmap</short>
</element>

<!-- variable Visibility: default -->
<element name="TBitMap.Flags">
<short>Flags for the bitmap when created on <link id="AllocBitmap"/> (BMF_*)</short>
</element>

<!-- variable Visibility: default -->
<element name="TBitMap.Depth">
<short>Number of Bitplanes</short>
</element>

<!-- variable Visibility: default -->
<element name="TBitMap.Pad">
<short>Padding byte</short>
</element>

<!-- variable Visibility: default -->
<element name="TBitMap.Planes">
<short>Pointer to the bitplanes. <var>Depth</var> defines how many pointers</short>
</element>

<!-- pointer type Visibility: default -->
<element name="PRectangle">
<short>Pointer to Rectangle (Word size values)</short>
<descr>
</descr>
<seealso>
<link id="AndRectRegion"/>
<link id="ClearRectRegion"/>
<link id="OrRectRegion"/>
<link id="XorRectRegion"/>
<link id="TRegionRectangle"/>
<link id="TClipRect"/>
<link id="TLayer"/>
<link id="TTextExtent"/>
</seealso>
</element>

<!-- record type Visibility: default -->
<element name="TRectangle">
<short>Basic struct for defining a rectengular region with word values</short>
<descr>
</descr>
<seealso>
<link id="AndRectRegion"/>
<link id="ClearRectRegion"/>
<link id="OrRectRegion"/>
<link id="XorRectRegion"/>
<link id="TRegionRectangle"/>
<link id="TClipRect"/>
<link id="TLayer"/>
<link id="TTextExtent"/>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TRectangle.MinX">
<short>Left edge</short>
</element>

<!-- variable Visibility: default -->
<element name="TRectangle.MinY">
<short>Top edge</short>
</element>

<!-- variable Visibility: default -->
<element name="TRectangle.MaxX">
<short>Right edge</short>
</element>

<!-- variable Visibility: default -->
<element name="TRectangle.MaxY">
<short>Bottom Edge</short>
</element>

<!-- pointer type Visibility: default -->
<element name="PRect32">
<short>Pointer to Rectangle (Integer size Values)</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- record type Visibility: default -->
<element name="TRect32">
<short>Basic struct for defining a rectengular region with integer values</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TRect32.MinX">
<short>Left Edge</short>
</element>

<!-- variable Visibility: default -->
<element name="TRect32.MinY">
<short>Top edge</short>
</element>

<!-- variable Visibility: default -->
<element name="TRect32.MaxX">
<short>Right Edge</short>
</element>

<!-- variable Visibility: default -->
<element name="TRect32.MaxY">
<short>Bottom Edge</short>
</element>

<!-- pointer type Visibility: default -->
<element name="PCollTable">
<short>Pointer to a structure to contain the 16 collision procedure addresses</short>
<descr>
</descr>
<seealso>
<link id="TGelsInfo"/>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="BMB_CLEAR">
<short>Bit flag for <link id="AllocBitMap"/> Fill Bitmap with color 0</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="BMB_DISPLAYABLE">
<short>Bit flag for <link id="AllocBitMap"/> Displayable Bitmap</short>
<descr>This bitmap data should be allocated in such a
manner that it can be displayed. Displayable data has
more severe alignment restrictions than non-displayable
data in some systems.
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="BMB_INTERLEAVED">
<short>Bit flag for <link id="AllocBitMap"/> Interleaved Bitmap</short>
<descr>The bitmap will be allocated with one large chunk of display
memory for all bitplanes. This minimizes color flashing
on deep displays. If there is not enough contiguous RAM
for an interleaved bitmap, graphics.library will fall
back to a non-interleaved one.
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="BMB_STANDARD">
<short>Bit flag for <link id="AllocBitMap"/></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="BMB_MINPLANES">
<short>Bit flag for <link id="AllocBitMap"/> Minimal memory use</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="BMF_CLEAR">
<short>Bit value for <link id="AllocBitMap"/> Fill Bitmap with color 0</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="BMF_DISPLAYABLE">
<short>Bit flag for <link id="AllocBitMap"/> Displayable Bitmap</short>
<descr>This bitmap data should be allocated in such a
manner that it can be displayed. Displayable data has
more severe alignment restrictions than non-displayable
data in some systems.
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="BMF_INTERLEAVED">
<short>Bit flag for <link id="AllocBitMap"/> Interleaved Bitmap</short>
<descr>The bitmap will be allocated with one large chunk of display
memory for all bitplanes. This minimizes color flashing
on deep displays. If there is not enough contiguous RAM
for an interleaved bitmap, graphics.library will fall
back to a non-interleaved one.
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="BMF_STANDARD">
<short>Bit value for <link id="AllocBitMap"/></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="BMF_MINPLANES">
<short>Bit value for <link id="AllocBitMap"/> Minimal memory use</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="BMA_HEIGHT">
<short>ID are for <link id="GetBitMapAttr"/>. Query height of bitmap.</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="BMA_DEPTH">
<short>ID are for <link id="GetBitMapAttr"/>. Query depth of bitmap.</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="BMA_WIDTH">
<short>ID are for <link id="GetBitMapAttr"/>. Query width of bitmap.</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="BMA_FLAGS">
<short>ID are for <link id="GetBitMapAttr"/>. Query Flags (BMF_*) of bitmap.</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- pointer type Visibility: default -->
<element name="PRegionRectangle">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- record type Visibility: default -->
<element name="TRegionRectangle">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TRegionRectangle.Next">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TRegionRectangle.Prev">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TRegionRectangle.Bounds">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- pointer type Visibility: default -->
<element name="PRegion">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- record type Visibility: default -->
<element name="TRegion">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TRegion.Bounds">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TRegion.RegionRectangle">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="CR_NEEDS_NO_CONCEALED_RASTERS">
<short>Internal ClipRect flag</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="CR_NEEDS_NO_LAYERBLIT_DAMAGE">
<short>Internal ClipRect flag</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="ISLESSX">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="ISLESSY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="ISGRTRX">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="ISGRTRY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- pointer type Visibility: default -->
<element name="PTextAttr">
<short>TextAttr node, matches text attributes in <link id="TRastPort"/></short>
<descr>
</descr>
<seealso>
<link id="SetFont"/>
<link id="OpenFont"/>
<link id="StripFont"/>
<link id="diskfont.OpenDiskFont">OpenDiskFont</link>
</seealso>
</element>

<!-- record type Visibility: default -->
<element name="TTextAttr">
<short>TextAttr node, matches text attributes in <link id="TRastPort"/></short>
<descr>
</descr>
<seealso>
<link id="SetFont"/>
<link id="OpenFont"/>
<link id="StripFont"/>
<link id="diskfont.OpenDiskFont">OpenDiskFont</link>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TTextAttr.ta_Name">
<short>Name of Font</short>
</element>

<!-- variable Visibility: default -->
<element name="TTextAttr.ta_YSize">
<short>Height of Font</short>
</element>

<!-- variable Visibility: default -->
<element name="TTextAttr.ta_Style">
<short>Intrinsic Font Style (FSF_*)</short>
</element>

<!-- variable Visibility: default -->
<element name="TTextAttr.ta_Flags">
<short>Font preferences and flags (FPF_*)</short>
</element>

<!-- pointer type Visibility: default -->
<element name="PTTextAttr">
<short>Extended TextAttr node, matches text attributes in <link id="TRastPort"/></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- record type Visibility: default -->
<element name="TTTextAttr">
<short>Extended TextAttr node, matches text attributes in <link id="TRastPort"/></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TTTextAttr.tta_Name">
<short>Name of the Font</short>
</element>

<!-- variable Visibility: default -->
<element name="TTTextAttr.tta_YSize">
<short>Height of the Font</short>
</element>

<!-- variable Visibility: default -->
<element name="TTTextAttr.tta_Style">
<short>Intrinsic Font Style (FSF_*)</short>
</element>

<!-- variable Visibility: default -->
<element name="TTTextAttr.tta_Flags">
<short>Font preferences and flags (FPF_*)</short>
</element>

<!-- variable Visibility: default -->
<element name="TTTextAttr.tta_Tags">
<short>Extended Attributes (TA_*)</short>
</element>

<!-- constant Visibility: default -->
<element name="FS_NORMAL">
<short>Bit Font Style normal text (no style bits set)</short>
<descr>For <link id="TTextAttr"/>.ta_Style, <link id="TTTextAttr"/>.tta_Style
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="FSB_UNDERLINED">
<short>Bit Font Style underlined (under baseline)</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="FSF_UNDERLINED">
<short>Font Style underlined (under baseline)</short>
<descr>For <link id="TTextAttr"/>.ta_Style, <link id="TTTextAttr"/>.tta_Style
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="FSB_BOLD">
<short>Bit Font Style bold face text (ORed w/ shifted)</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="FSF_BOLD">
<short>Font Style bold face text (ORed w/ shifted)</short>
<descr>For <link id="TTextAttr"/>.ta_Style, <link id="TTTextAttr"/>.tta_Style
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="FSB_ITALIC">
<short>Bit Font Style italic (slanted 1:2 right)</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="FSF_ITALIC">
<short>Font Style italic (slanted 1:2 right)</short>
<descr>For <link id="TTextAttr"/>.ta_Style, <link id="TTTextAttr"/>.tta_Style
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="FSB_EXTENDED">
<short>Bit Font Style extended face (wider than normal)</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="FSF_EXTENDED">
<short>Font Style extended face (wider than normal)</short>
<descr>For <link id="TTextAttr"/>.ta_Style, <link id="TTTextAttr"/>.tta_Style
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="FSB_COLORFONT">
<short>Bit Font Style this uses ColorTextFont structure</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="FSF_COLORFONT">
<short>Bit Font Style this uses ColorTextFont structure</short>
<descr>For <link id="TTextAttr"/>.ta_Style, <link id="TTTextAttr"/>.tta_Style
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="FSB_TAGGED">
<short>Bit Font Style the TextAttr is really an TTextAttr</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="FSF_TAGGED">
<short>Font Style the TextAttr is really an TTextAttr</short>
<descr>For <link id="TTextAttr"/>.ta_Style, <link id="TTTextAttr"/>.tta_Style
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="FPB_ROMFONT">
<short>Flag Bit font is in rom</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="FPF_ROMFONT">
<short>Flag value font is in rom</short>
<descr>For <link id="TTextAttr"/>.ta_Flags,<link id="TTTextAttr"/>.tta_Flags
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="FPB_DISKFONT">
<short>Flag Bit font is from diskfont.library</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="FPF_DISKFONT">
<short>Flag value font is from diskfont.library</short>
<descr>For <link id="TTextAttr"/>.ta_Flags,<link id="TTTextAttr"/>.tta_Flags
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="FPB_REVPATH">
<short>Flag Bit designed path is reversed (e.g. left)</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="FPF_REVPATH">
<short>Flag value designed path is reversed (e.g. left)</short>
<descr>For <link id="TTextAttr"/>.ta_Flags,<link id="TTTextAttr"/>.tta_Flags
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="FPB_TALLDOT">
<short>Flag Bit designed for hires non-interlaced</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="FPF_TALLDOT">
<short>Flag value designed for hires non-interlaced</short>
<descr>For <link id="TTextAttr"/>.ta_Flags,<link id="TTTextAttr"/>.tta_Flags
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="FPB_WIDEDOT">
<short>Flag Bit designed for lores interlaced</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="FPF_WIDEDOT">
<short>Flag value designed for lores interlaced</short>
<descr>For <link id="TTextAttr"/>.ta_Flags,<link id="TTTextAttr"/>.tta_Flags
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="FPB_PROPORTIONAL">
<short>Flag Bit character sizes can vary from nominal</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="FPF_PROPORTIONAL">
<short>Flag value character sizes can vary from nominal</short>
<descr>For <link id="TTextAttr"/>.ta_Flags, <link id="TTTextAttr"/>.tta_Flags
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="FPB_DESIGNED">
<short>Flag Bit size is "designed", not constructed</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="FPF_DESIGNED">
<short>Flag value size is "designed", not constructed</short>
<descr>For <link id="TTextAttr"/>.ta_Flags,<link id="TTTextAttr"/>.tta_Flags
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="FPB_REMOVED">
<short>Flag Bit the font has been removed</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="FPF_REMOVED">
<short>Flag value the font has been removed</short>
<descr>For <link id="TTextAttr"/>.ta_Flags,<link id="TTTextAttr"/>.tta_Flags
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="TA_DeviceDPI">
<short>Tag for <link id="TTTextAttr"/>.tta_Tags</short>
<descr>Tag value is Point union:
   Hi word XDPI, Lo word YDPI
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="MAXFONTMATCHWEIGHT">
<short>Perfect match from <link id="WeighTAMatch"/></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- pointer type Visibility: default -->
<element name="PTextFont">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- record type Visibility: default -->
<element name="TTextFont">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TTextFont.tf_Message">
<short>Reply message for font removal, Font name in <link id="exec.TNode">tf_Message.mn_Node.ln_Name</link></short>
</element>

<!-- variable Visibility: default -->
<element name="TTextFont.tf_YSize">
<short>Font height</short>
</element>

<!-- variable Visibility: default -->
<element name="TTextFont.tf_Style">
<short>Font style (FSF_*)</short>
</element>

<!-- variable Visibility: default -->
<element name="TTextFont.tf_Flags">
<short>Preferences and flags (FPF_*)</short>
</element>

<!-- variable Visibility: default -->
<element name="TTextFont.tf_XSize">
<short>Nominal font width </short>
</element>

<!-- variable Visibility: default -->
<element name="TTextFont.tf_Baseline">
<short>Distance from the top of char to baseline</short>
</element>

<!-- variable Visibility: default -->
<element name="TTextFont.tf_BoldSmear">
<short>Smear to affect a bold enhancement</short>
</element>

<!-- variable Visibility: default -->
<element name="TTextFont.tf_Accessors">
<short>Access count</short>
</element>

<!-- variable Visibility: default -->
<element name="TTextFont.tf_LoChar">
<short>The first character described here</short>
</element>

<!-- variable Visibility: default -->
<element name="TTextFont.tf_HiChar">
<short>The last character described here</short>
</element>

<!-- variable Visibility: default -->
<element name="TTextFont.tf_CharData">
<short>The bit character data</short>
</element>

<!-- variable Visibility: default -->
<element name="TTextFont.tf_Modulo">
<short>The row modulo for the strike font data</short>
</element>

<!-- variable Visibility: default -->
<element name="TTextFont.tf_CharLoc">
<short>Pointer to location data for the strike font 2 words: bit offset then size</short>
</element>

<!-- variable Visibility: default -->
<element name="TTextFont.tf_CharSpace">
<short>Pointer to words of proportional spacing data</short>
</element>

<!-- variable Visibility: default -->
<element name="TTextFont.tf_CharKern">
<short>Pointer to words of kerning data</short>
</element>

<!-- pointer type Visibility: default -->
<element name="PTextFontExtension">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- record type Visibility: default -->
<element name="TTextFontExtension">
<short>Extended font description</short>
<descr>This structure is read-only
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TTextFontExtension.tfe_MatchWord">
<short>A magic cookie for the extension</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TTextFontExtension.tfe_Flags0">
<short>System private flags <link id="TE0F_NOREMFONT"/></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TTextFontExtension.tfe_Flags1">
<short>System private flags</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TTextFontExtension.tfe_BackPtr">
<short>Validation of compilation</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TTextFontExtension.tfe_OrigReplyPort">
<short>Original value in <link id="TTextFont"/>.tf_Extension</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TTextFontExtension.tfe_Tags">
<short>Text Tags for the font</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TTextFontExtension.tfe_OFontPatchS">
<short>System private use</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TTextFontExtension.tfe_OFontPatchK">
<short>System private use</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- pointer type Visibility: default -->
<element name="PColorFontColors">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- record type Visibility: default -->
<element name="TColorFontColors">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TColorFontColors.cfc_Reserved">
<short><b>Must</b> be zero</short>
</element>

<!-- variable Visibility: default -->
<element name="TColorFontColors.cfc_Count">
<short>Number of entries in <var>cfc_ColorTable</var></short>
</element>

<!-- variable Visibility: default -->
<element name="TColorFontColors.cfc_ColorTable">
<short>4 bit per component color map packed xRGB</short>
</element>

<!-- pointer type Visibility: default -->
<element name="PColorTextFont">
<short>Pointer to color Text font</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- record type Visibility: default -->
<element name="TColorTextFont">
<short>Color font structure</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TColorTextFont.ctf_TF">
<short>Standard Textfont structure</short>
</element>

<!-- variable Visibility: default -->
<element name="TColorTextFont.ctf_Flags">
<short>Extended flags (CT_*)</short>
</element>

<!-- variable Visibility: default -->
<element name="TColorTextFont.ctf_Depth">
<short>Number of bit planes</short>
</element>

<!-- variable Visibility: default -->
<element name="TColorTextFont.ctf_FgColor">
<short>Color that is remapped to FgPen</short>
</element>

<!-- variable Visibility: default -->
<element name="TColorTextFont.ctf_Low">
<short>Lowest color represented here</short>
</element>

<!-- variable Visibility: default -->
<element name="TColorTextFont.ctf_High">
<short>Highest color represented here</short>
</element>

<!-- variable Visibility: default -->
<element name="TColorTextFont.ctf_PlanePick">
<short>PlanePick ala Images</short>
</element>

<!-- variable Visibility: default -->
<element name="TColorTextFont.ctf_PlaneOnOff">
<short>PlaneOnOff ala Images</short>
</element>

<!-- variable Visibility: default -->
<element name="TColorTextFont.ctf_ColorFontColors">
<short>Colors for font</short>
</element>

<!-- variable Visibility: default -->
<element name="TColorTextFont.ctf_CharData">
<short>Pointers to bit planes ala <link id="TTextFont"/>.tf_CharData</short>
</element>

<!-- pointer type Visibility: default -->
<element name="PTextExtent">
<short>Pointer to a measured text size</short>
<descr>
</descr>
<seealso>
<link id="FontExtent"/>
<link id="TextExtent"/>
<link id="TextFit"/>
</seealso>
</element>

<!-- record type Visibility: default -->
<element name="TTextExtent">
<short>A measured text size</short>
<descr>
</descr>
<seealso>
<link id="FontExtent"/>
<link id="TextExtent"/>
<link id="TextFit"/>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TTextExtent.te_Width">
<short>Same as <link id="TextLength">TextLength()</link> the RastPort current x postion
 advance that rendering this text would cause.</short>
</element>

<!-- variable Visibility: default -->
<element name="TTextExtent.te_Height">
<short>same as <link id="TTextFont">tf_YSize</link> The height of the font.</short>
</element>

<!-- variable Visibility: default -->
<element name="TTextExtent.te_Extent">
<short>relative to CP</short>
</element>

<!-- constant Visibility: default -->
<element name="CTB_MAPCOLOR">
<short>Flag Bit for <link id="TColorTextFont"/>.ctf_Flags</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="CTF_MAPCOLOR">
<short>Flag for <link id="TColorTextFont"/>.ctf_Flags mapped color</short>
<descr>Map <link id="TColorTextFont"/>.ctf_FgColor to the <link id="TRastPort"/>.rp_FgPen.
If it's is a valid color from <link id="TColorTextFont"/>.ctf_Low to <link id="TColorTextFont"/>.ctf_High.
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="CT_COLORFONT">
<short>Flag for <link id="TColorTextFont"/>.ctf_Flags color map contains designer's colors</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="CT_GREYFONT">
<short>Flag for <link id="TColorTextFont"/>.ctf_Flags color map describes even-stepped</short>
<descr>brightnesses from <link id="TColorTextFont"/>.ctf_Low to <link id="TColorTextFont"/>.ctf_High
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="CT_ANTIALIAS">
<short>Flag for <link id="TColorTextFont"/>.ctf_Flags zero background thru fully saturated char</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="CT_COLORMASK">
<short>Flag mask for <link id="TColorTextFont"/>.ctf_Flags mask to get to all color styles</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SAVEBACK">
<short>User Set flag for <link id="TVsprite"/>.Flags. Set if background is to be saved/restored</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="OVERLAY">
<short>User Set flag for <link id="TVsprite"/>.Flags. Set to mask image of Bob onto background</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="MUSTDRAW">
<short>User Set flag for <link id="TVsprite"/>.Flags. Set if VSprite absolutely must be drawn</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SUSERFLAGS">
<short>Mask of all user-settable <link id="TVsprite"/>.Flags</short>
<descr>
</descr>
<seealso>
<link id="SAVEBACK"/>
<link id="OVERLAY"/>
<link id="MUSTDRAW"/>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="BACKSAVED">
<short>System Set flag for <link id="TVsprite"/>.Flags. This Bob's background has been saved</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="BOBUPDATE">
<short>System Set flag for <link id="TVsprite"/>.Flags. Temporary flag, useless to outside world</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="GELGONE">
<short>System Set flag for <link id="TVsprite"/>.Flags. Set if gel is completely clipped (offscreen)</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="VSOVERFLOW">
<short>System Set flag for <link id="TVsprite"/>.Flags. VSprite overflow (if MUSTDRAW set we draw!)</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SAVEBOB">
<short>Bob User Flag for <link id="TBob"/>.Flags set to not erase Bob</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="BOBISCOMP">
<short>Bob User Flag for <link id="TBob"/>.Flags set to identify Bob as AnimComp</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="BUSERFLAGS">
<short>Bob user Flag for <link id="TBob"/>.Flags  mask of all user-settable Bob-flags </short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="BWAITING">
<short>Bob System Flag for <link id="TBob"/>.Flags set while Bob is waiting on 'after'</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="BDRAWN">
<short>Bob System Flag for <link id="TBob"/>.Flags set when Bob is drawn this DrawG pass</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="BOBSAWAY">
<short>Bob System Flag for <link id="TBob"/>.Flags Set to initiate removal of Bob</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="BOBNIX">
<short>Bob System Flag for <link id="TBob"/>.Flags Set when Bob is completely removed</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SAVEPRESERVE">
<short>Bob System Flag for <link id="TBob"/>.Flags For back-restore during double-buffer</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="OUTSTEP">
<short>Bob System Flag for <link id="TBob"/>.Flags For double-clearing if double-buffer</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="ANFRACSIZE">
<short>Define for the animation procedures</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="RINGTRIGGER">
<short>Define for the animation procedures</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="ANIMHALF">
<short>Define for the animation procedures</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- pointer type Visibility: default -->
<element name="PBob">
<short>Pointer to an Blitter object structure</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- pointer type Visibility: default -->
<element name="PAnimOb">
<short>Pointer to an animation object</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- pointer type Visibility: default -->
<element name="PAnimComp">
<short>Pointer to an animation </short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- pointer type Visibility: default -->
<element name="PVSprite">
<short>Pointer to Sprite structure</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- record type Visibility: default -->
<element name="TVSprite">
<short>Sprite description</short>
<descr><p>
The VSprite positions are defined in (y,x) order to make sorting
sorting easier, since (y,x) as a long Longint.</p>
<p>
<var>BorderLine</var> is the one-dimensional logical OR of all
the VSprite bits, used for fast collision detection of edge</p>
<p><var>PlanePick</var> flag:  set bit selects a plane from image, clear bit selects
use of shadow mask for that plane
 OnOff flag: if using shadow mask to fill plane, this bit (corresponding
  to bit in planePick) describes whether to fill with 0's or 1's</p>
<p>There are two uses for these flags:</p>
 <ul>
  <li>if this is the VSprite of a Bob, these flags describe how the Bob
        is to be drawn into memory</li>
  <li>if this is a simple VSprite and the user intends on setting the
        <link id="MUSTDRAW"/> flag of the VSprite, these flags must be set too to describe
        which color registers the user wants for the image</li>
</ul>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TVSprite.NextVSprite">
<short>GEL linked list forward pointer sorted by y,x value</short>
</element>

<!-- variable Visibility: default -->
<element name="TVSprite.PrevVSprite">
<short>GEL linked list backward pointer sorted by y,x value</short>
</element>

<!-- variable Visibility: default -->
<element name="TVSprite.DrawPath">
<short>Pointer of overlay drawing</short>
</element>

<!-- variable Visibility: default -->
<element name="TVSprite.ClearPath">
<short>Pointer for overlay clearing</short>
</element>

<!-- variable Visibility: default -->
<element name="TVSprite.OldY">
<short>Previous x position</short>
</element>

<!-- variable Visibility: default -->
<element name="TVSprite.OldX">
<short>Previous y position</short>
</element>

<!-- variable Visibility: default -->
<element name="TVSprite.Flags">
<short>VSprite flags</short>
</element>

<!-- variable Visibility: default -->
<element name="TVSprite.Y">
<short>Screen y position</short>
</element>

<!-- variable Visibility: default -->
<element name="TVSprite.X">
<short>Screen x position</short>
</element>

<!-- variable Visibility: default -->
<element name="TVSprite.Height">
<short>Number of lines of image data</short>
</element>

<!-- variable Visibility: default -->
<element name="TVSprite.Width">
<short>Number of words per row of image data</short>
</element>

<!-- variable Visibility: default -->
<element name="TVSprite.Depth">
<short>Number of planes</short>
</element>

<!-- variable Visibility: default -->
<element name="TVSprite.MeMask">
<short>Which types can collide with this VSprite</short>
</element>

<!-- variable Visibility: default -->
<element name="TVSprite.HitMask">
<short>Which types this VSprite can collide with</short>
</element>

<!-- variable Visibility: default -->
<element name="TVSprite.ImageData">
<short>Pointer to VSprite image</short>
</element>

<!-- variable Visibility: default -->
<element name="TVSprite.BorderLine">
<short>Logical OR of all VSprite bits</short>
</element>

<!-- variable Visibility: default -->
<element name="TVSprite.CollMask">
<short>Similar to above except this is a matrix</short>
</element>

<!-- variable Visibility: default -->
<element name="TVSprite.SprColors">
<short>Pointer to this VSprite's color definitions (not used by Bobs)</short>
</element>

<!-- variable Visibility: default -->
<element name="TVSprite.VSBob">
<short>(<link id="PBob"/>) points home if this VSprite is part of a Bob</short>
</element>

<!-- variable Visibility: default -->
<element name="TVSprite.PlanePick">
<short>Plane flags</short>
</element>

<!-- variable Visibility: default -->
<element name="TVSprite.PlaneOnOff">
<short></short>
</element>

<!-- variable Visibility: default -->
<element name="TVSprite.VUserExt">
<short>User definable</short>
</element>

<!-- pointer type Visibility: default -->
<element name="PDBufPacket">
<short>Defines the values needed to be saved across buffer to buffer when in double-buffer mode</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- record type Visibility: default -->
<element name="TDBufPacket">
<short>Defines the values needed to be saved across buffer to buffer when in double-buffer mode</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TDBufPacket.BufY">
<short>Save other buffers screen coordinates</short>
</element>

<!-- variable Visibility: default -->
<element name="TDBufPacket.BufX">
<short>Save other buffers screen coordinates</short>
</element>

<!-- variable Visibility: default -->
<element name="TDBufPacket.BufPath">
<short>Carry the draw path over the gap</short>
</element>

<!-- variable Visibility: default -->
<element name="TDBufPacket.BufBuffer">
<short>These pointers must be filled in by the user pointer to other buffer's background save buffer</short>
</element>

<!-- record type Visibility: default -->
<element name="TBob">
<short>Blitter object</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TBob.Flags">
<short>General purpose flags</short>
</element>

<!-- variable Visibility: default -->
<element name="TBob.SaveBuffer">
<short>Pointer to the buffer for background save</short>
</element>

<!-- variable Visibility: default -->
<element name="TBob.ImageShadow">
<short>Pointer to the buffer for background save</short>
</element>

<!-- variable Visibility: default -->
<element name="TBob.Before">
<short>Draw this Bob before Bob pointed to by before</short>
</element>

<!-- variable Visibility: default -->
<element name="TBob.After">
<short>Draw this Bob after Bob pointed to by after</short>
</element>

<!-- variable Visibility: default -->
<element name="TBob.BobVSprite">
<short>This Bob's VSprite definition</short>
</element>

<!-- variable Visibility: default -->
<element name="TBob.BobComp">
<short><link id="PAnimComp"/> pointer to this Bob's AnimComp def</short>
</element>

<!-- variable Visibility: default -->
<element name="TBob.DBuffer">
<short>Pointer to this Bob's dBuf packet</short>
</element>

<!-- variable Visibility: default -->
<element name="TBob.BUserExt">
<short>Bob user extension</short>
</element>

<!-- record type Visibility: default -->
<element name="TAnimComp">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TAnimComp.Flags">
<short>AnimComp flags for system and user</short>
</element>

<!-- variable Visibility: default -->
<element name="TAnimComp.Timer">
<short>timer defines how long to keep this component active:
 if set non-zero, timer decrements to zero then switches to nextSeq
 if set to zero, AnimComp never switches</short>
</element>

<!-- variable Visibility: default -->
<element name="TAnimComp.TimeSet">
<short>Initial value for timer when the AnimComp is activated by the system</short>
</element>

<!-- variable Visibility: default -->
<element name="TAnimComp.NextComp">
<short>Pointer to next components of animation object</short>
</element>

<!-- variable Visibility: default -->
<element name="TAnimComp.PrevComp">
<short>Pointer to previous components of animation object</short>
</element>

<!-- variable Visibility: default -->
<element name="TAnimComp.NextSeq">
<short>Pointer to component component definition of next image in sequence</short>
</element>

<!-- variable Visibility: default -->
<element name="TAnimComp.PrevSeq">
<short>pointer to component component definition of previous image in sequence</short>
</element>

<!-- variable Visibility: default -->
<element name="TAnimComp.AnimCRoutine">
<short>Pointer of special animation procedure</short>
</element>

<!-- variable Visibility: default -->
<element name="TAnimComp.YTrans">
<short>Initial y translation (if this is a component)</short>
</element>

<!-- variable Visibility: default -->
<element name="TAnimComp.XTrans">
<short>Initial x translation (if this is a component)</short>
</element>

<!-- variable Visibility: default -->
<element name="TAnimComp.HeadOb">
<short></short>
</element>

<!-- variable Visibility: default -->
<element name="TAnimComp.AnimBob">
<short></short>
</element>

<!-- record type Visibility: default -->
<element name="TAnimOb">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TAnimOb.NextOb">
<short>Next Bob</short>
</element>

<!-- variable Visibility: default -->
<element name="TAnimOb.PrevOb">
<short>Previous Bob</short>
</element>

<!-- variable Visibility: default -->
<element name="TAnimOb.Clock">
<short>Number of calls to Animate this AnimOb has endured</short>
</element>

<!-- variable Visibility: default -->
<element name="TAnimOb.AnOldY">
<short>Old y coordinate</short>
</element>

<!-- variable Visibility: default -->
<element name="TAnimOb.AnOldX">
<short>Old x coordinate</short>
</element>

<!-- variable Visibility: default -->
<element name="TAnimOb.AnY">
<short>y coordinate of the AnimOb</short>
</element>

<!-- variable Visibility: default -->
<element name="TAnimOb.AnX">
<short>x coordinate of the AnimOb</short>
</element>

<!-- variable Visibility: default -->
<element name="TAnimOb.YVel">
<short>Velocity of this object in y direction</short>
</element>

<!-- variable Visibility: default -->
<element name="TAnimOb.XVel">
<short>Velocity of this object in x direction</short>
</element>

<!-- variable Visibility: default -->
<element name="TAnimOb.YAccel">
<short>Acceleration of this object in y direction</short>
</element>

<!-- variable Visibility: default -->
<element name="TAnimOb.XAccel">
<short>Acceleration of this object in x direction</short>
</element>

<!-- variable Visibility: default -->
<element name="TAnimOb.RingYTrans">
<short>Ring translation y value</short>
</element>

<!-- variable Visibility: default -->
<element name="TAnimOb.RingXTrans">
<short>Ring translation x values</short>
</element>

<!-- variable Visibility: default -->
<element name="TAnimOb.AnimORoutine">
<short>Pointer of special animation procedure</short>
</element>

<!-- variable Visibility: default -->
<element name="TAnimOb.HeadComp">
<short>Pointer to first component</short>
</element>

<!-- variable Visibility: default -->
<element name="TAnimOb.AUserExt">
<short>AnimOb user extension</short>
</element>

<!-- pointer type Visibility: default -->
<element name="PPAnimOb">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="B2NORM">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="B2SWAP">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="B2BOBBER">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- pointer type Visibility: default -->
<element name="PRastPort">
<short>Basic structure for all drawing actions</short>
<descr>
</descr>
<seealso>
<link id="BltBitMapRastPort"/>
<link id="BltMaskBitMapRastPort"/>
<link id="BltPattern"/>
<link id="ClearEOL"/>
<link id="ClearScreen"/>
<link id="ClipBlit"/>
<link id="Draw"/>
<link id="DrawEllipse"/>
<link id="DrawGList"/>
<link id="EraseRect"/>
<link id="Flood"/>
<link id="GfxMove"/>
<link id="InitRastPort"/>
<link id="PolyDraw"/>
<link id="ReadPixel"/>
<link id="WritePixel"/>
<link id="GfxText"/>
</seealso>
</element>

<!-- pointer type Visibility: default -->
<element name="PLayer">
<short>Pointer to a layer structure</short>
<descr>
</descr>
<seealso>
<link id="AttemptLockLayerRom"/>
<link id="UnLockLayerRom"/>
<link id="LockLayerRom"/>
<link id="CopySBitMap"/>
<link id="SyncSBitMap"/>
<link id="TRastPort"/>
</seealso>
</element>

<!-- pointer type Visibility: default -->
<element name="PClipRect">
<short>Pointer to a clip rectange</short>
<descr>
</descr>
<seealso>
<link id="TLayer"/>
</seealso>
</element>

<!-- record type Visibility: default -->
<element name="TClipRect">
<short>Clip rectangle</short>
<descr>
</descr>
<seealso>
<link id="TLayer"/>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TClipRect.Next">
<short>Pointer to next ClipRect</short>
</element>

<!-- variable Visibility: default -->
<element name="TClipRect.Prev">
<short>Pointer to previous ClipRect</short>
</element>

<!-- variable Visibility: default -->
<element name="TClipRect.Lobs">
<short>Ignored by roms, used by windowlib</short>
</element>

<!-- variable Visibility: default -->
<element name="TClipRect.BitMap">
<short></short>
</element>

<!-- variable Visibility: default -->
<element name="TClipRect.Bounds">
<short>Set up by windowlib, used by roms</short>
</element>

<!-- variable Visibility: default -->
<element name="TClipRect._p1">
<short>system reserved</short>
</element>

<!-- variable Visibility: default -->
<element name="TClipRect._p2">
<short>system reserved</short>
</element>

<!-- variable Visibility: default -->
<element name="TClipRect.reserved">
<short>system use</short>
</element>

<!-- variable Visibility: default -->
<element name="TClipRect.Flags">
<short>Only exists in layer allocation</short>
</element>

<!-- record type Visibility: default -->
<element name="TLayer">
<short>Layer Structure</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TLayer.Front">
<short>Link to next layer (in front of the current one)</short>
</element>

<!-- variable Visibility: default -->
<element name="TLayer.Back">
<short>Link to the previous layer (behind the current one)</short>
</element>

<!-- variable Visibility: default -->
<element name="TLayer.ClipRect">
<short>Read by roms to find first cliprect</short>
</element>

<!-- variable Visibility: default -->
<element name="TLayer.Rp">
<short>Ignored by roms, I hope</short>
</element>

<!-- variable Visibility: default -->
<element name="TLayer.Bounds">
<short>Ignored by roms</short>
</element>

<!-- variable Visibility: default -->
<element name="TLayer.Parent">
<short>Private</short>
</element>

<!-- variable Visibility: default -->
<element name="TLayer.Priority">
<short>system use only</short>
</element>

<!-- variable Visibility: default -->
<element name="TLayer.Flags">
<short>obscured ?, Virtual BitMap?</short>
</element>

<!-- variable Visibility: default -->
<element name="TLayer.SuperBitMap">
<short></short>
</element>

<!-- variable Visibility: default -->
<element name="TLayer.SuperClipRect">
<short>Super bitmap cliprects if VBitMap &lt;&gt; 0 else damage cliprect list for refresh</short>
</element>

<!-- variable Visibility: default -->
<element name="TLayer.Window">
<short>Reserved for user interface use</short>
</element>

<!-- variable Visibility: default -->
<element name="TLayer.Scroll_X">
<short></short>
</element>

<!-- variable Visibility: default -->
<element name="TLayer.Scroll_Y">
<short></short>
</element>

<!-- variable Visibility: default -->
<element name="TLayer.cr">
<short>used by dedice</short>
</element>

<!-- variable Visibility: default -->
<element name="TLayer.cr2">
<short>used by dedice</short>
</element>

<!-- variable Visibility: default -->
<element name="TLayer.crnew">
<short>used by dedice</short>
</element>

<!-- variable Visibility: default -->
<element name="TLayer.SuperSaveClipRects">
<short>preallocated Clip rects</short>
</element>

<!-- variable Visibility: default -->
<element name="TLayer._cliprects">
<short>System use during refresh</short>
</element>

<!-- variable Visibility: default -->
<element name="TLayer.LayerInfo">
<short>Points to head of the list</short>
</element>

<!-- variable Visibility: default -->
<element name="TLayer.Lock">
<short></short>
</element>

<!-- variable Visibility: default -->
<element name="TLayer.BackFill">
<short></short>
</element>

<!-- variable Visibility: default -->
<element name="TLayer.VisibleRegion">
<short>Private</short>
</element>

<!-- variable Visibility: default -->
<element name="TLayer.ClipRegion">
<short></short>
</element>

<!-- variable Visibility: default -->
<element name="TLayer.SaveClipRects">
<short>Used to back out when in trouble</short>
</element>

<!-- variable Visibility: default -->
<element name="TLayer.Width">
<short>Width of layer</short>
</element>

<!-- variable Visibility: default -->
<element name="TLayer.Height">
<short>Height of Layer </short>
</element>

<!-- variable Visibility: default -->
<element name="TLayer.Reserved2">
<short></short>
</element>

<!-- variable Visibility: default -->
<element name="TLayer.DamageList">
<short>List of rectangles to refreshthrough</short>
</element>

<!-- pointer type Visibility: default -->
<element name="PAreaInfo">
<short></short>
<descr>
</descr>
<seealso>
<link id="InitArea"/>
<link id="TRastPort"/>
<link id="AreaDraw"/>
<link id="AreaMove"/>
<link id="AreaEllipse"/>
<link id="AreaEnd"/>
</seealso>
</element>

<!-- record type Visibility: default -->
<element name="TAreaInfo">
<short></short>
<descr>
</descr>
<seealso>
<link id="InitArea"/>
<link id="TRastPort"/>
<link id="AreaDraw"/>
<link id="AreaMove"/>
<link id="AreaEllipse"/>
<link id="AreaEnd"/>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TAreaInfo.VctrTbl">
<short>Pointer to start of vector table</short>
</element>

<!-- variable Visibility: default -->
<element name="TAreaInfo.VctrPtr">
<short>Pointer to current vertex</short>
</element>

<!-- variable Visibility: default -->
<element name="TAreaInfo.FlagTbl">
<short>Pointer to start of vector flag table</short>
</element>

<!-- variable Visibility: default -->
<element name="TAreaInfo.FlagPtr">
<short>Pointers to areafill flags</short>
</element>

<!-- variable Visibility: default -->
<element name="TAreaInfo.Count">
<short>Number of vertices in list</short>
</element>

<!-- variable Visibility: default -->
<element name="TAreaInfo.MaxCount">
<short><link id="AreaMove">AreaMove</link>/<link id="AreaDraw">AreaDraw</link> will not allow Count>MaxCount</short>
</element>

<!-- variable Visibility: default -->
<element name="TAreaInfo.FirstX">
<short>First point for this polygon (X coordinate)</short>
</element>

<!-- variable Visibility: default -->
<element name="TAreaInfo.FirstY">
<short>First point for this polygon (Y coordinate)</short>
</element>

<!-- pointer type Visibility: default -->
<element name="PTmpRas">
<short>Temporary rast port</short>
<descr>
</descr>
<seealso>
<link id="InitTmpRas"/>
<link id="InitArea"/>
<link id="TRastPort"/>
<link id="AreaDraw"/>
<link id="AreaMove"/>
<link id="AreaEllipse"/>
<link id="AreaEnd"/>
</seealso>
</element>

<!-- record type Visibility: default -->
<element name="TTmpRas">
<short>Temporary rast port</short>
<descr>
</descr>
<seealso>
<link id="InitTmpRas"/>
<link id="InitArea"/>
<link id="TRastPort"/>
<link id="AreaDraw"/>
<link id="AreaMove"/>
<link id="AreaEllipse"/>
<link id="AreaEnd"/>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TTmpRas.RasPtr">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TTmpRas.Size">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- pointer type Visibility: default -->
<element name="PGelsInfo">
<short></short>
<descr>
</descr>
<seealso>
<link id="TRastPort"/>
<link id="InitGels"/>
<link id="SetCollision"/>
</seealso>
</element>

<!-- record type Visibility: default -->
<element name="TGelsInfo">
<short></short>
<descr>
</descr>
<seealso>
<link id="TRastPort"/>
<link id="InitGels"/>
<link id="SetCollision"/>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TGelsInfo.sprRsrvd">
<short>Flag of which sprites to reserve from vsprite system</short>
</element>

<!-- variable Visibility: default -->
<element name="TGelsInfo.Flags">
<short>System use</short>
</element>

<!-- variable Visibility: default -->
<element name="TGelsInfo.gelHead">
<short><link id="PVSprite"/> Dummy vSprite for list management</short>
</element>

<!-- variable Visibility: default -->
<element name="TGelsInfo.gelTail">
<short><link id="PVSprite"/> Dummy vSprite for list management</short>
</element>

<!-- variable Visibility: default -->
<element name="TGelsInfo.NextLine">
<short>Pointer to array of 8 WORDS for sprite available lines</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TGelsInfo.LastColor">
<short>Pointer to array of 8 pointers for color-last-assigned to vSprites</short>
</element>

<!-- variable Visibility: default -->
<element name="TGelsInfo.CollHandler">
<short><link id="PCollTable"/> Pointeres of collision routines</short>
</element>

<!-- variable Visibility: default -->
<element name="TGelsInfo.LeftMost">
<short></short>
</element>

<!-- variable Visibility: default -->
<element name="TGelsInfo.RightMost">
<short></short>
</element>

<!-- variable Visibility: default -->
<element name="TGelsInfo.TopMost">
<short></short>
</element>

<!-- variable Visibility: default -->
<element name="TGelsInfo.BottomMost">
<short></short>
</element>

<!-- variable Visibility: default -->
<element name="TGelsInfo.FirstBlissObj">
<short>System use only</short>
</element>

<!-- variable Visibility: default -->
<element name="TGelsInfo.LastBlissObj">
<short>System use only</short>
</element>

<!-- record type Visibility: default -->
<element name="TRastPort">
<short>Basic structure for all drawing actions</short>
<descr>
</descr>
<seealso>
<link id="BltBitMapRastPort"/>
<link id="BltMaskBitMapRastPort"/>
<link id="BltPattern"/>
<link id="ClearEOL"/>
<link id="ClearScreen"/>
<link id="ClipBlit"/>
<link id="Draw"/>
<link id="DrawEllipse"/>
<link id="DrawGList"/>
<link id="EraseRect"/>
<link id="Flood"/>
<link id="GfxMove"/>
<link id="InitRastPort"/>
<link id="PolyDraw"/>
<link id="ReadPixel"/>
<link id="WritePixel"/>
<link id="GfxText"/>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TRastPort.Layer">
<short>Pointer to Layer of Rastport</short>
</element>

<!-- variable Visibility: default -->
<element name="TRastPort.BitMap">
<short>Pointer to Bitmap data</short>
</element>

<!-- variable Visibility: default -->
<element name="TRastPort.AreaPtrn">
<short>Area Fill pattern</short>
</element>

<!-- variable Visibility: default -->
<element name="TRastPort.TmpRas">
<short>Temporary Rastport, needed for Area actions</short>
</element>

<!-- variable Visibility: default -->
<element name="TRastPort.AreaInfo">
<short></short>
</element>

<!-- variable Visibility: default -->
<element name="TRastPort.GelsInfo">
<short></short>
</element>

<!-- variable Visibility: default -->
<element name="TRastPort.Mask">
<short>Write mask for this raster</short>
</element>

<!-- variable Visibility: default -->
<element name="TRastPort.FgPen">
<short>Foreground pen for this raster</short>
</element>

<!-- variable Visibility: default -->
<element name="TRastPort.BgPen">
<short>Background pen for this raster</short>
</element>

<!-- variable Visibility: default -->
<element name="TRastPort.AOlPen">
<short>AreaFill outline pen</short>
</element>

<!-- variable Visibility: default -->
<element name="TRastPort.DrawMode">
<short>Drawing mode for fill, lines, and text (<link id="JAM1"/>, <link id="JAM2"/>, <link id="COMPLEMENT"/>, <link id="INVERSVID"/>)</short>
</element>

<!-- variable Visibility: default -->
<element name="TRastPort.AreaPtSz">
<short>2**n words for areafill pattern</short>
</element>

<!-- variable Visibility: default -->
<element name="TRastPort.LinPatCnt">
<short>current line drawing pattern preshift</short>
</element>

<!-- variable Visibility: default -->
<element name="TRastPort.dummy">
<short></short>
</element>

<!-- variable Visibility: default -->
<element name="TRastPort.Flags">
<short>Miscellaneous control bits (<link id="FRST_DOT"/>, <link id="ONE_DOT"/>, <link id="DBUFFER"/>)</short>
</element>

<!-- variable Visibility: default -->
<element name="TRastPort.LinePtrn">
<short>16 bits for textured lines</short>
</element>

<!-- variable Visibility: default -->
<element name="TRastPort.cp_x">
<short>Current x pen position</short>
</element>

<!-- variable Visibility: default -->
<element name="TRastPort.cp_y">
<short>Current y pen position</short>
</element>

<!-- variable Visibility: default -->
<element name="TRastPort.minterms">
<short></short>
</element>

<!-- variable Visibility: default -->
<element name="TRastPort.PenWidth">
<short></short>
</element>

<!-- variable Visibility: default -->
<element name="TRastPort.PenHeight">
<short></short>
</element>

<!-- variable Visibility: default -->
<element name="TRastPort.Font">
<short><link id="PTextFont"/> current font Pointer</short>
</element>

<!-- variable Visibility: default -->
<element name="TRastPort.AlgoStyle">
<short>The algorithmically generated style</short>
</element>

<!-- variable Visibility: default -->
<element name="TRastPort.TxFlags">
<short>Text specific flags</short>
</element>

<!-- variable Visibility: default -->
<element name="TRastPort.TxHeight">
<short>Text height</short>
</element>

<!-- variable Visibility: default -->
<element name="TRastPort.TxWidth">
<short>Text nominal width</short>
</element>

<!-- variable Visibility: default -->
<element name="TRastPort.TxBaseline">
<short>Text baseline</short>
</element>

<!-- variable Visibility: default -->
<element name="TRastPort.TxSpacing">
<short>Text spacing (per character)</short>
</element>

<!-- variable Visibility: default -->
<element name="TRastPort.RP_User">
<short></short>
</element>

<!-- variable Visibility: default -->
<element name="TRastPort.longreserved">
<short></short>
</element>

<!-- variable Visibility: default -->
<element name="TRastPort.wordreserved">
<short>Used to be a node</short>
</element>

<!-- variable Visibility: default -->
<element name="TRastPort.reserved">
<short>For future use</short>
</element>

<!-- constant Visibility: default -->
<element name="FRST_DOT">
<short>Draw the first dot of this line</short>
<descr>
</descr>
<seealso>
<link id="TRastPort"/>.Flags
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="ONE_DOT">
<short>Use one dot mode for drawing lines</short>
<descr>
</descr>
<seealso>
<link id="TRastPort"/>.Flags
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="DBUFFER">
<short>Flag set when RastPorts are double-buffered</short>
<descr>
</descr>
<seealso>
<link id="TRastPort"/>.Flags
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="JAM1">
<short>Drawing mode: Jam 1 color into raster</short>
<descr>
</descr>
<seealso>
<link id="SetDrMd"/>
<link id="GetDrMd"/>
<link id="TRastPort"/>.DrawMode
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="JAM2">
<short>Drawing mode: Jam 2 colors into raster</short>
<descr>
</descr>
<seealso>
<link id="SetDrMd"/>
<link id="GetDrMd"/>
<link id="TRastPort"/>.DrawMode
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="COMPLEMENT">
<short>Drawing mode: XOR bits into raster</short>
<descr>
</descr>
<seealso>
<link id="SetDrMd"/>
<link id="GetDrMd"/>
<link id="TRastPort"/>.DrawMode
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="INVERSVID">
<short>Drawing mode: Inverse video for drawing modes</short>
<descr>
</descr>
<seealso>
<link id="SetDrMd"/>
<link id="GetDrMd"/>
<link id="TRastPort"/>.DrawMode
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="AREAOUTLINE">
<short>Used by areafiller only used for bobs</short>
<descr>
</descr>
<seealso>
<link id="TRastPort"/>.Flags
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="NOCROSSFILL">
<short>Areafills have no crossovers only used for bobs</short>
<descr>
</descr>
<seealso>
<link id="TRastPort"/>.Flags
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="TE0B_NOREMFONT">
<short>Flag bit <link id="TTextFontExtension"/>.tfe_Flags0 disallow RemFont for this font</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="TE0F_NOREMFONT">
<short>Flag value <link id="TTextFontExtension"/>.tfe_Flags0 disallow RemFont for this font</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="CleanUp">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="CleanMe">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="BltClearWait">
<short>Waits for blit to finish</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="BltClearXY">
<short>Use Row/Bytes per row method</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="StraightCopy">
<short>Vanilla copy</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="InvertAndCopy">
<short>Invert the source before copy</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="InvertDest">
<short>Forget source, invert dest</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="PRESERVE_COLORS">
<short>Flag for <link id="CoerceMode"/> Ensure that the mode coerced to can display just as many colours as the ViewPort being coerced.</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="AVOID_FLICKER">
<short>Flag for <link id="CoerceMode"/> Ensure that the mode coerced to is not interlaced.</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="IGNORE_MCOMPAT">
<short>Flags for <link id="CoerceMode"/> Coercion should ignore monitor compatibility issues.</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="BIDTAG_COERCE">
<short>Flags for <link id="CoerceMode"/> Private</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="BORDERHIT">
<short>Bit Description for <link id="SetCollision">SetCollision</link></short>
<descr>This bit descriptor is used by the GEL boundry hit routines.
When the user's boundry-hit routine is called (via the argument
set by a call to <link id="SetCollision">SetCollision</link>) the first argument passed to
the user's routine is the Pointer of the GEL involved in the
boundry-hit, and the second argument has the appropriate bit(s)
set to describe which boundry was surpassed.
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="TOPHIT">
<short>Bit Description for <link id="SetCollision">SetCollision</link></short>
<descr>This bit descriptor is used by the GEL boundry hit routines.
When the user's boundry-hit routine is called (via the argument
set by a call to <link id="SetCollision">SetCollision</link>) the first argument passed to
the user's routine is the Pointer of the GEL involved in the
boundry-hit, and the second argument has the appropriate bit(s)
set to describe which boundry was surpassed.
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="BOTTOMHIT">
<short>Bit Description for <link id="SetCollision">SetCollision</link></short>
<descr>This bit descriptor is used by the GEL boundry hit routines.
When the user's boundry-hit routine is called (via the argument
set by a call to <link id="SetCollision">SetCollision</link>) the first argument passed to
the user's routine is the Pointer of the GEL involved in the
boundry-hit, and the second argument has the appropriate bit(s)
set to describe which boundry was surpassed.
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="LEFTHIT">
<short>Bit Description for <link id="SetCollision">SetCollision</link></short>
<descr>This bit descriptor is used by the GEL boundry hit routines.
When the user's boundry-hit routine is called (via the argument
set by a call to <link id="SetCollision">SetCollision</link>) the first argument passed to
the user's routine is the Pointer of the GEL involved in the
boundry-hit, and the second argument has the appropriate bit(s)
set to describe which boundry was surpassed.
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="RIGHTHIT">
<short>Bit Description for <link id="SetCollision">SetCollision</link></short>
<descr>This bit descriptor is used by the GEL boundry hit routines.
When the user's boundry-hit routine is called (via the argument
set by a call to <link id="SetCollision">SetCollision</link>) the first argument passed to
the user's routine is the Pointer of the GEL involved in the
boundry-hit, and the second argument has the appropriate bit(s)
set to describe which boundry was surpassed.
</descr>
<seealso>
</seealso>
</element>

<!-- pointer type Visibility: default -->
<element name="PExtendedNode">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- record type Visibility: default -->
<element name="TExtendedNode">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TExtendedNode.xln_Succ">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TExtendedNode.xln_Pred">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TExtendedNode.xln_Type">
<short><b>NT_GRAPHICS</b></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TExtendedNode.xln_Pri">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TExtendedNode.xln_Name">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TExtendedNode.xln_Subsystem">
<short><link id="VIEW_EXTRA_TYPE"/>, <link id="VIEWPORT_EXTRA_TYPE"/>, <link id="SPECIAL_MONITOR_TYPE"/> or <link id="MONITOR_SPEC_TYPE"/></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TExtendedNode.xln_Subtype">
<short><link id="SS_GRAPHICS"/></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TExtendedNode.xln_Library">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TExtendedNode.xln_Init">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SS_GRAPHICS">
<short> <link id="TExtendedNode"/>.xln_Subtype </short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="VIEW_EXTRA_TYPE">
<short> <link id="TExtendedNode"/>.xln_Subsystem </short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="VIEWPORT_EXTRA_TYPE">
<short> <link id="TExtendedNode"/>.xln_Subsystem </short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SPECIAL_MONITOR_TYPE">
<short> <link id="TExtendedNode"/>.xln_Subsystem </short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="MONITOR_SPEC_TYPE">
<short> <link id="TExtendedNode"/>.xln_Subsystem </short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- pointer type Visibility: default -->
<element name="PAnalogSignalInterval">
<short></short>
<descr>
</descr>
<seealso>
<link id="TSpecialMonitor"/>
</seealso>
</element>

<!-- record type Visibility: default -->
<element name="TAnalogSignalInterval">
<short></short>
<descr>
</descr>
<seealso>
<link id="TSpecialMonitor"/>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TAnalogSignalInterval.asi_Start">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TAnalogSignalInterval.asi_Stop">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- pointer type Visibility: default -->
<element name="PSpecialMonitor">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- record type Visibility: default -->
<element name="TSpecialMonitor">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TSpecialMonitor.spm_Node">
<short></short>
</element>

<!-- variable Visibility: default -->
<element name="TSpecialMonitor.spm_Flags">
<short>Reserved, set to 0</short>
</element>

<!-- variable Visibility: default -->
<element name="TSpecialMonitor.do_monitor">
<short>Driver call vector - set up a video mode</short>
</element>

<!-- variable Visibility: default -->
<element name="TSpecialMonitor.reserved1">
<short>Private do not touch</short>
</element>

<!-- variable Visibility: default -->
<element name="TSpecialMonitor.reserved2">
<short>Private do not touch</short>
</element>

<!-- variable Visibility: default -->
<element name="TSpecialMonitor.reserved3">
<short>Private do not touch</short>
</element>

<!-- variable Visibility: default -->
<element name="TSpecialMonitor.hblank">
<short>Signal timings by themselves</short>
</element>

<!-- variable Visibility: default -->
<element name="TSpecialMonitor.vblank">
<short></short>
</element>

<!-- variable Visibility: default -->
<element name="TSpecialMonitor.hsync">
<short></short>
</element>

<!-- variable Visibility: default -->
<element name="TSpecialMonitor.vsync">
<short></short>
</element>

<!-- pointer type Visibility: default -->
<element name="PMonitorSpec">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- record type Visibility: default -->
<element name="TMonitorSpec">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TMonitorSpec.ms_Node">
<short></short>
</element>

<!-- variable Visibility: default -->
<element name="TMonitorSpec.ms_Flags">
<short>Monitor Flags: (MSF_*)</short>
</element>

<!-- variable Visibility: default -->
<element name="TMonitorSpec.ratioh">
<short></short>
</element>

<!-- variable Visibility: default -->
<element name="TMonitorSpec.ratiov">
<short></short>
</element>

<!-- variable Visibility: default -->
<element name="TMonitorSpec.total_rows">
<short>Total number of scanlines per frame</short>
</element>

<!-- variable Visibility: default -->
<element name="TMonitorSpec.total_colorclocks">
<short>Total number of color clocks per line (in 1/280 ns units)</short>
</element>

<!-- variable Visibility: default -->
<element name="TMonitorSpec.DeniseMaxDisplayColumn">
<short></short>
</element>

<!-- variable Visibility: default -->
<element name="TMonitorSpec.BeamCon0">
<short>Value for beamcon0 Amiga(tm) chipset register</short>
</element>

<!-- variable Visibility: default -->
<element name="TMonitorSpec.min_row">
<short></short>
</element>

<!-- variable Visibility: default -->
<element name="TMonitorSpec.ms_Special">
<short>Synchro signal timings description (optional)</short>
</element>

<!-- variable Visibility: default -->
<element name="TMonitorSpec.ms_OpenCount">
<short>Driver open count</short>
</element>

<!-- variable Visibility: default -->
<element name="TMonitorSpec.ms_transform">
<short></short>
</element>

<!-- variable Visibility: default -->
<element name="TMonitorSpec.ms_translate">
<short></short>
</element>

<!-- variable Visibility: default -->
<element name="TMonitorSpec.ms_scale">
<short></short>
</element>

<!-- variable Visibility: default -->
<element name="TMonitorSpec.ms_xoffset">
<short></short>
</element>

<!-- variable Visibility: default -->
<element name="TMonitorSpec.ms_yoffset">
<short></short>
</element>

<!-- variable Visibility: default -->
<element name="TMonitorSpec.ms_LegalView">
<short>Allowed range for view positioning (right-bottom position included)</short>
</element>

<!-- variable Visibility: default -->
<element name="TMonitorSpec.ms_maxoscan">
<short>maximum legal overscan</short>
</element>

<!-- variable Visibility: default -->
<element name="TMonitorSpec.ms_videoscan">
<short>video display overscan</short>
</element>

<!-- variable Visibility: default -->
<element name="TMonitorSpec.DeniseMinDisplayColumn">
<short></short>
</element>

<!-- variable Visibility: default -->
<element name="TMonitorSpec.DisplayCompatible">
<short></short>
</element>

<!-- variable Visibility: default -->
<element name="TMonitorSpec.DisplayInfoDataBase">
<short></short>
</element>

<!-- variable Visibility: default -->
<element name="TMonitorSpec.DisplayInfoDataBaseSemaphore">
<short></short>
</element>

<!-- variable Visibility: default -->
<element name="TMonitorSpec.ms_MrgCop">
<short></short>
</element>

<!-- variable Visibility: default -->
<element name="TMonitorSpec.ms_LoadView">
<short></short>
</element>

<!-- variable Visibility: default -->
<element name="TMonitorSpec.ms_KillView">
<short></short>
</element>

<!-- constant Visibility: default -->
<element name="MSB_REQUEST_NTSC">
<short>Flag bit for <link id="TMonitorSpec"/>.ms_Flags</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="MSB_REQUEST_PAL">
<short>Flag bit for <link id="TMonitorSpec"/>.ms_Flags></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="MSB_REQUEST_SPECIAL">
<short>Flag bit for <link id="TMonitorSpec"/>.ms_Flags></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="MSB_REQUEST_A2024">
<short>Flag bit for <link id="TMonitorSpec"/>.ms_Flags></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="MSB_DOUBLE_SPRITES">
<short>Flag bit for <link id="TMonitorSpec"/>.ms_Flags></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="MSF_REQUEST_NTSC">
<short>Flag value for <link id="TMonitorSpec"/>.ms_Flags></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="MSF_REQUEST_PAL">
<short>Flag value for <link id="TMonitorSpec"/>.ms_Flags></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="MSF_REQUEST_SPECIAL">
<short>Flag value for <link id="TMonitorSpec"/>.ms_Flags></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="MSF_REQUEST_A2024">
<short>Flag value for <link id="TMonitorSpec"/>.ms_Flags></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="MSF_DOUBLE_SPRITES">
<short>Flag value for <link id="TMonitorSpec"/>.ms_Flags></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="TO_MONITOR">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="FROM_MONITOR">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="STANDARD_XOFFSET">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="STANDARD_YOFFSET">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="REQUEST_NTSC">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="REQUEST_PAL">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="REQUEST_SPECIAL">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="REQUEST_A2024">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="DEFAULT_MONITOR_NAME">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="NTSC_MONITOR_NAME">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="PAL_MONITOR_NAME">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="VGA_MONITOR_NAME">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="STANDARD_MONITOR_MASK">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="STANDARD_NTSC_ROWS">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="MIN_NTSC_ROW">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="STANDARD_PAL_ROWS">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="MIN_PAL_ROW">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="STANDARD_NTSC_BEAMCON">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="STANDARD_PAL_BEAMCON">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SPECIAL_BEAMCON">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="STANDARD_DENISE_MIN">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="STANDARD_DENISE_MAX">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="STANDARD_COLORCLOCKS">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="STANDARD_VIEW_X">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="STANDARD_VIEW_Y">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="STANDARD_HBSTRT">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="STANDARD_HSSTRT">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="STANDARD_HSSTOP">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="STANDARD_HBSTOP">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="STANDARD_VBSTRT">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="STANDARD_VSSTRT">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="STANDARD_VSSTOP">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="STANDARD_VBSTOP">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="VGA_COLORCLOCKS">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="VGA_TOTAL_ROWS">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="VGA_DENISE_MIN">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="MIN_VGA_ROW">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="VGA_HBSTRT">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="VGA_HSSTRT">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="VGA_HSSTOP">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="VGA_HBSTOP">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="VGA_VBSTRT">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="VGA_VSSTRT">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="VGA_VSSTOP">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="VGA_VBSTOP">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="BROADCAST_HBSTRT">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="BROADCAST_HSSTRT">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="BROADCAST_HSSTOP">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="BROADCAST_HBSTOP">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="BROADCAST_VBSTRT">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="BROADCAST_VSSTRT">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="BROADCAST_VSSTOP">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="BROADCAST_VBSTOP">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="BROADCAST_BEAMCON">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="RATIO_FIXEDPART">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="RATIO_UNITY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- pointer type Visibility: default -->
<element name="PCopList">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- pointer type Visibility: default -->
<element name="PViewPort">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- pointer type Visibility: default -->
<element name="PColorMap">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- pointer type Visibility: default -->
<element name="PRasInfo">
<short>Used in <link id="TViewPort"/></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- record type Visibility: default -->
<element name="TRasInfo">
<short>Used in <link id="TViewPort"/></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TRasInfo.Next">
<short>Used for Dual playfield</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TRasInfo.BitMap">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TRasInfo.RxOffset">
<short>X Scroll offset in this BitMap</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TRasInfo.RyOffset">
<short>Y Scroll offset in this BitMap</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- pointer type Visibility: default -->
<element name="PCprList">
<short>Structure of cprlist that points to list that hardware actually executes</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- record type Visibility: default -->
<element name="TCprList">
<short>Structure of cprlist that points to list that hardware actually executes</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TCprList.Next">
<short></short>
</element>

<!-- variable Visibility: default -->
<element name="TCprList.Start">
<short>start of copper list</short>
</element>

<!-- variable Visibility: default -->
<element name="TCprList.MaxCount">
<short>Number of long instructions</short>
</element>

<!-- pointer type Visibility: default -->
<element name="PUCopList">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- record type Visibility: default -->
<element name="TUCopList">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TUCopList.Next">
<short></short>
</element>

<!-- variable Visibility: default -->
<element name="TUCopList.FirstCopList">
<short>head node of this copper list</short>
</element>

<!-- variable Visibility: default -->
<element name="TUCopList.CopList">
<short>Node in use</short>
</element>

<!-- pointer type Visibility: default -->
<element name="PCopInit">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- record type Visibility: default -->
<element name="TCopInit">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TCopInit.vsync_hblank">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TCopInit.diagstrt">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TCopInit.fm0">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TCopInit.diwstart">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TCopInit.bplcon2">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TCopInit.sprfix">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TCopInit.sprstrtup">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TCopInit.wait14">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TCopInit.norm_hblank">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TCopInit.jump">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TCopInit.wait_forever">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TCopInit.sprstop">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- pointer type Visibility: default -->
<element name="PView">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- record type Visibility: default -->
<element name="TView">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TView.ViewPort">
<short></short>
</element>

<!-- variable Visibility: default -->
<element name="TView.LOFCprList">
<short>Used for interlaced and noninterlaced</short>
</element>

<!-- variable Visibility: default -->
<element name="TView.SHFCprList">
<short>Only used during interlace</short>
</element>

<!-- variable Visibility: default -->
<element name="TView.DyOffset">
<short>For complete View positioning offsets are +- adjustments to standard #s</short>
</element>

<!-- variable Visibility: default -->
<element name="TView.DxOffset">
<short>For complete View positioning offsets are +- adjustments to standard #s</short>
</element>

<!-- variable Visibility: default -->
<element name="TView.Modes">
<short>such as <b>INTERLACE</b>, <b>GENLOC</b></short>
</element>

<!-- pointer type Visibility: default -->
<element name="PViewExtra">
<short>Additional data for Amiga(tm) chipset. Not used by other hardware. these structures are obtained via GfxNew and disposed by GfxFree</short>
</element>

<!-- record type Visibility: default -->
<element name="TViewExtra">
<short>Additional data for Amiga(tm) chipset. Not used by other hardware. these structures are obtained via GfxNew and disposed by GfxFree</short>
</element>

<!-- variable Visibility: default -->
<element name="TViewExtra.n">
<short>Common Header</short>
</element>

<!-- variable Visibility: default -->
<element name="TViewExtra.View">
<short>View it relates to</short>
</element>

<!-- variable Visibility: default -->
<element name="TViewExtra.Monitor">
<short>Monitor used for displaying this View</short>
</element>

<!-- variable Visibility: default -->
<element name="TViewExtra.TopLine">
<short></short>
</element>

<!-- pointer type Visibility: default -->
<element name="PCopIns">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- record type Visibility: default -->
<element name="TCopIns">
<short>Copper structure</short>
</element>

<!-- variable Visibility: default -->
<element name="TCopIns.OpCode">
<short>0 = move, 1 = wait</short>
</element>

<!-- variable Visibility: default -->
<element name="TCopIns.NxtList">
<short></short>
</element>

<!-- variable Visibility: default -->
<element name="TCopIns.VWaitPos">
<short>vertical wait position</short>
</element>

<!-- variable Visibility: default -->
<element name="TCopIns.DestAddr">
<short>destination Pointer</short>
</element>

<!-- variable Visibility: default -->
<element name="TCopIns.HWaitPos">
<short>horizontal wait position</short>
</element>

<!-- variable Visibility: default -->
<element name="TCopIns.DestData">
<short>data to send</short>
</element>

<!-- record type Visibility: default -->
<element name="TCopList">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TCopList.Next">
<short>Next block for this copper list</short>
</element>

<!-- variable Visibility: default -->
<element name="TCopList._CopList">
<short>System use</short>
</element>

<!-- variable Visibility: default -->
<element name="TCopList._ViewPort">
<short>System use</short>
</element>

<!-- variable Visibility: default -->
<element name="TCopList.CopIns">
<short>start of this block</short>
</element>

<!-- variable Visibility: default -->
<element name="TCopList.CopPtr">
<short>intermediate ptr</short>
</element>

<!-- variable Visibility: default -->
<element name="TCopList.CopLStart">
<short>mrgcop fills this in for Long Frame</short>
</element>

<!-- variable Visibility: default -->
<element name="TCopList.CopSStart">
<short>mrgcop fills this in for Longint Frame</short>
</element>

<!-- variable Visibility: default -->
<element name="TCopList.Count">
<short>intermediate counter</short>
</element>

<!-- variable Visibility: default -->
<element name="TCopList.MaxCount">
<short>max # of copins for this block</short>
</element>

<!-- variable Visibility: default -->
<element name="TCopList.DyOffset">
<short>offset this copper list vertical waits</short>
</element>

<!-- variable Visibility: default -->
<element name="TCopList.SLRepeat">
<short></short>
</element>

<!-- variable Visibility: default -->
<element name="TCopList.Flags">
<short></short>
</element>

<!-- record type Visibility: default -->
<element name="TViewPort">
<short>Describes a displayed bitmap (or logical screen). Copperlists are relevant only to Amiga(tm) chipset,
 for other hardware they are nil.</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TViewPort.Next">
<short></short>
</element>

<!-- variable Visibility: default -->
<element name="TViewPort.ColorMap">
<short>Table of colors for this viewport if this is nil, <link id="MakeVPort"/> assumes default values</short>
</element>

<!-- variable Visibility: default -->
<element name="TViewPort.DspIns">
<short>user by MakeView, Preliminary partial display copperlist</short>
</element>

<!-- variable Visibility: default -->
<element name="TViewPort.SprIns">
<short>used by sprite stuff, Preliminary partial sprite copperlist</short>
</element>

<!-- variable Visibility: default -->
<element name="TViewPort.ClrIns">
<short>used by sprite stuff</short>
</element>

<!-- variable Visibility: default -->
<element name="TViewPort.UCopIns">
<short>User copper list</short>
</element>

<!-- variable Visibility: default -->
<element name="TViewPort.DWidth">
<short>Width of currently displayed part in pixels</short>
</element>

<!-- variable Visibility: default -->
<element name="TViewPort.DHeight">
<short>Height of currently displayed part in pixels</short>
</element>

<!-- variable Visibility: default -->
<element name="TViewPort.DxOffset">
<short>Displacement from the (0, 0) of the physical screen to (0, 0) of the raster</short>
</element>

<!-- variable Visibility: default -->
<element name="TViewPort.DyOffset">
<short></short>
</element>

<!-- variable Visibility: default -->
<element name="TViewPort.Modes">
<short>The same as in View</short>
</element>

<!-- variable Visibility: default -->
<element name="TViewPort.SpritePriorities">
<short>used by makevp</short>
</element>

<!-- variable Visibility: default -->
<element name="TViewPort.reserved">
<short></short>
</element>

<!-- variable Visibility: default -->
<element name="TViewPort.RasInfo">
<short>Playfield specification</short>
</element>

<!-- pointer type Visibility: default -->
<element name="PViewPortExtra">
<short>Holds additional information about the ViewPort it is associated with
this structure is obtained via <link id="GfxNew">GfxNew()</link> and
disposed by <link id="GfxFree">GfxFree()</link></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- record type Visibility: default -->
<element name="TViewPortExtra">
<short>Holds additional information about the ViewPort it is associated with
this structure is obtained via <link id="GfxNew">GfxNew()</link> and
disposed by <link id="GfxFree">GfxFree()</link></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TViewPortExtra.n">
<short></short>
</element>

<!-- variable Visibility: default -->
<element name="TViewPortExtra.ViewPort">
<short>ViewPort it relates to (backward link)</short>
</element>

<!-- variable Visibility: default -->
<element name="TViewPortExtra.DisplayClip">
<short>makevp display clipping information, Total size of displayable part</short>
</element>

<!-- variable Visibility: default -->
<element name="TViewPortExtra.VecTable">
<short></short>
</element>

<!-- variable Visibility: default -->
<element name="TViewPortExtra.DriverData">
<short>Private storage for display drivers. Do not touch!</short>
</element>

<!-- variable Visibility: default -->
<element name="TViewPortExtra.Flags">
<short>Flags (VPXF_*)</short>
</element>

<!-- variable Visibility: default -->
<element name="TViewPortExtra.Origin">
<short>First visible point relative to the DClip. One for each possible playfield.</short>
</element>

<!-- variable Visibility: default -->
<element name="TViewPortExtra.cop1ptr">
<short>private</short>
</element>

<!-- variable Visibility: default -->
<element name="TViewPortExtra.cop2ptr">
<short>private</short>
</element>

<!-- pointer type Visibility: default -->
<element name="PPaletteExtra">
<short>Structure controlling palette sharing</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- record type Visibility: default -->
<element name="TPaletteExtra">
<short>Structure controlling palette sharing</short>
<descr>Structure may be extended so watch out!
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TPaletteExtra.pe_Semaphore">
<short>shared semaphore for arbitration</short>
</element>

<!-- variable Visibility: default -->
<element name="TPaletteExtra.pe_FirstFree">
<short>private</short>
</element>

<!-- variable Visibility: default -->
<element name="TPaletteExtra.pe_NFree">
<short>number of free colors</short>
</element>

<!-- variable Visibility: default -->
<element name="TPaletteExtra.pe_FirstShared">
<short>private</short>
</element>

<!-- variable Visibility: default -->
<element name="TPaletteExtra.pe_NShared">
<short>private</short>
</element>

<!-- variable Visibility: default -->
<element name="TPaletteExtra.pe_RefCnt">
<short>private</short>
</element>

<!-- variable Visibility: default -->
<element name="TPaletteExtra.pe_AllocList">
<short>private</short>
</element>

<!-- variable Visibility: default -->
<element name="TPaletteExtra.pe_ViewPort">
<short>Back pointer to viewport</short>
</element>

<!-- variable Visibility: default -->
<element name="TPaletteExtra.pe_SharableColors">
<short>The number of sharable colors.</short>
</element>

<!-- record type Visibility: default -->
<element name="TColorMap">
<short>This structure is the primary storage for palette data.</short>
<descr><p>
  Color data itself is stored in two tables: ColorTable and LowColorBits.
  These fields are actually pointer to arrays of Words. Each Word corresponds
  to one color.
  Number of Words in these array is equal to Count value in this structure.
  ColorTable stores upper nibbles of RGB values, LowColorBits stores low nibbles.</p>
<p>Example:</p>
<code>
   color number 4, value: $00ABCDEF
   ColorTable[4] := $0ACE,
   LowColorBits[4] := $0BDF
 </code>
 <p>
  SpriteBase fields keep bank number, not a color number. On m68k Amiga colors are divided into
  banks, 16 per each. So bank number is color number divided by 16. Base color is a number which
  is added to all colors of the sprite in order to look up the actual palette entry.
  Amiga may run on different hardware where sprites may have base colors that do not divide by 16.
  In order to cover this bank numbers have a form: ((c and $0F) shl 8 ) or (c shr 4), where c is actual
  color number (i. e. remainder is stored in a high byte of Word).</p>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TColorMap.Flags">
<short>Colormap flags (COLORMAP_*)</short>
</element>

<!-- variable Visibility: default -->
<element name="TColorMap.Type_">
<short>Colormap type, reflects version (COLORMAP_TYPE_)</short>
</element>

<!-- variable Visibility: default -->
<element name="TColorMap.Count">
<short>Number of palette entries</short>
</element>

<!-- variable Visibility: default -->
<element name="TColorMap.ColorTable">
<short>Table of high nibbles of color values (see description above)</short>
</element>

<!-- variable Visibility: default -->
<element name="TColorMap.cm_vpe">
<short>ViewPortExtra, for faster access</short>
</element>

<!-- variable Visibility: default -->
<element name="TColorMap.LowColorBits">
<short>Table of low nibbles of color values</short>
</element>

<!-- variable Visibility: default -->
<element name="TColorMap.TransparencyPlane">
<short></short>
</element>

<!-- variable Visibility: default -->
<element name="TColorMap.SpriteResolution">
<short></short>
</element>

<!-- variable Visibility: default -->
<element name="TColorMap.SpriteResDefault">
<short></short>
</element>

<!-- variable Visibility: default -->
<element name="TColorMap.AuxFlags">
<short>Additional flags (CMAF_*)</short>
</element>

<!-- variable Visibility: default -->
<element name="TColorMap.cm_vp">
<short>Points back to a ViewPort this colormap belongs to</short>
</element>

<!-- variable Visibility: default -->
<element name="TColorMap.NormalDisplayInfo">
<short></short>
</element>

<!-- variable Visibility: default -->
<element name="TColorMap.CoerceDisplayInfo">
<short></short>
</element>

<!-- variable Visibility: default -->
<element name="TColorMap.cm_batch_items">
<short></short>
</element>

<!-- variable Visibility: default -->
<element name="TColorMap.VPModeID">
<short></short>
</element>

<!-- variable Visibility: default -->
<element name="TColorMap.PalExtra">
<short>Structure controlling palette sharing</short>
</element>

<!-- variable Visibility: default -->
<element name="TColorMap.SpriteBase_Even">
<short>Color bank for even sprites</short>
</element>

<!-- variable Visibility: default -->
<element name="TColorMap.SpriteBase_Odd">
<short>The same for odd sprites</short>
</element>

<!-- variable Visibility: default -->
<element name="TColorMap.Bp_0_base">
<short></short>
</element>

<!-- variable Visibility: default -->
<element name="TColorMap.Bp_1_base">
<short></short>
</element>

<!-- constant Visibility: default -->
<element name="CMF_CMTRANS">
<short>Flag Bit  for <link id="TColorMap"/>.Flags</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="COLORMAP_TRANSPARENCY">
<short>Flag value for <link id="TColorMap"/>.Flags</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="CMF_CPTRANS">
<short>Flag Bit  for <link id="TColorMap"/>.Flags</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="COLORPLANE_TRANSPARENCY">
<short>Flag value for <link id="TColorMap"/>.Flags</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="CMF_BRDRBLNK">
<short>Flag Bit  for <link id="TColorMap"/>.Flags</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="BORDER_BLANKING">
<short>Flag value for <link id="TColorMap"/>.Flags</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="CMF_BRDNTRAN">
<short>Flag Bit  for <link id="TColorMap"/>.Flags</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="BORDER_NOTRANSPARENCY">
<short>Flag value for <link id="TColorMap"/>.Flags</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="VIDEOCONTROL_BATCH">
<short>Flag value for <link id="TColorMap"/>.Flags</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="USER_COPPER_CLIP">
<short>Flag value for <link id="TColorMap"/>.Flags</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="CMF_BRDRSPRT">
<short>Flag Bit  for <link id="TColorMap"/>.Flags</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="BORDERSPRITES">
<short>Flag value for <link id="TColorMap"/>.Flags</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="COLORMAP_TYPE_V1_2">
<short>Colormap type for <link id="TColorMap"/>.Type_ WB 1.2</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="COLORMAP_TYPE_V36">
<short>Colormap type for <link id="TColorMap"/>.Type_ V36</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="COLORMAP_TYPE_V39">
<short>Colormap type for <link id="TColorMap"/>.Type_ V39</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SPRITERESN_ECS">
<short>Resolution for <link id="TColorMap"/>.SpriteResolution</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SPRITERESN_140NS">
<short>Resolution for <link id="TColorMap"/>.SpriteResolution</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SPRITERESN_70NS">
<short>Resolution for <link id="TColorMap"/>.SpriteResolution</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SPRITERESN_35NS">
<short>Resolution for <link id="TColorMap"/>.SpriteResolution</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SPRITERESN_DEFAULT">
<short>Resolution for <link id="TColorMap"/>.SpriteResolution</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="COPPER_MOVE">
<short>Copper command. Pseudo opcode for move #XXXX,dir</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="COPPER_WAIT">
<short>Copper command. Pseudo opcode for wait y,x</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="CPRNXTBUF">
<short>Copper command. Continue processing with next buffer</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="CPR_NT_SYS">
<short>Copper command. Copper user instruction only</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="CPR_NT_SHT">
<short>Copper command. Copper instruction only for long frames</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="CPR_NT_LOF">
<short>Copper command. Copper instruction only for Longint frames</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="GENLOCK_VIDEO">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="LACE">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SUPERHIRES">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="PFBA">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="EXTRA_HALFBRITE">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="GENLOCK_AUDIO">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="DUALPF">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="HAM">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="EXTendED_MODE">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="VP_HIDE">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SPRITES">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="HIRES">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="EXTend_VSTRUCT">
<short>Unused bit in Modes field of View <link id="TViewPort"/></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="CMAB_FULLPALETTE">
<short>Flag bit for <link id="TColorMap"/>.AuxFlags </short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="CMAF_FULLPALETTE">
<short>Flag value for <link id="TColorMap"/>.AuxFlags </short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="CMAB_NO_INTERMED_UPDATE">
<short>Flag bit for <link id="TColorMap"/>.AuxFlags </short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="CMAF_NO_INTERMED_UPDATE">
<short>Flag value for <link id="TColorMap"/>.AuxFlags </short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="CMAB_NO_COLOR_LOAD">
<short>Flag bit for <link id="TColorMap"/>.AuxFlags </short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="CMAF_NO_COLOR_LOAD">
<short>Flag value for <link id="TColorMap"/>.AuxFlags </short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="CMAB_DUALPF_DISABLE">
<short>Flag bit for <link id="TColorMap"/>.AuxFlags </short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="CMAF_DUALPF_DISABLE">
<short>Flag value for <link id="TColorMap"/>.AuxFlags </short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="PENB_EXCLUSIVE">
<short>Flag bit for <link id="ObtainPen">ObtainPen()</link></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="PENB_NO_SETCOLOR">
<short>Flag bit for <link id="ObtainPen">ObtainPen()</link></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="PENF_EXCLUSIVE">
<short>Flag value for <link id="ObtainPen">ObtainPen()</link></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="PENF_NO_SETCOLOR">
<short>Flag value for <link id="ObtainPen">ObtainPen()</link></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="PEN_EXCLUSIVE">
<short>Obsolete name for <link id="PENF_EXCLUSIVE"/></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="PEN_NO_SETCOLOR">
<short>Obsolete name for <link id="PENF_NO_SETCOLOR"/></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="PRECISION_EXACT">
<short>Precision value for <link id="ObtainBestPenA">ObtainBestPenA()</link></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="PRECISION_IMAGE">
<short>Precision value for <link id="ObtainBestPenA">ObtainBestPenA()</link></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="PRECISION_ICON">
<short>Precision value for <link id="ObtainBestPenA">ObtainBestPenA()</link></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="PRECISION_GUI">
<short>Precision value for <link id="ObtainBestPenA">ObtainBestPenA()</link></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="OBP_Precision">
<short>Tag for <link id="ObtainBestPenA">ObtainBestPenA()</link> Set the pen precision (PRECISION_*)</short>
<descr>Specifies the desired precision for the
match. Should be <link id="PRECISION_GUI"/>, <link id="PRECISION_ICON"/>, or
<link id="PRECISION_IMAGE"/> or <link id="PRECISION_EXACT"/>.
Defaults to <link id="PRECISION_IMAGE"/>.
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="OBP_FailIfBad">
<short>Tag for <link id="ObtainBestPenA">ObtainBestPenA()</link> If <var>True</var> and Precision is <link id="PRECISION_EXACT"/>
and no exact color can be found or allocated the function will fail. </short>
<descr>Specifies that you want <link id="ObtainBestPenA">ObtainBestPenA()</link> to return
a failure value if there is not a color within the
given tolerance, instead of returning the closest color.
With OBP_FailIfBad = False, <link id="ObtainBestPenA">ObtainBestPenA()</link> will only fail
if the ViewPort contains no sharable colors.
Defaults to False.
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="MVP_OK">
<short><link id="MakeVPort">MakeVPort()</link> Error code: No Error</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="MVP_NO_MEM">
<short><link id="MakeVPort">MakeVPort()</link> Error code: insufficient memory for intermediate workspace</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="MVP_NO_VPE">
<short><link id="MakeVPort">MakeVPort()</link> Error code: ViewPort does not have a ViewPortExtra, and insufficient memory to allocate a temporary one.</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="MVP_NO_DSPINS">
<short><link id="MakeVPort">MakeVPort()</link> Error code: insufficient memory for intermidiate copper  instructions.</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="MVP_NO_DISPLAY">
<short><link id="MakeVPort">MakeVPort()</link> Error code: BitMap data is misaligned for this viewport's
 mode and depth - see <link id="AllocBitMap">AllocBitMap()</link></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="MVP_OFF_BOTTOM">
<short><link id="MakeVPort">MakeVPort()</link> Error code: PRIVATE - you will never see this.</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="MCOP_OK">
<short><link id="MrgCop">MrgCop()</link> Error code: No Error</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="MCOP_NO_MEM">
<short><link id="MrgCop">MrgCop()</link> Error code: insufficient memory to allocate the system copper lists.</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="MCOP_NOP">
<short><link id="MrgCop">MrgCop()</link> Error code: Can not merge any copper lists (eg, no ViewPorts in the list, or all marked as hidden).</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- pointer type Visibility: default -->
<element name="PDBufInfo">
<short>Pointer to a double buffer structure</short>
<descr>
</descr>
<seealso>
<link id="AllocDBufInfo"/>
<link id="ChangeVPBitMap"/>
<link id="FreeDBufInfo"/>
</seealso>
</element>

<!-- record type Visibility: default -->
<element name="TDBufInfo">
<short>Double buffer structure</short>
<descr>
</descr>
<seealso>
<link id="AllocDBufInfo"/>
<link id="ChangeVPBitMap"/>
<link id="FreeDBufInfo"/>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TDBufInfo.dbi_Link1">
<short></short>
</element>

<!-- variable Visibility: default -->
<element name="TDBufInfo.dbi_Count1">
<short></short>
</element>

<!-- variable Visibility: default -->
<element name="TDBufInfo.dbi_SafeMessage">
<short>Replied to when safe to write to old bitmap</short>
</element>

<!-- variable Visibility: default -->
<element name="TDBufInfo.dbi_UserData1">
<short>First user data</short>
</element>

<!-- variable Visibility: default -->
<element name="TDBufInfo.dbi_Link2">
<short></short>
</element>

<!-- variable Visibility: default -->
<element name="TDBufInfo.dbi_Count2">
<short></short>
</element>

<!-- variable Visibility: default -->
<element name="TDBufInfo.dbi_DispMessage">
<short>Replied to when new bitmap has been displayed at least once</short>
</element>

<!-- variable Visibility: default -->
<element name="TDBufInfo.dbi_UserData2">
<short>Second user data</short>
</element>

<!-- variable Visibility: default -->
<element name="TDBufInfo.dbi_MatchLong">
<short></short>
</element>

<!-- variable Visibility: default -->
<element name="TDBufInfo.dbi_CopPtr1">
<short></short>
</element>

<!-- variable Visibility: default -->
<element name="TDBufInfo.dbi_CopPtr2">
<short></short>
</element>

<!-- variable Visibility: default -->
<element name="TDBufInfo.dbi_CopPtr3">
<short></short>
</element>

<!-- variable Visibility: default -->
<element name="TDBufInfo.dbi_BeamPos1">
<short></short>
</element>

<!-- variable Visibility: default -->
<element name="TDBufInfo.dbi_BeamPos2">
<short></short>
</element>

<!-- constant Visibility: default -->
<element name="INVALID_ID">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="MONITOR_ID_MASK">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="DEFAULT_MONITOR_ID">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="NTSC_MONITOR_ID">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="PAL_MONITOR_ID">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="LORES_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="LORESLACE_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="LORESSDBL_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="EXTRAHALFBRITE_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="EXTRAHALFBRITELACE_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="LORESEHBSDBL_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="LORESDPF_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="LORESLACEDPF_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="LORESDPF2_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="LORESLACEDPF2_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="HAM_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="HAMLACE_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="LORESHAMSDBL_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="HIRES_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="HIRESLACE_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SUPER_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SUPERLACE_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="HIRESEHB_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="HIRESEHBLACE_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SUPEREHB_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SUPEREHBLACE_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="HIRESDPF_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="HIRESLACEDPF_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SUPERDPF_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SUPERLACEDPF_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="HIRESDPF2_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="HIRESLACEDPF2_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SUPERDPF2_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SUPERLACEDPF2_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="HIRESHAM_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="HIRESHAMLACE_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="HIRESHAMSDBL_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SUPERHAM_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SUPERHAMLACE_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="VGA_MONITOR_ID">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="VGAEXTRALORES_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="VGALORES_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="VGAPRODUCT_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="VGAHAM_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="VGAEXTRALORESLACE_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="VGALORESLACE_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="VGAPRODUCTLACE_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="VGAHAMLACE_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="VGAEXTRALORESDPF_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="VGALORESDPF_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="VGAPRODUCTDPF_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="VGAEXTRALORESLACEDPF_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="VGALORESLACEDPF_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="VGAPRODUCTLACEDPF_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="VGAEXTRALORESDPF2_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="VGALORESDPF2_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="VGAPRODUCTDPF2_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="VGAEXTRALORESLACEDPF2_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="VGALORESLACEDPF2_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="VGAPRODUCTLACEDPF2_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="VGAEXTRAHALFBRITE_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="VGAEXTRAHALFBRITELACE_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="VGAPRODUCTHAM_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="VGALORESHAM_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="VGAEXTRALORESHAM_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="VGAPRODUCTHAMLACE_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="VGALORESHAMLACE_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="VGAEXTRALORESHAMLACE_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="VGAEXTRALORESEHB_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="VGAEXTRALORESEHBLACE_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="VGALORESEHB_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="VGALORESEHBLACE_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="VGAEHB_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="VGAEHBLACE_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="VGAEXTRALORESDBL_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="VGALORESDBL_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="VGAPRODUCTDBL_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="VGAEXTRALORESHAMDBL_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="VGALORESHAMDBL_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="VGAPRODUCTHAMDBL_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="VGAEXTRALORESEHBDBL_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="VGALORESEHBDBL_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="VGAPRODUCTEHBDBL_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="A2024_MONITOR_ID">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="A2024TENHERTZ_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="A2024FIFTEENHERTZ_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="PROTO_MONITOR_ID">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="EURO72_MONITOR_ID">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="EURO72EXTRALORES_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="EURO72LORES_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="EURO72PRODUCT_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="EURO72HAM_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="EURO72EXTRALORESLACE_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="EURO72LORESLACE_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="EURO72PRODUCTLACE_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="EURO72HAMLACE_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="EURO72EXTRALORESDPF_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="EURO72LORESDPF_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="EURO72PRODUCTDPF_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="EURO72EXTRALORESLACEDPF_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="EURO72LORESLACEDPF_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="EURO72PRODUCTLACEDPF_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="EURO72EXTRALORESDPF2_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="EURO72LORESDPF2_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="EURO72PRODUCTDPF2_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="EURO72EXTRALORESLACEDPF2_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="EURO72LORESLACEDPF2_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="EURO72PRODUCTLACEDPF2_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="EURO72EXTRAHALFBRITE_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="EURO72EXTRAHALFBRITELACE_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="EURO72PRODUCTHAM_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="EURO72PRODUCTHAMLACE_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="EURO72LORESHAM_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="EURO72LORESHAMLACE_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="EURO72EXTRALORESHAM_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="EURO72EXTRALORESHAMLACE_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="EURO72EXTRALORESEHB_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="EURO72EXTRALORESEHBLACE_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="EURO72LORESEHB_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="EURO72LORESEHBLACE_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="EURO72EHB_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="EURO72EHBLACE_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="EURO72EXTRALORESDBL_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="EURO72LORESDBL_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="EURO72PRODUCTDBL_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="EURO72EXTRALORESHAMDBL_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="EURO72LORESHAMDBL_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="EURO72PRODUCTHAMDBL_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="EURO72EXTRALORESEHBDBL_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="EURO72LORESEHBDBL_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="EURO72PRODUCTEHBDBL_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="EURO36_MONITOR_ID">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SUPER72_MONITOR_ID">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SUPER72LORESDBL_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SUPER72HIRESDBL_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SUPER72SUPERDBL_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SUPER72LORESHAMDBL_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SUPER72HIRESHAMDBL_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SUPER72SUPERHAMDBL_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SUPER72LORESEHBDBL_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SUPER72HIRESEHBDBL_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SUPER72SUPEREHBDBL_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="DBLNTSC_MONITOR_ID">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="DBLNTSCLORES_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="DBLNTSCLORESFF_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="DBLNTSCLORESHAM_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="DBLNTSCLORESHAMFF_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="DBLNTSCLORESEHB_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="DBLNTSCLORESEHBFF_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="DBLNTSCLORESLACE_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="DBLNTSCLORESHAMLACE_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="DBLNTSCLORESEHBLACE_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="DBLNTSCLORESDPF_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="DBLNTSCLORESDPFFF_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="DBLNTSCLORESDPFLACE_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="DBLNTSCLORESDPF2_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="DBLNTSCLORESDPF2FF_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="DBLNTSCLORESDPF2LACE_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="DBLNTSCHIRES_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="DBLNTSCHIRESFF_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="DBLNTSCHIRESHAM_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="DBLNTSCHIRESHAMFF_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="DBLNTSCHIRESLACE_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="DBLNTSCHIRESHAMLACE_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="DBLNTSCHIRESEHB_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="DBLNTSCHIRESEHBFF_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="DBLNTSCHIRESEHBLACE_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="DBLNTSCHIRESDPF_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="DBLNTSCHIRESDPFFF_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="DBLNTSCHIRESDPFLACE_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="DBLNTSCHIRESDPF2_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="DBLNTSCHIRESDPF2FF_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="DBLNTSCHIRESDPF2LACE_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="DBLNTSCEXTRALORES_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="DBLNTSCEXTRALORESHAM_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="DBLNTSCEXTRALORESEHB_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="DBLNTSCEXTRALORESDPF_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="DBLNTSCEXTRALORESDPF2_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="DBLNTSCEXTRALORESFF_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="DBLNTSCEXTRALORESHAMFF_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="DBLNTSCEXTRALORESEHBFF_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="DBLNTSCEXTRALORESDPFFF_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="DBLNTSCEXTRALORESDPF2FF_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="DBLNTSCEXTRALORESLACE_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="DBLNTSCEXTRALORESHAMLACE_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="DBLNTSCEXTRALORESEHBLACE_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="DBLNTSCEXTRALORESDPFLACE_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="DBLNTSCEXTRALORESDPF2LACE_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="DBLPAL_MONITOR_ID">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="DBLPALLORES_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="DBLPALLORESFF_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="DBLPALLORESHAM_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="DBLPALLORESHAMFF_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="DBLPALLORESEHB_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="DBLPALLORESEHBFF_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="DBLPALLORESLACE_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="DBLPALLORESHAMLACE_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="DBLPALLORESEHBLACE_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="DBLPALLORESDPF_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="DBLPALLORESDPFFF_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="DBLPALLORESDPFLACE_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="DBLPALLORESDPF2_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="DBLPALLORESDPF2FF_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="DBLPALLORESDPF2LACE_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="DBLPALHIRES_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="DBLPALHIRESFF_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="DBLPALHIRESHAM_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="DBLPALHIRESHAMFF_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="DBLPALHIRESLACE_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="DBLPALHIRESHAMLACE_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="DBLPALHIRESEHB_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="DBLPALHIRESEHBFF_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="DBLPALHIRESEHBLACE_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="DBLPALHIRESDPF_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="DBLPALHIRESDPFFF_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="DBLPALHIRESDPFLACE_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="DBLPALHIRESDPF2_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="DBLPALHIRESDPF2FF_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="DBLPALHIRESDPF2LACE_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="DBLPALEXTRALORES_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="DBLPALEXTRALORESHAM_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="DBLPALEXTRALORESEHB_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="DBLPALEXTRALORESDPF_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="DBLPALEXTRALORESDPF2_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="DBLPALEXTRALORESFF_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="DBLPALEXTRALORESHAMFF_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="DBLPALEXTRALORESEHBFF_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="DBLPALEXTRALORESDPFFF_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="DBLPALEXTRALORESDPF2FF_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="DBLPALEXTRALORESLACE_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="DBLPALEXTRALORESHAMLACE_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="DBLPALEXTRALORESEHBLACE_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="DBLPALEXTRALORESDPFLACE_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="DBLPALEXTRALORESDPF2LACE_KEY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="BIDTAG_DIPFMustHave">
<short>Tag for <link id="BestModeID">BestModeID()</link> mask of the DIPF_* flags the ModeID must have Default - 0</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="BIDTAG_DIPFMustNotHave">
<short>Tag for <link id="BestModeID">BestModeID()</link> mask of the DIPF_ flags the ModeID must not have Default - <link id="SPECIAL_FLAGS"/></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="BIDTAG_ViewPort">
<short>Tag for <link id="BestModeID">BestModeID()</link> ViewPort for which a ModeID is sought.  Default - nil</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="BIDTAG_NominalWidth">
<short>Tag for <link id="BestModeID">BestModeID()</link> Override the <link id="TViewPort"/>.Width. Default - SourceID NominalDimensionInfo or <link id="TViewPort"/>.DWidth or 640 in that order </short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="BIDTAG_NominalHeight">
<short>Tag for <link id="BestModeID">BestModeID()</link>  Override the <link id="TViewPort"/>.Height. Default - SourceID NominalDimensionInfo or <link id="TViewPort"/>.DHeight or 200 in that order </short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="BIDTAG_DesiredWidth">
<short>Tag for <link id="BestModeID">BestModeID()</link> Nominal Width of the returned ModeID. Default - same as Nominal</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="BIDTAG_DesiredHeight">
<short>Tag for <link id="BestModeID">BestModeID()</link> Nominal Height of the returned ModeID. Default - same as Nominal</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="BIDTAG_Depth">
<short>Tag for <link id="BestModeID">BestModeID()</link> ModeID must support this depth. Default - <link id="TViewPort"/>.RasInfo^.BitMap^.Depth or 1</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="BIDTAG_MonitorID">
<short>Tag for <link id="BestModeID">BestModeID()</link> ModeID must use this monitor. Default - use best monitor available</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="BIDTAG_SourceID">
<short>Tag for <link id="BestModeID">BestModeID()</link> Instead of a ViewPort. Default - VPModeID(vp) if <link id="BIDTAG_ViewPort"/> is specified, else leave the <link id="BIDTAG_DIPFMustHave"/> and <link id="BIDTAG_DIPFMustNotHave"/> values untouched.</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="BIDTAG_RedBits">
<short>Tag for <link id="BestModeID">BestModeID()</link> Match up from the DataBase default - 4</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="BIDTAG_BlueBits">
<short>Tag for <link id="BestModeID">BestModeID()</link> Match up from the DataBase default - 4</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="BIDTAG_GreenBits">
<short>Tag for <link id="BestModeID">BestModeID()</link> Match up from the DataBase default - 4</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="BIDTAG_GfxPrivate">
<short>Tag for <link id="BestModeID">BestModeID()</link> Private do not use</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- alias type Visibility: default -->
<element name="DisplayInfoHandle">
<short>The "public" handle to a <link id="TDisplayInfo">DisplayInfoRecord</link></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- pointer type Visibility: default -->
<element name="PQueryHeader">
<short>Header for <link id="TDisplayInfo"/></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- record type Visibility: default -->
<element name="TQueryHeader">
<short>Header for <link id="TDisplayInfo"/></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TQueryHeader.StructID">
<short>datachunk type identifiers</short>
</element>

<!-- variable Visibility: default -->
<element name="TQueryHeader.DisplayID">
<short>Copy of display record key</short>
</element>

<!-- variable Visibility: default -->
<element name="TQueryHeader.SkipID">
<short><link id="utility.TAG_SKIP"/></short>
</element>

<!-- variable Visibility: default -->
<element name="TQueryHeader.Length">
<short>Length of local data in double-longwords</short>
</element>

<!-- pointer type Visibility: default -->
<element name="PDisplayInfo">
<short>Pointer to informations about the display</short>
<descr>
</descr>
<seealso>
<link id="FindDisplayInfo"/>
<link id="GetDisplayInfoData"/>
</seealso>
</element>

<!-- record type Visibility: default -->
<element name="TDisplayInfo">
<short>Structure to hold informations about Display.</short>
<descr>
</descr>
<seealso>
<link id="FindDisplayInfo"/>
<link id="GetDisplayInfoData"/>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TDisplayInfo.Header">
<short></short>
</element>

<!-- variable Visibility: default -->
<element name="TDisplayInfo.NotAvailable">
<short>If 0 DisplayInfo available, else not available -> see Constants DI_AVAIL_*</short>
</element>

<!-- variable Visibility: default -->
<element name="TDisplayInfo.PropertyFlags">
<short>Properties of this mode (DIPF_*)</short>
</element>

<!-- variable Visibility: default -->
<element name="TDisplayInfo.Resolution">
<short>Ticks-per-pixel X/Y</short>
</element>

<!-- variable Visibility: default -->
<element name="TDisplayInfo.PixelSpeed">
<short>Approximation in nanoseconds</short>
</element>

<!-- variable Visibility: default -->
<element name="TDisplayInfo.NumStdSprites">
<short>Number of standard amiga sprites</short>
</element>

<!-- variable Visibility: default -->
<element name="TDisplayInfo.PaletteRange">
<short>Distinguishable shades available</short>
</element>

<!-- variable Visibility: default -->
<element name="TDisplayInfo.SpriteResolution">
<short>Standard sprite ticks-per-pixel X/Y</short>
</element>

<!-- variable Visibility: default -->
<element name="TDisplayInfo.pad">
<short></short>
</element>

<!-- variable Visibility: default -->
<element name="TDisplayInfo.RedBits">
<short>Number of bits for Red color</short>
</element>

<!-- variable Visibility: default -->
<element name="TDisplayInfo.GreenBits">
<short>Number of bits for Green color</short>
</element>

<!-- variable Visibility: default -->
<element name="TDisplayInfo.BlueBits">
<short>Number of bits for Blue color</short>
</element>

<!-- variable Visibility: default -->
<element name="TDisplayInfo.pad2">
<short></short>
</element>

<!-- variable Visibility: default -->
<element name="TDisplayInfo.Reserved">
<short>Terminator</short>
</element>

<!-- constant Visibility: default -->
<element name="DI_AVAIL_NOCHIPS">
<short>Availability for <link id="TDisplayInfo"/>.NotAvailable </short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="DI_AVAIL_NOMONITOR">
<short>Availability for <link id="TDisplayInfo"/>.NotAvailable</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="DI_AVAIL_NOTWITHGENLOCK">
<short>Availability for <link id="TDisplayInfo"/>.NotAvailable</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="DIPF_IS_LACE">
<short>Flag for <link id="TDisplayInfo"/>.PropertyFlags Interlace mode</short>
<descr>
</descr>
<seealso>
<link id="BIDTAG_DIPFMustHave"/>
<link id="BIDTAG_DIPFMustNotHave"/>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="DIPF_IS_DUALPF">
<short>Flag for <link id="TDisplayInfo"/>.PropertyFlags</short>
<descr>
</descr>
<seealso>
<link id="BIDTAG_DIPFMustHave"/>
<link id="BIDTAG_DIPFMustNotHave"/>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="DIPF_IS_PF2PRI">
<short>Flag for <link id="TDisplayInfo"/>.PropertyFlags</short>
<descr>
</descr>
<seealso>
<link id="BIDTAG_DIPFMustHave"/>
<link id="BIDTAG_DIPFMustNotHave"/>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="DIPF_IS_HAM">
<short>Flag for <link id="TDisplayInfo"/>.PropertyFlags HAM6/8 Mode</short>
<descr>
</descr>
<seealso>
<link id="BIDTAG_DIPFMustHave"/>
<link id="BIDTAG_DIPFMustNotHave"/>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="DIPF_IS_ECS">
<short>Flag for <link id="TDisplayInfo"/>.PropertyFlags Mode which needs ECS Chipset (SHIRES, VGA, AND PRODUCTIVITY) do not support attached sprites.</short>
<descr>
</descr>
<seealso>
<link id="BIDTAG_DIPFMustHave"/>
<link id="BIDTAG_DIPFMustNotHave"/>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="DIPF_IS_PAL">
<short>Flag for <link id="TDisplayInfo"/>.PropertyFlags PAL Mode</short>
<descr>
</descr>
<seealso>
<link id="BIDTAG_DIPFMustHave"/>
<link id="BIDTAG_DIPFMustNotHave"/>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="DIPF_IS_SPRITES">
<short>Flag for <link id="TDisplayInfo"/>.PropertyFlags</short>
<descr>
</descr>
<seealso>
<link id="BIDTAG_DIPFMustHave"/>
<link id="BIDTAG_DIPFMustNotHave"/>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="DIPF_IS_GENLOCK">
<short>Flag for <link id="TDisplayInfo"/>.PropertyFlags Mode wich support Genlocks</short>
<descr>
</descr>
<seealso>
<link id="BIDTAG_DIPFMustHave"/>
<link id="BIDTAG_DIPFMustNotHave"/>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="DIPF_IS_WB">
<short>Flag for <link id="TDisplayInfo"/>.PropertyFlags Mode is useable for Workbench/Wanderer</short>
<descr>
</descr>
<seealso>
<link id="BIDTAG_DIPFMustHave"/>
<link id="BIDTAG_DIPFMustNotHave"/>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="DIPF_IS_DRAGGABLE">
<short>Flag for <link id="TDisplayInfo"/>.PropertyFlags Mode can be dragged down</short>
<descr>
</descr>
<seealso>
<link id="BIDTAG_DIPFMustHave"/>
<link id="BIDTAG_DIPFMustNotHave"/>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="DIPF_IS_PANELLED">
<short>Flag for <link id="TDisplayInfo"/>.PropertyFlags</short>
<descr>
</descr>
<seealso>
<link id="BIDTAG_DIPFMustHave"/>
<link id="BIDTAG_DIPFMustNotHave"/>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="DIPF_IS_BEAMSYNC">
<short>Flag for <link id="TDisplayInfo"/>.PropertyFlags</short>
<descr>
</descr>
<seealso>
<link id="BIDTAG_DIPFMustHave"/>
<link id="BIDTAG_DIPFMustNotHave"/>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="DIPF_IS_EXTRAHALFBRITE">
<short>Flag for <link id="TDisplayInfo"/>.PropertyFlags EHB mode</short>
<descr>
</descr>
<seealso>
<link id="BIDTAG_DIPFMustHave"/>
<link id="BIDTAG_DIPFMustNotHave"/>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="DIPF_IS_SPRITES_ATT">
<short>Flag for <link id="TDisplayInfo"/>.PropertyFlags Mode supports attached sprites</short>
<descr>
</descr>
<seealso>
<link id="BIDTAG_DIPFMustHave"/>
<link id="BIDTAG_DIPFMustNotHave"/>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="DIPF_IS_SPRITES_CHNG_RES">
<short>Flag for <link id="TDisplayInfo"/>.PropertyFlags Mode supports variable sprite resolution</short>
<descr>
</descr>
<seealso>
<link id="BIDTAG_DIPFMustHave"/>
<link id="BIDTAG_DIPFMustNotHave"/>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="DIPF_IS_SPRITES_BORDER">
<short>Flag for <link id="TDisplayInfo"/>.PropertyFlags Sprite can be displayed in the border</short>
<descr>
</descr>
<seealso>
<link id="BIDTAG_DIPFMustHave"/>
<link id="BIDTAG_DIPFMustNotHave"/>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="DIPF_IS_AA">
<short>Flag for <link id="TDisplayInfo"/>.PropertyFlagsAA modes - may only be available if machine has correct memory type to support required bandwidth - check availability.  </short>
<descr>
</descr>
<seealso>
<link id="BIDTAG_DIPFMustHave"/>
<link id="BIDTAG_DIPFMustNotHave"/>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="DIPF_IS_SCANDBL">
<short>Flag for <link id="TDisplayInfo"/>.PropertyFlags Scan doubled mode</short>
<descr>
</descr>
<seealso>
<link id="BIDTAG_DIPFMustHave"/>
<link id="BIDTAG_DIPFMustNotHave"/>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="DIPF_IS_SPRITES_CHNG_BASE">
<short>Flag for <link id="TDisplayInfo"/>.PropertyFlags Mode can change the sprite base color</short>
<descr>
</descr>
<seealso>
<link id="BIDTAG_DIPFMustHave"/>
<link id="BIDTAG_DIPFMustNotHave"/>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="DIPF_IS_SPRITES_CHNG_PRI">
<short>Flag for <link id="TDisplayInfo"/>.PropertyFlags Mode can change the sprite priority with respect to the playfield(s).</short>
<descr>
</descr>
<seealso>
<link id="BIDTAG_DIPFMustHave"/>
<link id="BIDTAG_DIPFMustNotHave"/>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="DIPF_IS_DBUFFER">
<short>Flag for <link id="TDisplayInfo"/>.PropertyFlags Mode supports double buffering</short>
<descr>
</descr>
<seealso>
<link id="BIDTAG_DIPFMustHave"/>
<link id="BIDTAG_DIPFMustNotHave"/>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="DIPF_IS_PROGBEAM">
<short>Flag for <link id="TDisplayInfo"/>.PropertyFlags Mode is a programmed beam-sync mode</short>
<descr>
</descr>
<seealso>
<link id="BIDTAG_DIPFMustHave"/>
<link id="BIDTAG_DIPFMustNotHave"/>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="DIPF_IS_FOREIGN">
<short>Flag for <link id="TDisplayInfo"/>.PropertyFlagsMode is not native to the Amiga</short>
<descr>
</descr>
<seealso>
<link id="BIDTAG_DIPFMustHave"/>
<link id="BIDTAG_DIPFMustNotHave"/>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SPECIAL_FLAGS">
<short>Flag for <link id="TDisplayInfo"/>.PropertyFlags</short>
<descr>
</descr>
<seealso>
<link id="BIDTAG_DIPFMustHave"/>
<link id="BIDTAG_DIPFMustNotHave"/>
</seealso>
</element>

<!-- pointer type Visibility: default -->
<element name="PDimensionInfo">
<short>Pointer to monitor dimensions</short>
<descr>
</descr>
<seealso>
<link id="GetDisplayInfoData"/>
<link id="DTAG_DIMS"/>
</seealso>
</element>

<!-- record type Visibility: default -->
<element name="TDimensionInfo">
<short>Monitor dimensions (like overscan)</short>
<descr>
</descr>
<seealso>
<link id="GetDisplayInfoData"/>
<link id="DTAG_DIMS"/>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TDimensionInfo.Header">
<short></short>
</element>

<!-- variable Visibility: default -->
<element name="TDimensionInfo.MaxDepth">
<short>log2(max number of colors)</short>
</element>

<!-- variable Visibility: default -->
<element name="TDimensionInfo.MinRasterWidth">
<short>Minimum width in pixels</short>
</element>

<!-- variable Visibility: default -->
<element name="TDimensionInfo.MinRasterHeight">
<short>Minimum height in pixels</short>
</element>

<!-- variable Visibility: default -->
<element name="TDimensionInfo.MaxRasterWidth">
<short>Maximum width in pixels</short>
</element>

<!-- variable Visibility: default -->
<element name="TDimensionInfo.MaxRasterHeight">
<short>Maximum height in pixels</short>
</element>

<!-- variable Visibility: default -->
<element name="TDimensionInfo.Nominal">
<short>"Standard" dimensions without overscan</short>
</element>

<!-- variable Visibility: default -->
<element name="TDimensionInfo.MaxOScan">
<short>Fixed, hardware dependant</short>
</element>

<!-- variable Visibility: default -->
<element name="TDimensionInfo.VideoOScan">
<short>Fixed, hardware dependant</short>
</element>

<!-- variable Visibility: default -->
<element name="TDimensionInfo.TxtOScan">
<short>Editable via preferences</short>
</element>

<!-- variable Visibility: default -->
<element name="TDimensionInfo.StdOScan">
<short>Editable via preferences</short>
</element>

<!-- variable Visibility: default -->
<element name="TDimensionInfo.Pad">
<short></short>
</element>

<!-- variable Visibility: default -->
<element name="TDimensionInfo.Reserved">
<short>Terminator</short>
</element>

<!-- pointer type Visibility: default -->
<element name="PMonitorInfo">
<short>Pointer to Monitor informations</short>
<descr>
</descr>
<seealso>
<link id="GetDisplayInfoData"/>
<link id="DTAG_MNTR"/>
</seealso>
</element>

<!-- record type Visibility: default -->
<element name="TMonitorInfo">
<short>Monitor Informations structure</short>
<descr>
</descr>
<seealso>
<link id="GetDisplayInfoData"/>
<link id="DTAG_MNTR"/>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TMonitorInfo.Header">
<short></short>
</element>

<!-- variable Visibility: default -->
<element name="TMonitorInfo.Mspc">
<short>Pointer to monitor specification</short>
</element>

<!-- variable Visibility: default -->
<element name="TMonitorInfo.ViewPosition">
<short>Editable via preferences</short>
</element>

<!-- variable Visibility: default -->
<element name="TMonitorInfo.ViewResolution">
<short>Standard monitor ticks-per-pixel</short>
</element>

<!-- variable Visibility: default -->
<element name="TMonitorInfo.ViewPositionRange">
<short>Fixed, hardware dependant</short>
</element>

<!-- variable Visibility: default -->
<element name="TMonitorInfo.TotalRows">
<short>Display height in scanlines</short>
</element>

<!-- variable Visibility: default -->
<element name="TMonitorInfo.TotalColorClocks">
<short>Scanline width in 280 ns units</short>
</element>

<!-- variable Visibility: default -->
<element name="TMonitorInfo.MinRow">
<short>Absolute minimum active scanline</short>
</element>

<!-- variable Visibility: default -->
<element name="TMonitorInfo.Compatibility">
<short>how this coexists with others (MCOMPAT_*)</short>
</element>

<!-- variable Visibility: default -->
<element name="TMonitorInfo.Pad">
<short></short>
</element>

<!-- variable Visibility: default -->
<element name="TMonitorInfo.MouseTicks">
<short></short>
</element>

<!-- variable Visibility: default -->
<element name="TMonitorInfo.DefaultViewPosition">
<short></short>
</element>

<!-- variable Visibility: default -->
<element name="TMonitorInfo.PreferredModeID">
<short></short>
</element>

<!-- variable Visibility: default -->
<element name="TMonitorInfo.Reserved">
<short>Terminator</short>
</element>

<!-- constant Visibility: default -->
<element name="MCOMPAT_NOBODY">
<short>Monitor compatibility for <link id="TMonitorInfo"/>.Compatibility Only one viewport at a time</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="MCOMPAT_MIXED">
<short>Monitor compatibility for <link id="TMonitorInfo"/>.Compatibility Can share display with other <var>MCOMPAT_MIXED</var></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="MCOMPAT_SELF">
<short>Monitor compatibility for <link id="TMonitorInfo"/>.Compatibility Can share only within same monitor</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="DISPLAYNAMELEN">
<short>Max name of monitor names see <link id="TNameInfo"/>.Name</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- pointer type Visibility: default -->
<element name="PNameInfo">
<short>Pointer to Monitor name structure</short>
<descr>
</descr>
<seealso>
<link id="GetDisplayInfoData"/>
<link id="DTAG_NAME"/>
</seealso>
</element>

<!-- record type Visibility: default -->
<element name="tNameInfo">
<short>Name of the Display</short>
<descr>
</descr>
<seealso>
<link id="GetDisplayInfoData"/>
<link id="DTAG_NAME"/>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="tNameInfo.Header">
<short></short>
</element>

<!-- variable Visibility: default -->
<element name="tNameInfo.Name">
<short></short>
</element>

<!-- variable Visibility: default -->
<element name="tNameInfo.Reserved">
<short>Terminator</short>
</element>

<!-- constant Visibility: default -->
<element name="DTAG_DISP">
<short>Start tag for <link id="GetDisplayInfoData"/> </short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="DTAG_DIMS">
<short><link id="GetDisplayInfoData"/>, results in <link id="PDimensionInfo"/></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="DTAG_MNTR">
<short><link id="GetDisplayInfoData"/>, results in <link id="PMonitorInfo"/></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="DTAG_NAME">
<short><link id="GetDisplayInfoData"/>, results in <link id="PNameInfo"/></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="DTAG_VEC">
<short><link id="GetDisplayInfoData"/>, Internal use only (<link id="PVecInfo"/>)</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- pointer type Visibility: default -->
<element name="PVecInfo">
<short>This structure is PRIVATE, for our use only Touch these, and burn!</short>
<descr>
</descr>
<seealso>
<link id="GetDisplayInfoData"/>
<link id="DTAG_VEC"/>
</seealso>
</element>

<!-- record type Visibility: default -->
<element name="TVecInfo">
<short>This structure is PRIVATE, for our use only Touch these, and burn!</short>
<descr>
</descr>
<seealso>
<link id="GetDisplayInfoData"/>
<link id="DTAG_VEC"/>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TVecInfo.Header">
<short></short>
</element>

<!-- variable Visibility: default -->
<element name="TVecInfo.Vec">
<short></short>
</element>

<!-- variable Visibility: default -->
<element name="TVecInfo.Data">
<short></short>
</element>

<!-- variable Visibility: default -->
<element name="TVecInfo.Type_">
<short>renamed from "Type" in C</short>
</element>

<!-- variable Visibility: default -->
<element name="TVecInfo.pad">
<short></short>
</element>

<!-- variable Visibility: default -->
<element name="TVecInfo.Reserved">
<short></short>
</element>


<!-- constant Visibility: default -->
<element name="VTAG_end_CM">
<short>Tag for <link id="VideoControl">VideoControl()</link></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="VTAG_CHROMAKEY_CLR">
<short>Tag for <link id="VideoControl">VideoControl()</link></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="VTAG_CHROMAKEY_SET">
<short>Tag for <link id="VideoControl">VideoControl()</link></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="VTAG_BITPLANEKEY_CLR">
<short>Tag for <link id="VideoControl">VideoControl()</link></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="VTAG_BITPLANEKEY_SET">
<short>Tag for <link id="VideoControl">VideoControl()</link></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="VTAG_BORDERBLANK_CLR">
<short>Tag for <link id="VideoControl">VideoControl()</link></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="VTAG_BORDERBLANK_SET">
<short>Tag for <link id="VideoControl">VideoControl()</link></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="VTAG_BORDERNOTRANS_CLR">
<short>Tag for <link id="VideoControl">VideoControl()</link></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="VTAG_BORDERNOTRANS_SET">
<short>Tag for <link id="VideoControl">VideoControl()</link></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="VTAG_CHROMA_PEN_CLR">
<short>Tag for <link id="VideoControl">VideoControl()</link></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="VTAG_CHROMA_PEN_SET">
<short>Tag for <link id="VideoControl">VideoControl()</link></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="VTAG_CHROMA_PLANE_SET">
<short>Tag for <link id="VideoControl">VideoControl()</link></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="VTAG_ATTACH_CM_SET">
<short>Tag for <link id="VideoControl">VideoControl()</link></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="VTAG_NEXTBUF_CM">
<short>Tag for <link id="VideoControl">VideoControl()</link></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="VTAG_BATCH_CM_CLR">
<short>Tag for <link id="VideoControl">VideoControl()</link></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="VTAG_BATCH_CM_SET">
<short>Tag for <link id="VideoControl">VideoControl()</link></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="VTAG_NORMAL_DISP_GET">
<short>Tag for <link id="VideoControl">VideoControl()</link></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="VTAG_NORMAL_DISP_SET">
<short>Tag for <link id="VideoControl">VideoControl()</link></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="VTAG_COERCE_DISP_GET">
<short>Tag for <link id="VideoControl">VideoControl()</link></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="VTAG_COERCE_DISP_SET">
<short>Tag for <link id="VideoControl">VideoControl()</link></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="VTAG_VIEWPORTEXTRA_GET">
<short>Tag for <link id="VideoControl">VideoControl()</link></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="VTAG_VIEWPORTEXTRA_SET">
<short>Tag for <link id="VideoControl">VideoControl()</link></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="VTAG_CHROMAKEY_GET">
<short>Tag for <link id="VideoControl">VideoControl()</link></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="VTAG_BITPLANEKEY_GET">
<short>Tag for <link id="VideoControl">VideoControl()</link></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="VTAG_BORDERBLANK_GET">
<short>Tag for <link id="VideoControl">VideoControl()</link></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="VTAG_BORDERNOTRANS_GET">
<short>Tag for <link id="VideoControl">VideoControl()</link></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="VTAG_CHROMA_PEN_GET">
<short>Tag for <link id="VideoControl">VideoControl()</link></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="VTAG_CHROMA_PLANE_GET">
<short>Tag for <link id="VideoControl">VideoControl()</link></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="VTAG_ATTACH_CM_GET">
<short>Tag for <link id="VideoControl">VideoControl()</link></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="VTAG_BATCH_CM_GET">
<short>Tag for <link id="VideoControl">VideoControl()</link></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="VTAG_BATCH_ITEMS_GET">
<short>Tag for <link id="VideoControl">VideoControl()</link></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="VTAG_BATCH_ITEMS_SET">
<short>Tag for <link id="VideoControl">VideoControl()</link></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="VTAG_BATCH_ITEMS_ADD">
<short>Tag for <link id="VideoControl">VideoControl()</link></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="VTAG_VPMODEID_GET">
<short>Tag for <link id="VideoControl">VideoControl()</link></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="VTAG_VPMODEID_SET">
<short>Tag for <link id="VideoControl">VideoControl()</link></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="VTAG_VPMODEID_CLR">
<short>Tag for <link id="VideoControl">VideoControl()</link></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="VTAG_USERCLIP_GET">
<short>Tag for <link id="VideoControl">VideoControl()</link></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="VTAG_USERCLIP_SET">
<short>Tag for <link id="VideoControl">VideoControl()</link></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="VTAG_USERCLIP_CLR">
<short>Tag for <link id="VideoControl">VideoControl()</link></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="VTAG_PF1_BASE_GET">
<short>Tag for <link id="VideoControl">VideoControl()</link></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="VTAG_PF2_BASE_GET">
<short>Tag for <link id="VideoControl">VideoControl()</link></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="VTAG_SPEVEN_BASE_GET">
<short>Tag for <link id="VideoControl">VideoControl()</link></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="VTAG_SPODD_BASE_GET">
<short>Tag for <link id="VideoControl">VideoControl()</link></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="VTAG_PF1_BASE_SET">
<short>Tag for <link id="VideoControl">VideoControl()</link></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="VTAG_PF2_BASE_SET">
<short>Tag for <link id="VideoControl">VideoControl()</link></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="VTAG_SPEVEN_BASE_SET">
<short>Tag for <link id="VideoControl">VideoControl()</link></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="VTAG_SPODD_BASE_SET">
<short>Tag for <link id="VideoControl">VideoControl()</link></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="VTAG_BORDERSPRITE_GET">
<short>Tag for <link id="VideoControl">VideoControl()</link></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="VTAG_BORDERSPRITE_SET">
<short>Tag for <link id="VideoControl">VideoControl()</link></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="VTAG_BORDERSPRITE_CLR">
<short>Tag for <link id="VideoControl">VideoControl()</link></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="VTAG_SPRITERESN_SET">
<short>Tag for <link id="VideoControl">VideoControl()</link></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="VTAG_SPRITERESN_GET">
<short>Tag for <link id="VideoControl">VideoControl()</link></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="VTAG_PF1_TO_SPRITEPRI_SET">
<short>Tag for <link id="VideoControl">VideoControl()</link></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="VTAG_PF1_TO_SPRITEPRI_GET">
<short>Tag for <link id="VideoControl">VideoControl()</link></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="VTAG_PF2_TO_SPRITEPRI_SET">
<short>Tag for <link id="VideoControl">VideoControl()</link></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="VTAG_PF2_TO_SPRITEPRI_GET">
<short>Tag for <link id="VideoControl">VideoControl()</link></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="VTAG_IMMEDIATE">
<short>Tag for <link id="VideoControl">VideoControl()</link></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="VTAG_FULLPALETTE_SET">
<short>Tag for <link id="VideoControl">VideoControl()</link></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="VTAG_FULLPALETTE_GET">
<short>Tag for <link id="VideoControl">VideoControl()</link></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="VTAG_FULLPALETTE_CLR">
<short>Tag for <link id="VideoControl">VideoControl()</link></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="VTAG_DEFSPRITERESN_SET">
<short>Tag for <link id="VideoControl">VideoControl()</link></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="VTAG_DEFSPRITERESN_GET">
<short>Tag for <link id="VideoControl">VideoControl()</link></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="VC_IntermediateCLUpdate">
<short>Tag for <link id="VideoControl">VideoControl()</link> When set graphics will update the intermediate copper lists on color changes, etc. When False, it won't, and will be faster. default = True.</short>
<descr>
</descr>
<seealso>
<link id="VC_IntermediateCLUpdate_Query"/>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="VC_IntermediateCLUpdate_Query">
<short>Tag for <link id="VideoControl">VideoControl()</link> Get if intermediate copper is activated</short>
<descr>
</descr>
<seealso>
<link id="VC_IntermediateCLUpdate"/>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="VC_NoColorPaletteLoad">
<short>Tag for <link id="VideoControl">VideoControl()</link> When set, graphics will only load color 0 for this View Port default = False.</short>
<descr>When set, graphics will only load color 0 for this ViewPort, and so the ViewPort's colors will come from the previous ViewPort's.
Using this tag and <link id="VTAG_FULLPALETTE_SET"/> together is undefined.
</descr>
<seealso>
<link id="VC_NoColorPaletteLoad_Query"/>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="VC_NoColorPaletteLoad_Query">
<short>Tag for <link id="VideoControl">VideoControl()</link> Get if only color 0 will be set for this viewport.</short>
<descr>
</descr>
<seealso>
<link id="VC_NoColorPaletteLoad"/>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="VC_DUALPF_Disable">
<short>Tag for <link id="VideoControl">VideoControl()</link> When this flag is set, the dual-pf bit in Dual-Playfield screens will be turned off. Default = False.</short>
<descr>
When this flag is set, the dual-pf bit in Dual-Playfield screens will be turned off. Even bitplanes
 will still come from the first BitMap and odd bitplanes from the second BitMap, and both R[xy]Offsets will be
considered. This can be used (with appropriate palette selection) for cross-fades between differently scrolling images.
When this flag is turned on, colors will be loaded forthe viewport as if it were a single viewport of depth depth1+depth2
</descr>
<seealso>
<link id="VC_DUALPF_Disable_Query"/>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="VC_DUALPF_Disable_Query">
<short>Tag for <link id="VideoControl">VideoControl()</link></short>
<descr>
</descr>
<seealso>
<link id="VC_DUALPF_Disable"/>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SPRITE_ATTACHED">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- pointer type Visibility: default -->
<element name="PSimpleSprite">
<short>Pointer to a simple sprite description</short>
<descr>
</descr>
<seealso>
<link id="ChangeSprite"/>
<link id="GetSprite"/>
<link id="MoveSprite"/>
</seealso>
</element>

<!-- record type Visibility: default -->
<element name="TSimpleSprite">
<short>Sprite description structure</short>
<descr>
</descr>
<seealso>
<link id="ChangeSprite"/>
<link id="GetSprite"/>
<link id="MoveSprite"/>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TSimpleSprite.PosCtlData">
<short></short>
</element>

<!-- variable Visibility: default -->
<element name="TSimpleSprite.Height">
<short></short>
</element>

<!-- variable Visibility: default -->
<element name="TSimpleSprite.x">
<short>Current x position</short>
</element>

<!-- variable Visibility: default -->
<element name="TSimpleSprite.y">
<short>Current y position</short>
</element>

<!-- variable Visibility: default -->
<element name="TSimpleSprite.Num">
<short></short>
</element>

<!-- pointer type Visibility: default -->
<element name="PExtSprite">
<short>Pointer to an extended sprite Structure</short>
<descr>
</descr>
<seealso>
<link id="AllocSpriteDataA"/>
<link id="ChangeExtSpriteA"/>
<link id="FreeSpriteData"/>
<link id="GetExtSpriteA"/>
</seealso>
</element>

<!-- record type Visibility: default -->
<element name="TExtSprite">
<short>Extended sprite Structure</short>
<descr>
</descr>
<seealso>
<link id="AllocSpriteDataA"/>
<link id="ChangeExtSpriteA"/>
<link id="FreeSpriteData"/>
<link id="GetExtSpriteA"/>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TExtSprite.es_SimpleSprite">
<short>Conventional simple sprite structure</short>
</element>

<!-- variable Visibility: default -->
<element name="TExtSprite.es_WordWidth">
<short>Graphics use only, subject to change</short>
</element>

<!-- variable Visibility: default -->
<element name="TExtSprite.es_Flags">
<short>Graphics use only, subject to change</short>
</element>


<!-- variable Visibility: default -->
<element name="TExtSprite.es_Bitmap">
<short>Actual image data.</short>
</element>

<!-- constant Visibility: default -->
<element name="SPRITEA_Width">
<short>Tag for <link id="AllocSpriteDataA">AllocSpriteDataA()</link> Width of Sprite Default - 16</short>
<descr>
specifies how many pixels wide you desire
the sprite to be. Specifying a width wider than the hardware
can handle will cause the function to return failure. If the
bitmap passed in is narrower than the width asked for, then
it will be padded on the right with transparent pixels.
Defaults to 16.
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SPRITEA_XReplication">
<short>Tag for <link id="AllocSpriteDataA">AllocSpriteDataA()</link> Controls the horizontal pixel replication factor
    used when converting the bitmap data. Default - 0 </short>
<descr><p>
Controls the horizontal pixel replication factor
    used when converting the bitmap data. Valid values are:</p>
<dl>
<dt>0</dt><dd>perform a 1 to 1 conversion</dd>
<dt>1</dt><dd>each pixel from the source is replicated twice
          in the output.</dd>
<dt>2</dt><dd>each pixel is replicated 4 times.</dd>
<dt>-1</dt><dd>skip every other pixel in the source bitmap</dd>
<dt>-2</dt><dd>only include every fourth pixel from the source.</dd>
</dl>
<p>This tag is useful for converting data from one resolution
to another. For instance, hi-res bitmap data can be correctly
converted for a lo-res sprite by using an x replication factor
of -1. Defaults to 0.</p>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SPRITEA_YReplication">
<short>Tag for <link id="AllocSpriteDataA">AllocSpriteDataA()</link> Controls the vertical pixel replication factor
    used when converting the bitmap data. Default - 0</short>
<descr>controls the vertical pixel replication factor
    in the same manner as <link id="SPRITEA_XReplication"/> controls the horizontal.
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SPRITEA_OutputHeight">
<short>Tag for <link id="AllocSpriteDataA">AllocSpriteDataA()</link> height of Sprite </short>
<descr>
Specifies how tall the resulting sprite should be. Defaults to the bitmap height. The bitmap <b>must</b> be at
least as tall as the output height.
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SPRITEA_Attached">
<short>Tag for <link id="AllocSpriteDataA">AllocSpriteDataA()</link> </short>
<descr>Tells the function that you wish to convert
    the data for the second sprite in an attached sprite pair.
    This will cause <link id="AllocSpriteDataA">AllocSpriteDataA()</link> to take its data from the
    3rd and 4th bitplanes of the passed in bitmap.
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SPRITEA_OldDataFormat">
<short>Tag for <link id="AllocSpriteDataA">AllocSpriteDataA()</link> <b>must</b> pass in outputheight if using this tag</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="GSTAG_SPRITE_NUM">
<short>Tag for <link id="GetExtSpriteA">GetExtSpriteA()</link> </short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="GSTAG_ATTACHED">
<short>Tag for <link id="GetExtSpriteA">GetExtSpriteA()</link> </short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="GSTAG_SOFTSPRITE">
<short>Tag for <link id="GetExtSpriteA">GetExtSpriteA()</link> </short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="GSTAG_SCANDOUBLED">
<short>Tag for <link id="GetExtSpriteA">GetExtSpriteA()</link> or <link id="ChangeExtSpriteA">ChangeExtSpriteA()</link> request "NTSC-Like" height if possible.</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- pointer type Visibility: default -->
<element name="PBitScaleArgs">
<short>Pointer to BitScaleArgs structure used by <link id="BitMapScale">BitMapScale()</link></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- record type Visibility: default -->
<element name="TBitScaleArgs">
<short>BitScaleArgs structure used by <link id="BitMapScale">BitMapScale()</link></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TBitScaleArgs.bsa_SrcX">
<short>Source origin x position</short>
</element>

<!-- variable Visibility: default -->
<element name="TBitScaleArgs.bsa_SrcY">
<short>Source origin y position</short>
</element>

<!-- variable Visibility: default -->
<element name="TBitScaleArgs.bsa_SrcWidth">
<short>Source width</short>
</element>

<!-- variable Visibility: default -->
<element name="TBitScaleArgs.bsa_SrcHeight">
<short>Source height</short>
</element>

<!-- variable Visibility: default -->
<element name="TBitScaleArgs.bsa_XSrcFactor">
<short>Scale factor in x direction denominator</short>
</element>

<!-- variable Visibility: default -->
<element name="TBitScaleArgs.bsa_YSrcFactor">
<short>Scale factor in y direction denominator</short>
</element>

<!-- variable Visibility: default -->
<element name="TBitScaleArgs.bsa_DestX">
<short>Destination origin x position</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TBitScaleArgs.bsa_DestY">
<short>Destination origin y position</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TBitScaleArgs.bsa_DestWidth">
<short>Destination width</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TBitScaleArgs.bsa_DestHeight">
<short>Destination height</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TBitScaleArgs.bsa_XDestFactor">
<short>Destination scale factor in x direction numerator</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TBitScaleArgs.bsa_YDestFactor">
<short>Destination scale factor in y direction numerator</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TBitScaleArgs.bsa_SrcBitMap">
<short>Source Bitmap</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TBitScaleArgs.bsa_DestBitMap">
<short>Destination Bitmap</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TBitScaleArgs.bsa_Flags">
<short>reserved.  Must be zero!</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TBitScaleArgs.bsa_XDDA">
<short>reserved</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TBitScaleArgs.bsa_YDDA">
<short>reserved</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TBitScaleArgs.bsa_Reserved1">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TBitScaleArgs.bsa_Reserved2">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="RPTAG_Font">
<short>Tag for <link id="GetRPAttrsA">GetRPAttrsA()</link>, <link id="SetRPAttrsA">SetRPAttrsA()</link> get/set font</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="RPTAG_APen">
<short>Tag for <link id="GetRPAttrsA">GetRPAttrsA()</link>, <link id="SetRPAttrsA">SetRPAttrsA()</link> get/set apen</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="RPTAG_BPen">
<short>Tag for <link id="GetRPAttrsA">GetRPAttrsA()</link>, <link id="SetRPAttrsA">SetRPAttrsA()</link> get/set bpen</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="RPTAG_DrMd">
<short>Tag for <link id="GetRPAttrsA">GetRPAttrsA()</link>, <link id="SetRPAttrsA">SetRPAttrsA()</link> get/set draw mode</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="RPTAG_OutlinePen">
<short>Tag for <link id="GetRPAttrsA">GetRPAttrsA()</link>, <link id="SetRPAttrsA">SetRPAttrsA()</link> get/set outline pen.</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="RPTAG_WriteMask">
<short>Tag for <link id="GetRPAttrsA">GetRPAttrsA()</link>, <link id="SetRPAttrsA">SetRPAttrsA()</link> get/set WriteMask</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="RPTAG_MaxPen">
<short>Tag for <link id="GetRPAttrsA">GetRPAttrsA()</link>, <link id="SetRPAttrsA">SetRPAttrsA()</link> get/set maxpen</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="RPTAG_DrawBounds">
<short>Tag for <link id="GetRPAttrsA">GetRPAttrsA()</link> Get rastport draw bounds. pass <link id="PRectangle"/></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- pointer type Visibility: default -->
<element name="PGfxBase">
<short>Graphics Library Base pointer</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- record type Visibility: default -->
<element name="TGfxBase">
<short>Graphics library structure</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TGfxBase.LibNode">
<short>Basic Library structure</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TGfxBase.ActiView">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TGfxBase.CopInit">
<short>Pointer to copper start up list</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TGfxBase.Cia">
<short>For 8520 resource use</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TGfxBase.blitter">
<short>For future blitter resource use</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TGfxBase.LOFlist">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TGfxBase.SHFlist">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TGfxBase.blthd">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TGfxBase.blttl">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TGfxBase.bsblthd">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TGfxBase.bsblttl">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TGfxBase.vbsrv">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TGfxBase.timsrv">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TGfxBase.bltsrv">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TGfxBase.TextFonts">
<short>List of Fonts</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TGfxBase.DefaultFont">
<short>Current default font</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TGfxBase.Modes">
<short>Copy of current first bplcon0</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TGfxBase.VBlank">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TGfxBase.Debug">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TGfxBase.BeamSync">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TGfxBase.system_bplcon0">
<short>It is ored into each bplcon0 for display</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TGfxBase.SpriteReserved">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TGfxBase.bytereserved">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TGfxBase.Flags">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TGfxBase.BlitLock">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TGfxBase.BlitNest">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TGfxBase.BlitWaitQ">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TGfxBase.BlitOwner">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TGfxBase.TOF_WaitQ">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TGfxBase.DisplayFlags">
<short>NTSC PAL GENLOC etc.  Display flags are determined at power on</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TGfxBase.SimpleSprites">
<short>Simple sprite pointer</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TGfxBase.MaxDisplayRow">
<short>hardware stuff, do not use</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TGfxBase.MaxDisplayColumn">
<short>hardware stuff, do not use</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TGfxBase.NormalDisplayRows">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TGfxBase.NormalDisplayColumns">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TGfxBase.NormalDPMX">
<short>Dots per meter on display standard non interlace, 1/2 wb width</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TGfxBase.NormalDPMY">
<short>Dots per meter on display standard non interlace, 1/2 wb width</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TGfxBase.LastChanceMemory">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TGfxBase.LCMptr">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TGfxBase.MicrosPerLine">
<short>256 time usec/line</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TGfxBase.MinDisplayColumn">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TGfxBase.ChipRevBits0">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TGfxBase.MemType">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TGfxBase.crb_reserved">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TGfxBase.monitor_id">
<short>normally 0</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TGfxBase.hedley">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TGfxBase.hedley_sprites">
<short>sprite ptrs for intuition mouse</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TGfxBase.hedley_sprites1">
<short>sprite ptrs for intuition mouse</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TGfxBase.hedley_count">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TGfxBase.hedley_flags">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TGfxBase.hedley_tmp">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TGfxBase.hash_table">
<short>Hashtable used for <link id="GfxAssociate">GfxAssociate()</link> and <link id="GfxLookup">GfxLookup()</link> (private!)</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TGfxBase.current_tot_rows">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TGfxBase.current_tot_cclks">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TGfxBase.hedley_hint">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TGfxBase.hedley_hint2">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TGfxBase.nreserved">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TGfxBase.a2024_sync_raster">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TGfxBase.control_delta_pal">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TGfxBase.control_delta_ntsc">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TGfxBase.Current_Monitor">
<short>MonitorSpec used for current display</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TGfxBase.MonitorList">
<short>List of all MonitorSpecs in the system</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TGfxBase.Default_Monitor">
<short>MonitorSpec of "default.monitor"</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TGfxBase.MonitorListSemaphore">
<short>Semaphore for MonitorList access </short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TGfxBase.DisplayInfoDataBase">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TGfxBase.TopLine">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TGfxBase.ActiViewCprSemaphore">
<short>Semaphore for active view access</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TGfxBase.UtilityBase">
<short>for hook <b>and</b> tag utilities</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TGfxBase.ExecBase">
<short>to link with rom.lib</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TGfxBase.bwshifts">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TGfxBase.StrtFetchMasks">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TGfxBase.StopFetchMasks">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TGfxBase.Overrun">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TGfxBase.RealStops">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TGfxBase.SpriteWidth">
<short>current width (in words) of sprites</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TGfxBase.SpriteFMode">
<short>current sprite fmode bits</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TGfxBase.SoftSprites">
<short>bit mask of size change knowledgeable sprites</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TGfxBase.arraywidth">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TGfxBase.DefaultSpriteWidth">
<short>What width intuition wants</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TGfxBase.SprMoveDisable">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TGfxBase.WantChips">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TGfxBase.BoardMemType">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TGfxBase.Bugs">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TGfxBase.gb_LayersBase">
<short>layers.library base</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TGfxBase.ColorMask">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TGfxBase.IVector">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TGfxBase.IData">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TGfxBase.SpecialCounter">
<short>special for double buffering</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TGfxBase.DBList">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TGfxBase.MonitorFlags">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TGfxBase.ScanDoubledSprites">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TGfxBase.BP3Bits">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TGfxBase.MonitorVBlank">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TGfxBase.Natural_Monitor">
<short>Default MonitorSpec for view without explicit MonitorSpec in ViewExtra</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TGfxBase.ProgData">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TGfxBase.ExtSprites">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TGfxBase.pad3">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TGfxBase.GfxFlags">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TGfxBase.VBCounter">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TGfxBase.HashTableSemaphore">
<short>Semaphore for hash_table access, private in fact</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TGfxBase.ChunkyToPlanarPtr">
<short>= HWEmul[0];</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="TGfxBase.HWEmul">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="NTSC">
<short>Flag for <link id="TGfxBase"/>.DisplayFlags Default mode is NTSC</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="GENLOC">
<short>Flag for <link id="TGfxBase"/>.DisplayFlags Genlock is in use</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="PAL">
<short>Flag for <link id="TGfxBase"/>.DisplayFlags Default mode is PAL</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="TODA_SAFE">
<short>Flag for <link id="TGfxBase"/>.DisplayFlags</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="GFXB_BIG_BLITS">
<short>Bit defintion for <link id="TGfxBase"/>.ChipRevBits0 </short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="GFXB_HR_AGNUS">
<short>Bit defintion for <link id="TGfxBase"/>.ChipRevBits0 </short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="GFXB_HR_DENISE">
<short>Bit defintion for <link id="TGfxBase"/>.ChipRevBits0 </short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="GFXB_AA_ALICE">
<short>Bit defintion for <link id="TGfxBase"/>.ChipRevBits0 </short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="GFXB_AA_LISA">
<short>Bit defintion for <link id="TGfxBase"/>.ChipRevBits0 </short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="GFXB_AA_MLISA">
<short>Bit defintion for <link id="TGfxBase"/>.ChipRevBits0 Internal use only</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="GFXF_BIG_BLITS">
<short>Bit value for <link id="TGfxBase"/>.ChipRevBits0 </short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="GFXF_HR_AGNUS">
<short>Bit value for <link id="TGfxBase"/>.ChipRevBits0 </short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="GFXF_HR_DENISE">
<short>Bit value for <link id="TGfxBase"/>.ChipRevBits0 </short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="GFXF_AA_ALICE">
<short>Bit value for <link id="TGfxBase"/>.ChipRevBits0 </short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="GFXF_AA_LISA">
<short>Bit value for <link id="TGfxBase"/>.ChipRevBits0 </short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="GFXF_AA_MLISA">
<short>Bit value for <link id="TGfxBase"/>.ChipRevBits0 internal use only</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SETCHIPREV_A">
<short>Pass to <link id="SetChipRev">SetChipRev()</link></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SETCHIPREV_ECS">
<short>Pass to <link id="SetChipRev">SetChipRev()</link></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SETCHIPREV_AA">
<short>Pass to <link id="SetChipRev">SetChipRev()</link></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="SETCHIPREV_BEST">
<short>Pass to <link id="SetChipRev">SetChipRev()</link></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="BUS_16">
<short>Memory Type</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="BUS_32">
<short>Memory Type</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="NML_CAS">
<short>Memory Type</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="DBL_CAS">
<short>Memory Type</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="BANDWIDTH_1X">
<short>Memory Type</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="BANDWIDTH_2XNML">
<short>Memory Type</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="BANDWIDTH_2XDBL">
<short>Memory Type</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="BANDWIDTH_4X">
<short>Memory Type</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="BLITMSG_FAULT">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="NEW_DATABASE">
<short><link id="TGfxBase"/>.GfxFlags private</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="GRAPHICSNAME">
<short>Name of graphics library</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="GfxBase">
<short>Graphics base library pointer for all graphics library functions, opened on unit initialization</short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- procedure Visibility: default -->
<element name="AddAnimOb">
<short>Add an AnimOb to the linked list of AnimObs.</short>
<descr>
Links this PAnimOb into the current list pointed to by animKey.
Initializes all the Timers of the AnimOb's components.
Calls AddBob with each component's Bob.
<link id="TRastPort"/>.GelsInfo must point to an initialized <link id="PGelsInfo"/> structure.
</descr>
<errors>
</errors>
<seealso>
<link id="Animate"/>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="AddAnimOb.AnOb">
<short>Pointer to the TAnimOb structure to be added to the list</short>
</element>

<!-- argument Visibility: default -->
<element name="AddAnimOb.AnKey">
<short>Address of a Pointer to the first TAnimOb in the list (anKey = <var>nil</var> if there are no PAnimObs in the list so far)</short>
</element>

<!-- argument Visibility: default -->
<element name="AddAnimOb.Rp">
<short>Pointer to a valid RastPort</short>
</element>

<!-- procedure Visibility: default -->
<element name="AddBob">
<short>Adds a Bob to current gel list.</short>
<descr>Sets up the system Bob flags, then links this gel into the list
  via <link id="AddVSprite">AddVSprite()</link>.
</descr>
<errors>
</errors>
<seealso>
<link id="InitGels"/>
<link id="AddVSprite"/>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="AddBob.Bob">
<short>Pointer to the Bob structure to be added to the gel list</short>
</element>

<!-- argument Visibility: default -->
<element name="AddBob.Rp">
<short>Pointer to a TRastPort structure</short>
</element>

<!-- procedure Visibility: default -->
<element name="AddFont">
<short>Add a font to the system list</short>
<descr>This function adds the text font to the system, making it
available for use by any application.  The font added must be
in public memory, and remain until successfully removed.
This function will set the <link id="TTextFont">tf_Accessors</link> to 0.
</descr>
<errors>
</errors>
<seealso>
<link id="SetFont"/>
<link id="RemFont"/>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="AddFont.TextFont">
<short>A TextFont structure in public ram.</short>
</element>

<!-- procedure Visibility: default -->
<element name="AddVSprite">
<short>Add a VSprite to the current gel list.</short>
<descr>
</descr>
<errors>
</errors>
<seealso>
<link id="InitGels"/>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="AddVSprite.VSprite">
<short>Pointer to the VSprite structure to be added to the gel list</short>
</element>

<!-- argument Visibility: default -->
<element name="AddVSprite.Rp">
<short>Pointer to a RastPort structure</short>
</element>

<!-- function Visibility: default -->
<element name="AllocBitMap">
<short>Allocate a bitmap and attach bitplanes to it.</short>
<descr>
  <p>
  Allocates and initializes a bitmap structure. Allocates and initializes
  bitplane data, and sets the bitmap's planes to point to it.</p>
<dl>
  <dt><link id="BMF_CLEAR"/></dt><dd>to
    specify that the allocated raster should be
    filled with color 0.</dd>
  <dt><link id="BMF_DISPLAYABLE"/></dt><dd>to
    specify that this bitmap data should
    be allocated in such a manner that it can be displayed.
    Displayable data has more severe alignment restrictions
    than non-displayable data in some systems.</dd>

  <dt><link id="BMF_INTERLEAVED"/></dt><dd>tells
    graphics that you would like your
    bitmap to be allocated with one large chunk of display
    memory for all bitplanes. This minimizes color flashing
    on deep displays. If there is not enough contiguous RAM
    for an interleaved bitmap, graphics.library will fall
    back to a non-interleaved one.</dd>

  <dt><link id="BMF_MINPLANES"/></dt><dd>causes graphics to only
    allocate enough space in the bitmap structure for "depth"
    plane pointers. This is for system use and should not be
    used by applications use as it is inefficient,
    and may waste memory.</dd>
</dl>
<p><b>NOTE:</b></p>
<p>When allocating using a friend bitmap, it is not safe to assume
  anything about the structure of the bitmap data if that friend
  BitMap might not be a standard amiga bitmap (for instance, if
  the workbench is running on a non-amiga display device, its
  Screen^.RastPort^.BitMap won't be in standard amiga format.
  The only safe operations to perform on a non-standard BitMap are:</p>
<ul>
  <li>blitting it to another bitmap, which must be either a standard
            Amiga bitmap, or a friend of this bitmap.</li>
  <li>blitting from this bitmap to a friend bitmap or to a standard
            Amiga bitmap.</li>
  <li>attaching it to a rastport and making rendering calls.</li>
</ul>
<p>Good arguments to pass for the <var>friend_bitmap</var> are your window's
  RPort^.BitMap, and your screen's RastPort^.BitMap.
  Do <b>not</b> pass @(screenptr^.BitMap)!</p>
<p>
  BitMaps not allocated with <link id="BMF_DISPLAYABLE"/> may not be used as
  Intuition Custom BitMaps or as RasInfo^.BitMaps.  They may be blitted
  to a <link id="BMF_DISPLAYABLE"/> BitMap, using one of the <link id="BltBitMap">BltBitMap()</link> family of
  functions.</p>
</descr>
<errors>
</errors>
<seealso>
<link id="FreeBitMap"/>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="AllocBitMap.Result">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="AllocBitMap.Sizex">
<short>The width (in pixels) desired for the bitmap data.</short>
</element>

<!-- argument Visibility: default -->
<element name="AllocBitMap.Sizey">
<short>The height (in pixels) desired.</short>
</element>

<!-- argument Visibility: default -->
<element name="AllocBitMap.Depth">
<short>The number of bitplanes deep for the allocation. Pixels with <b>at least</b> this many bits will be allocated.</short>
</element>

<!-- argument Visibility: default -->
<element name="AllocBitMap.Flags">
<short>Flags for Bitmap creation (BMF_*)</short>
</element>

<!-- argument Visibility: default -->
<element name="AllocBitMap.Friend_Bitmap">
<short>Pointer to another bitmap, or <var>nil</var>. If this pointer
is passed, then the bitmap data will be allocated in
the most efficient form for blitting to <var>friend_bitmap</var>.</short>
</element>

<!-- function Visibility: default -->
<element name="AllocDBufInfo">
<short>Allocate structure for multi-buffered animation</short>
<descr>
<p>Allocates a structure which is used by the <link id="ChangeVPBitMap">ChangeVPBitMap()</link>
  routine.</p>
<p>
  The only fields of the <link id="TDBufInfo"/> structure which can be used by application
  programs are the dbi_SafeMessage, dbi_DispMessage, dbi_UserData1 and
  dbi_UserData2 fields.</p>
<p>
  dbi_SafeMessage and dbi_DispMessage are standard exec message structures
  which may be used for synchronizing your animation with the screen update.</p>
<p>
  dbi_SafeMessage is a message which is replied to when it is safe to write to
  the old BitMap (the one which was installed when you called <link id="ChangeVPBitMap">ChangeVPBitMap()</link>).</p>
<p>
  dbi_DispMessage is replied to when it is safe to call <link id="ChangeVPBitMap">ChangeVPBitMap()</link> again
  and be certain that the new frame has been seen at least once.</p>
<p>
  The dbi_UserData1 and dbi_UserData2 fields, which are stored after each
  message, are for your application to stuff any data into that it may need
  to examine when looking at the reply coming into the ReplyPort for either
  of the embedded Message structures.</p>
<p>
  <link id="TDBufInfo"/> structures <b>must</b> be allocated with this function. The size of
  the structure will grow in future releases.</p>
<p><b>Example:</b></p>
<p>The following fragment shows proper double buffering synchronization:</p>
<code>
var
  SafeToChange: Boolean = True;
  SafeToWrite: Boolean = True;
  CurBuffer: Integer = 1;
  Ports: array[0..1] of PMsgPort; // reply ports for DispMessage and SafeMessage
  BmPtrs: array[0..1] of PBitmap;
  myDBI: PDBufInfo;
begin
  //... allocate bitmap pointers, DBufInfo, set up viewports, create Ports etc.
  myDBI^.dbi_SafeMessage.mn_ReplyPort := ports[0];
  myDBI^.dbi_DispMessage.mn_ReplyPort := ports[1];
  while not done do
  begin
    if not SafeToWrite then
    begin
      while GetMsg(ports[0]) = nil do
        Wait(1 shl ports[0]^.mp_SigBit);
    end;
    SafeToWrite: = True;
// ... render to bitmap # CurBuffer.
    if not SafeToChange then
    begin
      while GetMsg(ports[1]) = nil do
        Wait(1 shl ports[1]^.mp_SigBit);
    end;
    SafeToChange := True;
    WaitBlit();         // be sure rendering has finished
    ChangeVPBitMap(vp, BmPtrs[CurBuffer], myDBI);
    SafeToChange := False;
    SafeToWrite := False;
    CurBuffer := (CurBuffer + 1) and 1; /* toggle current buffer */
  end;
  if not SafeToChange then
  begin
    while GetMsg(ports[1]) = nil do
      Wait(1 shl ports[1]^.mp_SigBit);
  end;
  if not SafeToWrite then
  begin
    while GetMsg(ports[0]) = nil do
      Wait(1 shl ports[0]^.mp_SigBit);
  end;
end;
</code>
</descr>
<errors>
</errors>
<seealso>
<link id="FreeDBufInfo"/>
<link id="ChangeVPBitMap"/>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="AllocDBufInfo.Result">
<short>Returns 0 if there is no memory available or if the display mode
  of the viewport does not support double-buffering.</short>
</element>

<!-- argument Visibility: default -->
<element name="AllocDBufInfo.Vp">
<short>A pointer to a ViewPort structure.</short>
</element>

<!-- function Visibility: default -->
<element name="AllocRaster">
<short>Allocate space for a bitplane.</short>
<descr><p>This function calls the memory allocation routines
  to allocate memory space for a bitplane "width" bits
  wide and "height" bits high.</p>
<p>In order to assure proper alignment of display memory, the
  <link id="AllocBitMap">AllocBitMap()</link> function should be used instead of <var>AllocRaster</var>
  when you wish to allocate display memory (rasters which are attached to a ViewPort or Screen).
</p>
</descr>
<errors>
</errors>
<seealso>
<link id="FreeRaster"/>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="AllocRaster.Result">
<short>Pointer to first word in bitplane, or nil if it was not possible to allocate the desired
amount of memory.</short>
</element>

<!-- argument Visibility: default -->
<element name="AllocRaster.Width">
<short>number of columns in bitplane</short>
</element>

<!-- argument Visibility: default -->
<element name="AllocRaster.Height">
<short>number of rows in bitplane</short>
</element>

<!-- function Visibility: default -->
<element name="AllocSpriteData">
<short>VarArgs Version of <link id="AllocSpriteDataA">AllocSpriteDataA()</link></short>
<descr>
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>

<!-- function Visibility: default -->
<element name="AllocSpriteDataA">
<short>Allocate sprite data and convert from a bitmap.</short>
<descr>
<p>
  Allocate memory to hold a sprite image, and convert the passed-in
  bitmap data to the appropriate format. The tags allow specification
  of width, scaling, and other options.
</p>
</descr>
<errors>
</errors>
<seealso>
<link id="FreeSpriteData"/>
<link id="FreeSprite"/>
<link id="ChangeSprite"/>
<link id="MoveSprite"/>
<link id="GetExtSpriteA"/>
<link id="AllocBitMap"/>
<link id="AllocSpriteData"/>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="AllocSpriteDataA.Result">
<short> a pointer to a ExtSprite structure, or nil if there is
  a failure. You should pass this pointer to <link id="FreeSpriteData">FreeSpriteData()</link> when finished
  with the sprite.</short>
</element>

<!-- argument Visibility: default -->
<element name="AllocSpriteDataA.Bitmap">
<short>Pointer to a bitmap. This bitmap provides the source data for the sprite image.</short>
</element>

<!-- argument Visibility: default -->
<element name="AllocSpriteDataA.TagList">
<short>Tags for defining the Sprite (SPRITEA_*)</short>
</element>

<!-- procedure Visibility: default -->
<element name="AndRectRegion">
<short>Perform 2d AND operation of rectangle with region, leaving result in region.</short>
<descr>Clip away any portion of the region that exists outside
  of the rectangle. Leave the result in region. Unlike the other rect-region primitives, AndRectRegion() cannot
  fail.
</descr>
<errors>
</errors>
<seealso>
<link id="AndRegionRegion"/>
<link id="OrRectRegion"/>
<link id="XorRectRegion"/>
<link id="NewRegion"/>
<link id="ClearRectRegion"/>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="AndRectRegion.Reg">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="AndRectRegion.Rect">
<short></short>
</element>


<!-- function Visibility: default -->
<element name="AndRegionRegion">
<short>Perform 2d AND operation of one region with second region, leaving result in second region.
</short>
<descr>Remove any portion of region2 that is not in region1.
</descr>
<errors>
</errors>
<seealso>
<link id="OrRectRegion"/>
<link id="XorRectRegion"/>
<link id="AndRectRegion"/>
<link id="NewRegion"/>
<link id="ClearRectRegion"/>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="AndRegionRegion.Result">
<short>Returns True if successful operation, returns False if ran out of memory</short>
</element>

<!-- argument Visibility: default -->
<element name="AndRegionRegion.SrcRegion">
<short>A pointer to Region structure</short>
</element>

<!-- argument Visibility: default -->
<element name="AndRegionRegion.DestRegion">
<short>A pointer to Region structure to use and for result
</short>
</element>

<!-- procedure Visibility: default -->
<element name="Animate">
<short>Processes every AnimOb in the current animation list.</short>
<descr>
<p>For every AnimOb in the list:</p>
<ul>
  <li>update its location and velocities</li>
  <li>call the AnimOb's special routine if one is supplied</li>
</ul>
<p>for each component of the AnimOb:</p>
<ul>
  <li>if this sequence times out, switch to the new one</li>
  <li>call this component's special routine if one is supplied</li>
  <li>set the sequence's VSprite's y,x coordinates based on whatever these routines cause</li>
</ul>
</descr>
<errors>
</errors>
<seealso>
<link id="AddAnimOb"/>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="Animate.AnKey">
<short>Address of the variable that points to the head AnimOb</short>
</element>

<!-- argument Visibility: default -->
<element name="Animate.Rp">
<short>Pointer to the RastPort structure</short>
</element>

<!-- function Visibility: default -->
<element name="AreaDraw">
<short>Add a point to a list of end points for areafill.</short>
<descr>Add point to the vector buffer.
</descr>
<errors>
</errors>
<seealso>
<link id="InitArea"/>
<link id="AreaMove"/>
<link id="AreaEllipse"/>
<link id="AreaCircle"/>
<link id="AreaEnd"/>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="AreaDraw.Result">
<short>0 for success, else -1 if no there was no space left in the vector list.
</short>
</element>

<!-- argument Visibility: default -->
<element name="AreaDraw.Rp">
<short>Points to a RastPort structure.</short>
</element>

<!-- argument Visibility: default -->
<element name="AreaDraw.x">
<short>X coordinate of a point in the raster.
</short>
</element>

<!-- argument Visibility: default -->
<element name="AreaDraw.y">
<short>Y coordinate of a point in the raster.</short>
</element>

<!-- function Visibility: default -->
<element name="AreaEllipse">
<short>Add a ellipse to areainfo list for areafill.</short>
<descr>Add an ellipse to the vector buffer. It will be draw when <link id="AreaEnd">AreaEnd()</link> is
  called.
</descr>
<errors>
</errors>
<seealso>
<link id="InitArea"/>
<link id="AreaMove"/>
<link id="AreaDraw"/>
<link id="AreaCircle"/>
<link id="AreaEnd"/>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="AreaEllipse.Result">
<short>0 for success, or -1 if there is no space left in the vector list</short>
</element>

<!-- argument Visibility: default -->
<element name="AreaEllipse.Rp">
<short>A pointer to a RastPort structure</short>
</element>

<!-- argument Visibility: default -->
<element name="AreaEllipse.xCenter">
<short>X coordinate of the centerpoint relative to the rastport.</short>
</element>

<!-- argument Visibility: default -->
<element name="AreaEllipse.yCenter">
<short>Y coordinate of the centerpoint relative to the rastport.</short>
</element>

<!-- argument Visibility: default -->
<element name="AreaEllipse.a">
<short>The horizontal radius of the ellipse (note: a must be > 0)</short>
</element>

<!-- argument Visibility: default -->
<element name="AreaEllipse.b">
<short>The vertical radius of the ellipse (note: b must be > 0)
</short>
</element>

<!-- function Visibility: default -->
<element name="AreaEnd">
<short>Process table of vectors and ellipses and produce areafill.</short>
<descr>Trigger the filling operation.
  Process the vector buffer and generate required
  fill into the raster planes. After the fill is complete, reinitialize
  for the next <link id="AreaMove"/> or <link id="AreaEllipse"/>. Use the raster set up by
  <link id="InitTmpRas"/> when generating an areafill mask.
</descr>
<errors>
There is still a problem when some polygons are filled that
pixels are missing. This could be due to the way lines are
drawn. All lines should be drawn from lower
y coordinates to higher y coordinates since this is the
way the algorithm calculates lines here. For example, it
might make a difference whether a line is drawn from lower
to higher y coordinates.
</errors>
<seealso>
<link id="InitArea"/>
<link id="AreaMove"/>
<link id="AreaDraw"/>
<link id="AreaEllipse"/>
<link id="AreaCircle"/>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="AreaEnd.Result">
<short>0 for success, or -1 if an error occurred anywhere.</short>
</element>

<!-- argument Visibility: default -->
<element name="AreaEnd.Rp">
<short>A pointer to a RastPort structure which specifies where the filled regions will be rendered to.</short>
</element>

<!-- function Visibility: default -->
<element name="AreaMove">
<short>Define a new starting point for a new shape in the vector list.</short>
<descr>Close  the last polygon and start another polygon
  at  (x,y). Add the necessary  points  to  vector
  buffer. Closing a polygon may result in the generation
  of another <link id="AreaDraw">AreaDraw()</link> to close previous polygon.
  Remember to have an initialized <link id="TAreaInfo"/> structure attached
  to the RastPort.
</descr>
<errors>
</errors>
<seealso>
<link id="InitArea"/>
<link id="AreaEnd"/>
<link id="AreaDraw"/>
<link id="AreaEllipse"/>
<link id="AreaCircle"/>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="AreaMove.Result">
<short>0 for success, or -1 if there is no space left in the
  vector list</short>
</element>

<!-- argument Visibility: default -->
<element name="AreaMove.Rp">
<short>Points to a RastPort structure</short>
</element>

<!-- argument Visibility: default -->
<element name="AreaMove.x">
<short>X position in Raster</short>
</element>

<!-- argument Visibility: default -->
<element name="AreaMove.y">
<short>Y position in Raster</short>
</element>

<!-- procedure Visibility: default -->
<element name="AskFont">
<short>Get the text attributes of the current font</short>
<descr>This function fills the text attributes structure with the
  attributes of the current font in the RastPort.
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="AskFont.Rp">
<short>The RastPort from which the text attributes are extracted</short>
</element>

<!-- argument Visibility: default -->
<element name="AskFont.TextAttr">
<short>The TextAttr structure to be filled.  Note that there is no support for a <link id="TTextAttr"/>.</short>
</element>

<!-- function Visibility: default -->
<element name="AskSoftStyle">
<short>Get the soft style bits of the current font.</short>
<descr>This function returns those style bits of the current font
  that are not intrinsic in the font itself, but
  algorithmically generated.  These are the bits that are
  valid to set in the enable mask for <link id="SetSoftStyle">SetSoftStyle()</link>.

</descr>
<errors>
</errors>
<seealso>
<link id="SetSoftStyle"/>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="AskSoftStyle.Result">
<short>Those bits in the style algorithmically generated. Style bits that are not defined are also set.
</short>
</element>

<!-- argument Visibility: default -->
<element name="AskSoftStyle.Rp">
<short>The RastPort from which the font and style are extracted.
</short>
</element>

<!-- function Visibility: default -->
<element name="AttachPalExtra">
<short>Allocate and attach a palette sharing structure to a colormap</short>
<descr><p>Allocates and attaches a PalExtra structure to a ColorMap.
  This is necessary for color palette sharing to work. The
  PalExtra structure will be freed by <link id="FreeColorMap">FreeColorMap()</link>.
  The set of available colors will be determined by the mode
  and depth of the viewport.</p>
<p><b>Note:</b></p>
<p>This function is for use with custom ViewPorts and custom ColorMaps,
  as Intuition attaches a PalExtra to all of its Screens.
  If there is already a PalExtra associated with the ColorMap, then
  this function will do nothing.</p>
</descr>
<errors>
</errors>
<seealso>
<link id="GetColorMap"/>
<link id="FreeColorMap"/>
<link id="ObtainPen"/>
<link id="ObtainBestPenA"/>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="AttachPalExtra.Result">
<short>0 if sucessful, else an error number. The only currently defined error number is out of memory (1).
</short>
</element>

<!-- argument Visibility: default -->
<element name="AttachPalExtra.Cm">
<short>A pointer to a color map created by <link id="GetColorMap">GetColorMap()</link>.</short>
</element>

<!-- argument Visibility: default -->
<element name="AttachPalExtra.Vp">
<short>A pointer to the viewport structure associated with the ColorMap.</short>
</element>

<!-- function Visibility: default -->
<element name="AttemptLockLayerRom">
<short>Attempt to Lock Layer structure by ROM(gfx lib) code</short>
<descr>Query the current state of the lock on this Layer. If it is
  already locked then return False, could not lock. If the
  Layer was not locked then lock it and return True.
  This call does not destroy any registers.
  This call nests so that callers in this chain will not lock
  themselves out.
</descr>
<errors>
</errors>
<seealso>
<link id="LockLayerRom"/>
<link id="UnlockLayerRom"/>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="AttemptLockLayerRom.Result">
<short>True or False depending on whether the Layer was
    successfully locked by the caller.</short>
</element>

<!-- argument Visibility: default -->
<element name="AttemptLockLayerRom.l">
<short>pointer to Layer structure</short>
</element>

<!-- function Visibility: default -->
<element name="BestModeIDA">
<short>Calculate the best ModeID with given parameters</short>
<descr><p>
  This function takes into account the Compatability of the Monitor
  being matched to, and the source ViewPort or ModeID.
  Incompatibilitys will cause a result of <link id="INVALID_ID"/>.</p>
<p>
  <link id="BIDTAG_NominalWidth"/>, <link id="BIDTAG_NominalHeight"/>,
  <link id="BIDTAG_DesiredWidth"/>, <link id="BIDTAG_DesiredHeight"/>, must all be non-0.</p>
<p>
  The comparisons are made against the DimensionInfo->Nominal values.
  ie, this will not return a best fit against overscan dimensions.</p>
<p><b>Examples:</b></p>
<p>IFF Display Program with a HAM image, to be displayed in the same
  monitor type as the Workbench ViewPort.</p>
<code>
ID := BestModeID([BIDTAG_NominalWidth,  IFFImage^.Width,
                  BIDTAG_NominalHeight, IFFImage^.Height,
                  BIDTAG_Depth,         IFFImage^.Depth,
                  BIDTAG_DIPFMustHave,  DIPF_IS_HAM,
                  BIDTAG_MonitorID,     (GetVPModeID(WbVP) and MONITOR_ID_MASK)]);
</code>
<p>To make an interlace version of a ViewPort:</p>
<code>
ID := BestModeID([BIDTAG_ViewPort, ThisViewPort,
                  BIDTAG_MustHave, DIFP_IS_LACE]);
</code>
</descr>
<errors>
</errors>
<seealso>
<link id="BestModeID"/>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="BestModeIDA.Result">
<short>ID of the best mode to use, or <link id="INVALID_ID"/> if a match could not be found.</short>
</element>

<!-- argument Visibility: default -->
<element name="BestModeIDA.Tags">
<short>A pointer to an array of TagItems. (BIDTAGS_*)</short>
</element>

<!-- procedure Visibility: default -->
<element name="BitMapScale">
<short>Perform raster scaling on a bit map.</short>
<descr><p>Scale a source bit map to a non-overlapping destination
  bit map.</p>
<p>Overlapping source and destination bitmaps are not supported
  Make sure that you provide enough memory for the destination
  bitmap to hold the result</p>
<p>In the destination bitmap only the area where the scaled
  source bitmap is put into is changed. A frame of the old
  bitmap is left.</p>
<p>Pass a BitScaleArgs structure filled with the following arguments
to this function:</p>
<dl>
  <dt>bsa_SrcX, bsa_SrcY</dt><dd>upper left coordinate in source bitmap</dd>
  <dt>bsa_SrcWidth, bsa_SrcHeight</dt><dd>Width and Height of source bitmap</dd>
  <dt>bsa_DestX, bsa_DestY</dt><dd>upper left coordinate in destination bitmap</dd>
  <dt>bsa_DestWidth, bsa_DestHeight</dt><dd>this function will set these
        values. Use the bsa_???Factor for scaling</dd>
  <dt>bsa_XSrcFactor:bsa_XDestFactor</dt><dd>Set these to get approximately
        the same ratio as bsa_SrcWidth:bsa_DestWidth, but
        usually not exactly the same number.</dd>
  <dt>bsa_YSrcFactor:bsa_YDestFactor</dt><dd>Set these to get approximately
        the same ratio as bsa_SrcHeight:DestHeight, but
        usually not exactly the same number.</dd>
  <dt>bsa_SrcBitMap</dt><dd>pointer to source bitmap to be scaled</dd>
  <dt>bsa_DestBitMap</dt><dd>pointer to destination bitmap which will
                   hold the scaled bitmap. Make sure it's
                   big enough!</dd>
  <dt>bsa_Flags</dt><dd>reserved for future use. Set it to zero!</dd>
  <dt>bsa_XDDA, bsa_YDDA</dt><dd>for future use.</dd>
  <dt>bsa_Reserved1, bsa_Reserved2</dt><dd>for future use.</dd>
</dl>
<p>bsa_DestWidth and bsa_DestHeight will be set by this function</p>
</descr>
<errors>
</errors>
<seealso>
<link id="ScalerDiv"/>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="BitMapScale.BitScaleArgs">
<short>Structure of parameters describing scale</short>
</element>

<!-- function Visibility: default -->
<element name="BltBitMap">
<short>Move a rectangular region of bits in a BitMap.</short>
<descr><p>Perform non-destructive blits to move a rectangle from one
  area in a BitMap to another area, which can be on a different
  BitMap.
  This blit is assumed to be friendly: no error conditions (e.g.
  a rectangle outside the BitMap bounds) are tested or reported.</p>
<p>If a special hardware is available, this function will use it.</p>
<p>MinTerm:</p>
<p>How to copy. Most useful values are 0x00C0 for a vanilla
        copy, 0x0030 to invert the source and then copy or 0x0050
        to ignore the source and just invert the destination. If
        you want to calculate other values, then you must know that
        channel A is set, if you are inside the rectangle, channel
        B is the source and channel C is the destination of the
        rectangle.</p>
<table>
<th><td>Bit</td><td>ABC</td></th>
<tr><td>0</td><td>000</td></tr>
<tr><td>1</td><td>001</td></tr>
<tr><td>2</td><td>010</td></tr>
<tr><td>3</td><td>011</td></tr>
<tr><td>4</td><td>100</td></tr>
<tr><td>5</td><td>101</td></tr>
<tr><td>6</td><td>110</td></tr>
<tr><td>7</td><td>111</td></tr>
</table>
<p>
        So 0x00C0 means: D is set if one is inside the rectangle
        (A is set) and B (the source) is set and cleared otherwise.</p>
<p>
        To fill the rectangle, you would want to set D when A is
        set, so the value is 0x00F0.
</p>
</descr>
<errors>
</errors>
<seealso>
<link id="ClipBlit"/>
<link id="BltBitMapRastPort"/>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="BltBitMap.Result">
<short>The number of planes actually involved in the blit.</short>
</element>

<!-- argument Visibility: default -->
<element name="BltBitMap.SrcBitMap">
<short>Copy from this bitmap. as a special case, if a plane pointer in the SrcBitMap
        is nil, it acts as a pointer to a plane of all zeros, and
        if the plane pointer is $ffffffff, it acts as a pointer
        to a plane of all ones.</short>
</element>

<!-- argument Visibility: default -->
<element name="BltBitMap.xSrc">
<short>Top Left corner of the Source rectangle </short>
</element>

<!-- argument Visibility: default -->
<element name="BltBitMap.ySrc">
<short>Valid range is positive
      signed integer such that the raster word's offset
      0..(32767-Size)</short>
</element>

<!-- argument Visibility: default -->
<element name="BltBitMap.DestBitMap">
<short>Copy to this bitmap. May be the same as srcBitMap.</short>
</element>

<!-- argument Visibility: default -->
<element name="BltBitMap.xDest">
<short>the x and y coordinates of the upper left
      corner of the destination for the rectangle.  </short>
</element>

<!-- argument Visibility: default -->
<element name="BltBitMap.yDest">
<short>Valid range is as for Src.</short>
</element>

<!-- argument Visibility: default -->
<element name="BltBitMap.xSize">
<short>The size of the rectangle to be moved.</short>
</element>

<!-- argument Visibility: default -->
<element name="BltBitMap.ySize">
<short>Valid range is (X: 1..976; Y: 1..1023 such that final raster word's offset is 0..32767)</short>
</element>

<!-- argument Visibility: default -->
<element name="BltBitMap.MinTerm">
<short>See description</short>
</element>

<!-- argument Visibility: default -->
<element name="BltBitMap.Mask">
<short>the write mask to apply to this operation.  Bits set
      indicate the corresponding planes (if not greater than
      the minimum plane count) are to participate in the
      operation.  Typically this is set to $ff.</short>
</element>

<!-- argument Visibility: default -->
<element name="BltBitMap.TempA">
<short>If the copy overlaps exactly to the left or right
      (i.e. the scan line addresses overlap), and TempA is
      non-zero, it points to enough chip accessible memory
      to hold a line of A source for the blit (ie CHIP RAM).
      BltBitMap will allocate (and free) the needed TempA if
      none is provided and one is needed.  Blit overlap is
      determined from the relation of the first non-masked
      planes in the source and destination bit maps.</short>
</element>

<!-- procedure Visibility: default -->
<element name="BltBitMapRastPort">
<short>Blit from source bitmap to destination rastport.</short>
<descr><p>Blits from source bitmap to position specified in destination rastport
  using minterm.</p>
<p>MinTerm:</p>
<p>How to copy. Most useful values are 0x00C0 for a vanilla
        copy, 0x0030 to invert the source and then copy or 0x0050
        to ignore the source and just invert the destination. If
        you want to calculate other values, then you must know that
        channel A is set, if you are inside the rectangle, channel
        B is the source and channel C is the destination of the
        rectangle.</p>
<table>
<th><td>Bit</td><td>ABC</td></th>
<tr><td>0</td><td>000</td></tr>
<tr><td>1</td><td>001</td></tr>
<tr><td>2</td><td>010</td></tr>
<tr><td>3</td><td>011</td></tr>
<tr><td>4</td><td>100</td></tr>
<tr><td>5</td><td>101</td></tr>
<tr><td>6</td><td>110</td></tr>
<tr><td>7</td><td>111</td></tr>
</table>
<p>
        So 0x00C0 means: D is set if one is inside the rectangle
        (A is set) and B (the source) is set and cleared otherwise.</p>
<p>
        To fill the rectangle, you would want to set D when A is
        set, so the value is 0x00F0.
</p>
</descr>
<errors>
</errors>
<seealso>
<link id="BltMaskBitMapRastPort"/>
<link id="ClipBlit"/>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="BltBitMapRastPort.SrcBitMap">
<short>A pointer to the source bitmap</short>
</element>

<!-- argument Visibility: default -->
<element name="BltBitMapRastPort.xSrc">
<short>X offset into source bitmap</short>
</element>

<!-- argument Visibility: default -->
<element name="BltBitMapRastPort.ySrc">
<short>Y offset into source bitmap</short>
</element>

<!-- argument Visibility: default -->
<element name="BltBitMapRastPort.DestRP">
<short>A pointer to the destination rastport</short>
</element>

<!-- argument Visibility: default -->
<element name="BltBitMapRastPort.xDest">
<short>X offset into dest rastport</short>
</element>

<!-- argument Visibility: default -->
<element name="BltBitMapRastPort.yDest">
<short>Y offset into dest rastport</short>
</element>

<!-- argument Visibility: default -->
<element name="BltBitMapRastPort.xSize">
<short>Width of blit in pixels</short>
</element>

<!-- argument Visibility: default -->
<element name="BltBitMapRastPort.ySize">
<short>Height of blit in rows</short>
</element>

<!-- argument Visibility: default -->
<element name="BltBitMapRastPort.MinTerm">
<short>Minterm to use for this blit see description</short>
</element>

<!-- procedure Visibility: default -->
<element name="BltClear">
<short>Clear a block of memory words to zero.</short>
<descr><p>For memory that is local and blitter accessible, the most
  efficient way to clear a range of memory locations is
  to use the system's most efficient data mover, the blitter.
  This command accepts the starting location and count and clears
  that block to zeros.</p>
<p><b>THIS FUNCTION IS DEPRECATED</b></p>
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="BltClear.MemBlock">
<short>pointer to local memory to be cleared memBlock is assumed to be even.</short>
</element>

<!-- argument Visibility: default -->
<element name="BltClear.ByteCount">
<short>if bit 1 is set to 1: bytecount contains an even number of bytes to clear
       if bit 1 is set to 0: low 16 bits are taken as number of bytes per row and upper 16 bits are taken as number of rows.
</short>
</element>

<!-- argument Visibility: default -->
<element name="BltClear.Flags">
<short>set bit 0 to force function to wait until the blit is done. set bit 1 to use row/bytesperrow.</short>
</element>

<!-- procedure Visibility: default -->
<element name="BltMaskBitMapRastPort">
<short>Blit from source bitmap to destination rastport
  with masking of source image.
</short>
<descr>
Blits from source bitmap to position specified in destination rastport
  using bltmask to determine where source overlays destination, and
  minterm to determine whether to copy the source image "as is" or
  to "invert" the sense of the source image when copying. In either
  case, blit only occurs where the mask is non-zero.

</descr>
<errors>
</errors>
<seealso>
<link id="BltBitMapRastPort"/>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="BltMaskBitMapRastPort.SrcBitMap">
<short>A pointer to the source bitmap</short>
</element>

<!-- argument Visibility: default -->
<element name="BltMaskBitMapRastPort.xSrc">
<short>X offset into source bitmap</short>
</element>

<!-- argument Visibility: default -->
<element name="BltMaskBitMapRastPort.ySrc">
<short>Y offset into source bitmap</short>
</element>

<!-- argument Visibility: default -->
<element name="BltMaskBitMapRastPort.DestRP">
<short>A pointer to the destination rastport</short>
</element>

<!-- argument Visibility: default -->
<element name="BltMaskBitMapRastPort.xDest">
<short>X offset into dest rastport</short>
</element>

<!-- argument Visibility: default -->
<element name="BltMaskBitMapRastPort.yDest">
<short>Y offset into dest rastport</short>
</element>

<!-- argument Visibility: default -->
<element name="BltMaskBitMapRastPort.xSize">
<short>Width of blit in pixels</short>
</element>

<!-- argument Visibility: default -->
<element name="BltMaskBitMapRastPort.ySize">
<short>Height of blit in rows</short>
</element>

<!-- argument Visibility: default -->
<element name="BltMaskBitMapRastPort.MinTerm">
<short>either (ABC or ABNC or ANBC) if copy source and blit thru mask
            or (ANBC) if invert source and blit thru mask</short>
</element>

<!-- argument Visibility: default -->
<element name="BltMaskBitMapRastPort.bltMask">
<short>A pointer to the single bit-plane mask, which must be the
            same size and dimensions as the planes of the
            source bitmap.</short>
</element>

<!-- procedure Visibility: default -->
<element name="BltPattern">
<short>Using standard drawing rules for areafill, blit through a mask.</short>
<descr>Blit using drawmode,areafill pattern, and mask
       at position rectangle (xl,yl) (maxx,maxy).

</descr>
<errors>
</errors>
<seealso>
<link id="AreaEnd"/>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="BltPattern.Rp">
<short>Points to the destination RastPort for the blit.</short>
</element>

<!-- argument Visibility: default -->
<element name="BltPattern.mask">
<short>points to 2 dimensional mask if needed if mask = nil then use a rectangle.</short>
</element>

<!-- argument Visibility: default -->
<element name="BltPattern.xMin">
<short>coordinates of upper left of rectangular region in RastPort</short>
</element>

<!-- argument Visibility: default -->
<element name="BltPattern.yMin">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="BltPattern.xMax">
<short>points to lower right of rectangular region in RastPort</short>
</element>

<!-- argument Visibility: default -->
<element name="BltPattern.yMax">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="BltPattern.ByteCnt">
<short>BytesPerRow for mask</short>
</element>

<!-- procedure Visibility: default -->
<element name="BltTemplate">
<short>Cookie cut a shape in a rectangle to the RastPort.</short>
<descr><p>This function draws the image in the template into the
  RastPort in the current color and drawing mode at the
  specified position.  The template is assumed not to overlap
  the destination.
  If the template falls outside the RastPort boundary, it is
  truncated to that boundary.</p>

<p><b>Note:</b></p>
<p>The SrcTemplate pointer should point to the "nearest" word
     (rounded down) of the template mask. Fine alignment of the mask
     is achieved by setting the SrcX bit offseet within the range
     of 0 to 15 decimal.</p>
</descr>
<errors>
</errors>
<seealso>
<link id="BltBitMap"/>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="BltTemplate.Source">
<short>A pointer to the first (nearest) word of the template mask.</short>
</element>

<!-- argument Visibility: default -->
<element name="BltTemplate.xSrc">
<short>X bit offset into the template mask (range 0..15).</short>
</element>

<!-- argument Visibility: default -->
<element name="BltTemplate.srcMod">
<short>Number of bytes per row in template mask.</short>
</element>

<!-- argument Visibility: default -->
<element name="BltTemplate.DestRP">
<short>A pointer to destination RastPort.</short>
</element>

<!-- argument Visibility: default -->
<element name="BltTemplate.xDest">
<short>x coordinate of the upper left corner of the destination for the blit.</short>
</element>

<!-- argument Visibility: default -->
<element name="BltTemplate.yDest">
<short>y coordinate of the upper left corner of the destination for the blit.</short>
</element>

<!-- argument Visibility: default -->
<element name="BltTemplate.xSize">
<short>x size of the rectangle to be used as the template.</short>
</element>

<!-- argument Visibility: default -->
<element name="BltTemplate.ySize">
<short>y size of the rectangle to be used as the template.</short>
</element>

<!-- function Visibility: default -->
<element name="CalcIVG">
<short>Calculate the number of blank lines above a ViewPort</short>
<descr>To calculate the maximum number of blank lines above a viewport needed to
  load all the copper instructions, after accounting for the viewport
  bandwidth and size.
</descr>
<errors>
<b>This function is unimplemented.</b>
</errors>
<seealso>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="CalcIVG.Result">
<short>the number of ViewPort resolution scan lines needed
        to execute all the copper instructions for ViewPort,
        or 0 if any error</short>
</element>

<!-- argument Visibility: default -->
<element name="CalcIVG.View">
<short>A pointer to the View</short>
</element>

<!-- argument Visibility: default -->
<element name="CalcIVG.ViewPort">
<short>A pointer to the ViewPort you are interested in</short>
</element>

<!-- procedure Visibility: default -->
<element name="CBump">
<short>Increment user copper list pointer (bump to next position in list).</short>
<descr><p>Increment pointer to space for next instruction in user copper list.</p>
<p><b>Note:</b></p>
<p>CBump is usually invoked for the programmer as part of the
 helper functions <link id="CWAIT"/> or <link id="CMOVE"/>.</p>
</descr>
<errors>
</errors>
<seealso>
<link id="CWAIT"/>
<link id="CMOVE"/>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="CBump.CopList">
<short>A pointer to UCopList structure
</short>
</element>

<!-- function Visibility: default -->
<element name="ChangeExtSprite">
<short>VarArgs version of <link id="ChangeExtSpriteA"/></short>
<descr>
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>

<!-- function Visibility: default -->
<element name="ChangeExtSpriteA">
<short>Change the sprite image pointer.</short>
<descr>Attempt to change which sprite is displayed for a given
  sprite engine.
</descr>
<errors>
</errors>
<seealso>
<link id="ChangeExtSprite"/>
<link id="FreeSprite"/>
<link id="ChangeSprite"/>
<link id="MoveSprite"/>
<link id="AllocSpriteDataA"/>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="ChangeExtSpriteA.Result">
<short>0 if there was an error.</short>
</element>

<!-- argument Visibility: default -->
<element name="ChangeExtSpriteA.Vp">
<short>A pointer to ViewPort structure that this sprite is relative to, or nil if relative only top of View</short>
</element>

<!-- argument Visibility: default -->
<element name="ChangeExtSpriteA.Oldsprite">
<short>A pointer the old ExtSprite structure</short>
</element>

<!-- argument Visibility: default -->
<element name="ChangeExtSpriteA.NewSprite">
<short>A pointer to the new ExtSprite structure.</short>
</element>

<!-- argument Visibility: default -->
<element name="ChangeExtSpriteA.Tags">
<short>Tags for change the Sprite (GSTAG_*)</short>
</element>

<!-- procedure Visibility: default -->
<element name="ChangeSprite">
<short>Change the sprite image pointer.</short>
<descr>The sprite image is changed to use the data starting at newdata
</descr>
<errors>
<b>This function is unimplemented.</b>
</errors>
<seealso>
<link id="FreeSprite"/>
<link id="ChangeExtSpriteA"/>
<link id="MoveSprite"/>
<link id="AddVSprite"/>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="ChangeSprite.Vp">
<short>Pointer to ViewPort structure that this sprite is
      relative to,  or nil if relative only top of View</short>
</element>

<!-- argument Visibility: default -->
<element name="ChangeSprite.s">
<short>Pointer to SimpleSprite structure</short>
</element>

<!-- argument Visibility: default -->
<element name="ChangeSprite.NewData">
<short>Pointer to new data structure</short>
</element>

<!-- procedure Visibility: default -->
<element name="ChangeVPBitMap">
<short>Change display memory address for multi-buffered animation</short>
<descr><p>Changes the area of display memory which will be displayed in a
  viewport. This can be used to implement double (or triple)
  buffering, a method of achieving smooth animation.</p>
<p>This will set the vp^.RasInfo^.BitMap field to the bm pointer which is
  passed.</p>
<p>
  When using the synchronization features, you <b>must</b> carefully insure that
  all messages have been replied to before calling <link id="FreeDBufInfo"/> or
  calling <var>ChangeVPBitMap</var> with the same DBufInfo.
</p>
</descr>
<errors>
</errors>
<seealso>
<link id="AllocDBufInfo"/>
<link id="AllocBitMap"/>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="ChangeVPBitMap.Vp">
<short>A pointer to a viewport</short>
</element>

<!-- argument Visibility: default -->
<element name="ChangeVPBitMap.Bm">
<short>This BitMap structure must be
        of the same layout as the one attached to the viewport (same
        depth, alignment, and BytesPerRow).</short>
</element>

<!-- argument Visibility: default -->
<element name="ChangeVPBitMap.Db">
<short>A pointer to a DBufInfo.</short>
</element>

<!-- procedure Visibility: default -->
<element name="ClearEOL">
<short>Clear from current position to end of line.
</short>
<descr>Clear a rectangular swath from the current position to the
  right edge of the rastPort.  The height of the swath is taken
  from that of the current text font, and the vertical
  positioning of the swath is adjusted by the text baseline,
  such that text output at this position would lie wholly on
  this newly cleared area.
  Clearing consists of setting the color of the swath to zero,
  or, if the DrawMode is 2, to the BgPen. This function may use the blitter.
</descr>
<errors>
</errors>
<seealso>
<link id="GfxText"/>
<link id="ClearScreen"/>
<link id="SetRast"/>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="ClearEOL.Rp">
<short>A pointer to RastPort structure
</short>
</element>

<!-- procedure Visibility: default -->
<element name="ClearScreen">
<short>Clear from current position to end of RastPort.</short>
<descr>Clear a rectangular swath from the current position to the
  right edge of the rastPort with <link id="ClearEOL">ClearEOL()</link>, then clear the rest
  of the screen from just beneath the swath to the bottom of
  the rastPort.
  Clearing consists of setting the color of the swath to zero,
  or, if the DrawMode is 2, to the BgPen. This function may use the blitter.
</descr>
<errors>
</errors>
<seealso>
<link id="ClearEOL"/>
<link id="GfxText"/>
<link id="SetRast"/>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="ClearScreen.Rp">
<short>A pointer to RastPort structure</short>
</element>

<!-- procedure Visibility: default -->
<element name="ClipBlit">
<short>Calls <link id="BltBitMap">BltBitMap()</link> after accounting for windows</short>
<descr><p>
  Performs the same function as <link id="BltBitMap">BltBitMap()</link>, except that it
  takes into account the Layers and ClipRects of the layer library,
  all of which are (and should be) transparent to you.  So, whereas
  <link id="BltBitMap">BltBitMap()</link> requires pointers to BitMaps, ClipBlit requires pointers to
  the RastPorts that contain the Bitmaps, Layers, etcetera.</p>
<p>
  If you are going to blit blocks of data around via the RastPort of your
  Intuition Window, you must call this routine (rather than <link id="BltBitMap">BltBitMap()</link>).</p>
<p>
  Either the Src RastPort, the Dest RastPort, both, or neither, can have
  Layers. This routine takes care of all cases.</p>
<p>
  See <link id="BltBitMap">BltBitMap()</link> for a thorough explanation.</p>
</descr>
<errors>
</errors>
<seealso>
<link id="BltBitMap"/>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="ClipBlit.SrcRP">
<short>A pointer to the RastPort of the source for your blit</short>
</element>

<!-- argument Visibility: default -->
<element name="ClipBlit.xSrc">
<short>The left offset into Src for your data</short>
</element>

<!-- argument Visibility: default -->
<element name="ClipBlit.ySrc">
<short>The top offset into Src for your data</short>
</element>

<!-- argument Visibility: default -->
<element name="ClipBlit.DestRP">
<short>A pointer to the RastPort to receive the blitted data</short>
</element>

<!-- argument Visibility: default -->
<element name="ClipBlit.xDest">
<short>The left offset into the destination RastPort</short>
</element>

<!-- argument Visibility: default -->
<element name="ClipBlit.yDest">
<short>The top offset into the destination RastPort</short>
</element>

<!-- argument Visibility: default -->
<element name="ClipBlit.xSize">
<short>the width of the blit (must be ta least 1)</short>
</element>

<!-- argument Visibility: default -->
<element name="ClipBlit.ySize">
<short>the height of the blit (must be at least 1)</short>
</element>

<!-- argument Visibility: default -->
<element name="ClipBlit.MinTerm">
<short>the boolean blitter function, where SRCB is associated  with the Src RastPort and SRCC goes to the Dest RastPort. see <link id="BltBitMap"/>
</short>
</element>

<!-- procedure Visibility: default -->
<element name="CloseFont">
<short>Release a pointer to a system font.</short>
<descr>This function indicates that the font specified is no longer
  in use.  It is used to close a font opened by <link id="OpenFont">OpenFont()</link>, so
  that fonts that are no longer in use do not consume system
  resources.
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="CloseFont.TextFont">
<short>A font pointer as returned by <link id="OpenFont">OpenFont()</link> or <link id="diskfont.OpenDiskFont">OpenDiskFont()</link></short>
</element>

<!-- function Visibility: default -->
<element name="CloseMonitor">
<short>Close a MonitorSpec</short>
<descr>Relinquish access to a MonitorSpec.
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="CloseMonitor.Result">
<short>False if MonitorSpec closed uneventfully. True if MonitorSpec could not be closed.</short>
</element>

<!-- argument Visibility: default -->
<element name="CloseMonitor.Monitor_Spec">
<short> A pointer to a TMonitorSpec opened via <link id="OpenMonitor">OpenMonitor()</link>,
  or nil.</short>
</element>

<!-- procedure Visibility: default -->
<element name="CMove">
<short>Append copper move instruction to user copper list.</short>
<descr>Add a copper move instruction to the given user copper list.
The copper is told to move a value to register reg.
If you are using <link id="CMOVE">CMOVE()</link> a call to <link id="CMove">CMove()</link> and <link id="CBump">CBump()</link> will
be made.
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="CMove.CopList">
<short>A pointer to a UCopList structure</short>
</element>

<!-- argument Visibility: default -->
<element name="CMove.Reg">
<short>Hardware register</short>
</element>

<!-- argument Visibility: default -->
<element name="CMove.Value">
<short>16 bit value to be moved to the hardware register</short>
</element>

<!-- function Visibility: default -->
<element name="CoerceMode">
<short>Calculate ViewPort mode coercion</short>
<descr><p>To determine the best mode in the MonitorID to coerce RealViewPort to,
  given the restrictions set in Flags.</p>
<p>This function takes into account the compatibility of the Monitor
  being coerced to, and the ViewPort that is being coerced.
  Incompatibilities will cause a result of <link id="INVALID_ID"/>.
</p>
<p><b>Snippet</b></p>
<code>
newmode := CoerceMode(vp, VGA_MONITOR_ID, PRESERVE_COLORS);
</code>
</descr>
<errors>
<b>This function is unimplemented.</b>
</errors>
<seealso>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="CoerceMode.Result">
<short>ID of best mode to coerce to, or INVALID_ID if could not coerce
</short>
</element>

<!-- argument Visibility: default -->
<element name="CoerceMode.RealViewPort">
<short>ViewPort to coerce</short>
</element>

<!-- argument Visibility: default -->
<element name="CoerceMode.MonitorID">
<short>Monitor number to coerce to (i.e. a mode masked with <link id="MONITOR_ID_MASK"/>)</short>
</element>

<!-- argument Visibility: default -->
<element name="CoerceMode.Flags">
<short><link id="PRESERVE_COLORS"/> = keep the number of bitplanes in the ViewPort
<link id="AVOID_FLICKER"/> = do not coerce to an interlace mode</short>
</element>

<!-- procedure Visibility: default -->
<element name="CopySBitMap">
<short>Syncronize Layer window with contents of Super BitMap
</short>
<descr>This is the inverse of SyncSBitMap(). Copy all bits from SuperBitMap to Layer bounds.
This is used for those functions that do not want to deal with the ClipRect structures but do want
to be able to work with a SuperBitMap Layer.
</descr>
<errors>
</errors>
<seealso>
<link id="LockLayerRom"/>
<link id="SyncSBitMap"/>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="CopySBitMap.l">
<short>A pointer to a SuperBitMap Layer The Layer must already be locked by the caller.
</short>
</element>

<!-- procedure Visibility: default -->
<element name="CWait">
<short>Append copper wait instruction to user copper list.</short>
<descr>Add instruction to wait for vertical beam position v and
  horizontal position h to this intermediate copper list.
</descr>
<errors>
It's illegal to wait for horizontal values greater than 222 decimal!
</errors>
<seealso>
<link id="CMOVE"/>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="CWait.CopList">
<short>A pointer to UCopList structure</short>
</element>

<!-- argument Visibility: default -->
<element name="CWait.V">
<short>vertical beam position (relative to top of viewport)</short>
</element>

<!-- argument Visibility: default -->
<element name="CWait.H">
<short>horizontal beam position</short>
</element>

<!-- procedure Visibility: default -->
<element name="DisownBlitter">
<short>Returns blitter to free state.</short>
<descr>Free blitter up for use by other blitter users.
</descr>
<errors>
</errors>
<seealso>
<link id="OwnBlitter"/>
</seealso>
</element>

<!-- procedure Visibility: default -->
<element name="DisposeRegion">
<short>Return all space for this region to free
       memory pool.</short>
<descr>Free all RegionRectangles for this Region then
  free the Region itself.
</descr>
<errors>
</errors>
<seealso>
<link id="NewRegion"/>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="DisposeRegion.Region">
<short>A pointer to Region structure
</short>
</element>

<!-- procedure Visibility: default -->
<element name="DoCollision">
<short>Test every gel in gel list for collisions.
</short>
<descr>Tests each gel in gel list for boundary and gel-to-gel collisions.
  On detecting one of these collisions, the appropriate collision-
  handling routine is called. See the documentation for a thorough
  description of which collision routine is called. This routine
  expects to find the gel list correctly sorted in Y,X order.
  The system routine <link id="SortGList">SortGList()</link> performs this function for the user.
</descr>
<errors>
</errors>
<seealso>
<link id="InitGels"/>
<link id="SortGList"/>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="DoCollision.Rp">
<short>A pointer to a RastPort
</short>
</element>

<!-- procedure Visibility: default -->
<element name="Draw">
<short>Draw a line between the current pen position and the new x,y position.</short>
<descr>Draw a line from the current pen position to (x,y).
</descr>
<errors>
<p>Not yet implemented:</p>
<ul>
  <li>handle layer^.Scroll_X/Scroll_Y.</li>
  <li>handle <link id="FRST_DOT"/> which indicates whether to draw
    or to don't draw first pixel of line. Important
    for <link id="COMPLEMENT"/> drawmode.</li>
</ul>
</errors>
<seealso>
<link id="GfxMove"/>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="Draw.Rp">
<short>A pointer to the destination RastPort</short>
</element>

<!-- argument Visibility: default -->
<element name="Draw.x">
<short>X coordinate of where in the RastPort to end the line.</short>
</element>

<!-- argument Visibility: default -->
<element name="Draw.y">
<short>Y coordinate of where in the RastPort to end the line.</short>
</element>

<!-- procedure Visibility: default -->
<element name="DrawEllipse">
<short>Draw an ellipse centered at cx,cy with vertical
     and horizontal radii of a,b respectively</short>
<descr>Creates an elliptical outline within the rectangular region
  specified by the parameters, using the current foreground pen color.
  this routine does not clip the ellipse to a non-layered rastport.
</descr>
<errors>
</errors>
<seealso>
<link id="DrawCircle"/>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="DrawEllipse.Rp">
<short>A pointer to the RastPort into which the ellipse will be drawn.</short>
</element>

<!-- argument Visibility: default -->
<element name="DrawEllipse.xCenter">
<short>X coordinate of the centerpoint relative to the rastport.</short>
</element>

<!-- argument Visibility: default -->
<element name="DrawEllipse.yCenter">
<short>Y coordinate of the centerpoint relative to the rastport.</short>
</element>

<!-- argument Visibility: default -->
<element name="DrawEllipse.a">
<short>The horizontal radius of the ellipse (note: a must be > 0)</short>
</element>

<!-- argument Visibility: default -->
<element name="DrawEllipse.b">
<short>The vertical radius of the ellipse (note: b must be > 0)</short>
</element>

<!-- procedure Visibility: default -->
<element name="DrawGList">
<short>Process the gel list, queueing VSprites, drawing Bobs.</short>
<descr>
<p>Performs one pass of the current gel list.</p>
<ul>
  <li>If nextLine and lastColor are defined, these are initialized for each gel.</li>
  <li>If it's a VSprite, build it into the copper list.</li>
  <li>If it's a Bob, draw it into the current raster.</li>
  <li>Copy the save values into the "old" variables,
       double-buffering if required.</li>
</ul>
</descr>
<errors>
</errors>
<seealso>
<link id="InitGels"/>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="DrawGList.Rp">
<short>A pointer to the RastPort where Bobs will be drawn</short>
</element>

<!-- argument Visibility: default -->
<element name="DrawGList.Vp">
<short>A pointer to the ViewPort for which VSprites will be created</short>
</element>

<!-- procedure Visibility: default -->
<element name="EraseRect">
<short>Fill a defined rectangular area using the current BackFill hook.</short>
<descr>Fill the rectangular region specified by the parameters with the
  BackFill hook. If non-layered, the rectangular region specified by
  the parameters is cleared. If layered the <link id="TLayer">^.BackFill</link> Hook is used.
  The following relation <b>must</b> be true: (xmax >= xmin) and (ymax >= ymin)
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="EraseRect.Rp">
<short>A pointer to a RastPort structure</short>
</element>

<!-- argument Visibility: default -->
<element name="EraseRect.xMin">
<short>X coordinate of the upper left corner of the region to fill.</short>
</element>

<!-- argument Visibility: default -->
<element name="EraseRect.yMin">
<short>Y coordinate of the upper left corner of the region to fill.</short>
</element>

<!-- argument Visibility: default -->
<element name="EraseRect.xMax">
<short>X coordinate of the lower right corner of the region to fill.</short>
</element>

<!-- argument Visibility: default -->
<element name="EraseRect.yMax">
<short>Y coordinate of the lower right corner of the region to fill.
</short>
</element>

<!-- function Visibility: default -->
<element name="ExtendFontTags">
<short>VarArgs Version of <link id="ExtendFont">ExtendFont()</link></short>
<descr>
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>

<!-- function Visibility: default -->
<element name="ExtendFont">
<short>Ensure <link id="TTextFont">TTextFont.tf_Extension</link> has been built for a font</short>
<descr>
</descr>
<errors>
</errors>
<seealso>
<link id="ExtendFontTags"/>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="ExtendFont.Result">
<short>1 if the TextFont was properly extended, else 0.</short>
</element>

<!-- argument Visibility: default -->
<element name="ExtendFont.Font">
<short>The font to extend.</short>
</element>

<!-- argument Visibility: default -->
<element name="ExtendFont.FontTags">
<short>An optional taglist.  If nil, then a default is used. Currently, the only tag defined is <link id="TA_DeviceDPI"/>.</short>
</element>

<!-- function Visibility: default -->
<element name="FindColor">
<short>Find the closest matching color in a colormap.</short>
<descr><p>The system will attempt to find the color in the passed colormap
  which most closely matches the RGB values passed. No new pens will
  be allocated, and you should not <link id="ReleasePen">ReleasePen()</link> the returned pen.
  This function is not sensitive to palette sharing issues. Its
  intended use is for:</p>
<ol>
   <li>programs which pop up on public screens when those
              screens are not using palette sharing. You might
              use this function as a fallback when <link id="ObtainBestPenA">ObtainBestPenA()</link>
              says that there are no sharable pens.</li>
<li>Internal color matching by an application which is
              either running on a non-public screen, or which
              wants to match colors to an internal color table
              which may not be associated with any displayed screen.</li>
</ol>
<p>In order to use the MaxPen=-1 feature, you must have initialized
  palette sharing via <link id="AttachPalExtra">AttachPalExtra()</link> (all intuition screens do this).
  Otherwise, MaxPen=-1 will search all colors in the colormap.</p>
</descr>
<errors>
</errors>
<seealso>
<link id="ObtainBestPenA"/>
<link id="GetColorMap"/>
<link id="ObtainPen"/>
<link id="ReleasePen"/>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="FindColor.Result">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="FindColor.Cm">
<short>Colormap</short>
</element>

<!-- argument Visibility: default -->
<element name="FindColor.r">
<short>red level (32 bit left justified fraction)</short>
</element>

<!-- argument Visibility: default -->
<element name="FindColor.g">
<short>green level (32 bit left justified fraction)</short>
</element>

<!-- argument Visibility: default -->
<element name="FindColor.b">
<short>blue level  (32 bit left justified fraction)</short>
</element>

<!-- argument Visibility: default -->
<element name="FindColor.MaxPen">
<short>The maximum entry in the color table to search. A value of
          -1 will limt the search to only those pens which could be
          rendered in (for instance, it will not examine the sprite
          colors on a 4 color screen).</short>
</element>

<!-- function Visibility: default -->
<element name="FindDisplayInfo">
<short>Search for a record identified by a specific key</short>
<descr>
  Given a 32-bit Mode Key, return a handle to a valid DisplayInfoRecord
  found in the graphics database.  Using this handle, you can obtain
  information about this Mode, including its default dimensions,
  properties, and whether it is currently available for use.
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="FindDisplayInfo.Result">
<short>Handle to a displayinfo Record with that key
or nil if no match.</short>
</element>

<!-- argument Visibility: default -->
<element name="FindDisplayInfo.ID">
<short>Unsigned long identifier</short>
</element>

<!-- function Visibility: default -->
<element name="Flood">
<short>Flood rastport like areafill.
</short>
<descr><p>Search the BitMap starting at (x,y).
  Fill all adjacent pixels if they are:</p>
<ul>
    <li>  Mode 0: not the same color as AOLPen</li>
    <li>  Mode 1: the same color as the pixel at (x,y)</li>
</ul>
<p>
  When actually doing the fill use the modes that apply to
  standard areafill routine such as drawmodes and patterns.</p>
<p>In order to use Flood, the destination RastPort must
  have a valid TmpRas raster whose size is as large as
  that of the RastPort.</p>
</descr>
<errors>
</errors>
<seealso>
<link id="AreaEnd"/>
<link id="InitTmpRas"/>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="Flood.Result">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="Flood.Rp">
<short>A pointer to RastPort</short>
</element>

<!-- argument Visibility: default -->
<element name="Flood.Mode">
<short>0 fill all adjacent pixels searching for border.
    1 fill all adjacent pixels that have same pen number
    as the one at (x,y).</short>
</element>

<!-- argument Visibility: default -->
<element name="Flood.x">
<short>X coordinate in BitMap to start the flood fill at.</short>
</element>

<!-- argument Visibility: default -->
<element name="Flood.y">
<short>Y coordinate in BitMap to start the flood fill at.</short>
</element>

<!-- procedure Visibility: default -->
<element name="FontExtent">
<short>Get the font attributes of the current font</short>
<descr>
<p>This function fills the text extent structure with a bounding
  (i.e. maximum) extent for the characters in the specified font.</p>
<p>The TextFont, not the RastPort, is specified -- unlike
  <var>TextExtent()</var>, effect of algorithmic enhancements is not
  included, nor does te_Width include any effect of
  rp_TxSpacing.  The returned te_Width will be negative only
  when <link id="FPF_REVPATH"/> is set in the tf_Flags of the font -- the
  effect of left-moving characters is ignored for the width of
  a normal font, and the effect of right-moving characters is
  ignored if a REVPATH font.  These characters will, however,
  be reflected in the bounding extent.</p>
</descr>
<errors>
</errors>
<seealso>
<link id="TextExtent"/>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="FontExtent.Font">
<short>The TextFont from which the font metrics are extracted.</short>
</element>

<!-- argument Visibility: default -->
<element name="FontExtent.FontExtent">
<short>The TextExtent structure to be filled.</short>
</element>

<!-- procedure Visibility: default -->
<element name="FreeBitMap">
<short>Free a bitmap created by <link id="AllocBitMap">AllocBitMap()</link></short>
<descr>
Frees bitmap and all associated bitplanes. Be careful to insure that any rendering done to the bitmap has
  completed (by calling <link id="WaitBlit">WaitBlit()</link>) before you call this function.
</descr>
<errors>
</errors>
<seealso>
<link id="AllocBitMap"/>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="FreeBitMap.Bm">
<short>A pointer to a BitMap structure. Passing a nil-pointer
         (meaning "do nothing") is OK.</short>
</element>

<!-- procedure Visibility: default -->
<element name="FreeColorMap">
<short>Free the ColorMap structure and return memory to free memory pool.</short>
<descr>Return the memory to the free memory pool that was allocated
  with <link id="GetColorMap">GetColorMap()</link>.
</descr>
<errors>
</errors>
<seealso>
<link id="SetRGB4"/>
<link id="GetColorMap"/>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="FreeColorMap.ColorMap">
<short>A pointer to ColorMap allocated with <link id="GetColorMap">GetColorMap()</link>.
      Passing a nil pointer (meaning "do nothing") is
      acceptable.</short>
</element>

<!-- procedure Visibility: default -->
<element name="FreeCopList">
<short>Deallocate intermediate copper list
</short>
<descr>Deallocate all memory associated with this copper list.
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="FreeCopList.CopList">
<short>A pointer to structure CopList</short>
</element>

<!-- procedure Visibility: default -->
<element name="FreeCprList">
<short>Deallocate hardware copper list</short>
<descr>Return cprlist to free memory pool
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="FreeCprList.CprList">
<short>A pointer to cprlist structure</short>
</element>

<!-- procedure Visibility: default -->
<element name="FreeDBufInfo">
<short>Free information for multi-buffered animation</short>
<descr>Frees a structure obtained from <link id="AllocDBufInfo">AllocDBufInfo()</link>
FreeDBufInfo(nil) is a no-op.
</descr>
<errors>
</errors>
<seealso>
<link id="AllocDBufInfo"/>
<link id="ChangeVPBitMap"/>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="FreeDBufInfo.Dbi">
<short>A pointer to a DBufInfo.</short>
</element>

<!-- procedure Visibility: default -->
<element name="FreeGBuffers">
<short>Deallocate memory obtained by <link id="GetGBuffers">GetGBuffers()</link></short>
<descr><p>For each sequence of each component of the AnimOb,
  deallocate memory for:</p>
<ul>
<li>SaveBuffer</li>
<li>BorderLine</li>
<li>CollMask and ImageShadow (point to same buffer)</li>
</ul>
<p>if db is set (user had used double-buffering) deallocate:</p>
<ul>
  <li>DBufPacket</li>
  <li>BufBuffer</li>
</ul>
<p>A call to GetGBuffers() that resulted in a partially allocation
of the required buffers will result in a deallocation of these
buffers. (Possible incompatibility with the real thing, though)</p>
</descr>
<errors>
</errors>
<seealso>
<link id="GetGBuffers"/>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="FreeGBuffers.AnOb">
<short>A pointer to the AnimOb structure</short>
</element>

<!-- argument Visibility: default -->
<element name="FreeGBuffers.Rp">
<short>A pointer to the current RastPort</short>
</element>

<!-- argument Visibility: default -->
<element name="FreeGBuffers.db">
<short>Double-buffer indicator (set True for double-buffering)</short>
</element>

<!-- procedure Visibility: default -->
<element name="FreeRaster">
<short>Release an allocated area to the system free memory pool</short>
<descr>Return the memory associated with this PlanePtr of size
  width and height to the <link id="exec.MEMF_CHIP"/> memory pool.
</descr>
<errors>
</errors>
<seealso>
<link id="AllocRaster"/>
<link id="AllocBitmap"/>
<link id="FreeBitmap"/>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="FreeRaster.p">
<short> a pointer to a memory space  returned  as  a
             result of a call to <link id="AllocRaster">AllocRaster()</link>.</short>
</element>

<!-- argument Visibility: default -->
<element name="FreeRaster.Width">
<short>The width in bits of the bitplane.</short>
</element>

<!-- argument Visibility: default -->
<element name="FreeRaster.Height">
<short>Number of rows in bitplane.</short>
</element>

<!-- procedure Visibility: default -->
<element name="FreeSprite">
<short>Return sprite for use by others and virtual sprite machine.</short>
<descr> Mark sprite as available for others to use.
       These sprite routines are provided to ease sharing of sprite
  hardware and to handle simple cases of sprite usage and
  movement.  It is assumed the programs that use these routines
  do want to be good citizens in their hearts. ie: they will
  not FreeSprite unless they actually own the sprite.
  The Virtual Sprite machine may ignore the simple sprite machine.
</descr>
<errors>
</errors>
<seealso>
<link id="GetSprite"/>
<link id="ChangeSprite"/>
<link id="MoveSprite"/>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="FreeSprite.Pick">
<short>Number in range of 0-7</short>
</element>

<!-- procedure Visibility: default -->
<element name="FreeSpriteData">
<short>free sprite data allocated by <link id="AllocSpriteData">AllocSpriteData()</link></short>
<descr>
</descr>
<errors>
</errors>
<seealso>
<link id="FreeSprite"/>
<link id="ChangeSprite"/>
<link id="MoveSprite"/>
<link id="GetExtSpriteA"/>
<link id="AllocBitMap"/>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="FreeSpriteData.ExtSp">
<short>The extended sprite structure to be freed. Passing nil is a
  not allowed.
</short>
</element>

<!-- procedure Visibility: default -->
<element name="FreeVPortCopLists">
<short>Deallocate all intermediate copper lists and their headers from a viewport</short>
<descr><p>Search display, color, sprite, and user copper
       lists and call <link id="exec.ExecFreeMem">ExecFreeMem()</link> to deallocate them from memory</p>
<p>The memory allocated to the various copper lists will be returned
  to the system's free memory pool, and the following fields in
  the viewport structure will be set to nil:</p>
<p>   DspIns, Sprins, ClrIns, UCopIns</p>
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="FreeVPortCopLists.Vp">
<short>A pointer to ViewPort structure</short>
</element>

<!-- function Visibility: default -->
<element name="GetAPen">
<short>Get the A Pen value for a RastPort</short>
<descr>Return the current value of the A pen for the rastport. This function
  should be used instead of peeking the structure directly, because future
  graphics devices may store it differently, for instance, using more bits.
</descr>
<errors>
</errors>
<seealso>
<link id="SetAPen"/>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="GetAPen.Result">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="GetAPen.Rp">
<short>A pointer to a valid RastPort structure.</short>
</element>

<!-- function Visibility: default -->
<element name="GetBitMapAttr">
<short>Returns information about a bitmap</short>
<descr><p>Determines information about a bitmap. This function should be used
  instead of reading the bitmap structure fields directly. This will
  provide future compatibility.</p>
<p>attribute_number = A number telling graphics which attribute
                     of the bitmap should be returned:</p>
<dl>
  <dt>BMA_HEIGHT</dt><dd>returns the height in pixels</dd>
  <dt>BMA_WIDTH</dt><dd>returns the width in pixels.</dd>
  <dt>BMA_DEPTH</dt><dd>returns the depth. This is the number of
    bits which are required to store the information
    for one pixel in the bitmap.</dd>
  <dt>BMA_FLAGS</dt><dd>returns a longword bitfield describing
    various attributes which the bitmap may have.
    Currently defined flags are <link id="BMF_DISPLAYABLE"/>,
    <link id="BMF_INTERLEAVED"/> (see <link id="AllocBitMap">AllocBitMap()</link>). The flag
    <link id="BMF_STANDARD"/> returns will be set if the
    bitmap is represented as planar data in Amiga
    Chip RAM.</dd>
</dl>
<p>Unknown attributes are reserved for future use, and return zero.</p>
<p>
  <link id="BMF_DISPLAYABLE"/> will only be set if the source bitmap meets all of the
  required alignment restrictions. A bitmap which does not meet these
  restrictions may still be displayable at some loss of efficiency.</p>
<p>
  Size values returned by this function may not exactly match the values
  which were passed to <link id="AllocBitMap">AllocBitMap()</link>, due to alignment restrictions.</p>
</descr>
<errors>
</errors>
<seealso>
<link id="AllocBitMap"/>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="GetBitMapAttr.Result">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="GetBitMapAttr.BitMap">
<short>A pointer to a BitMap structure.</short>
</element>

<!-- argument Visibility: default -->
<element name="GetBitMapAttr.Attribute">
<short>A number telling graphics which attribute (BMA_*)</short>
</element>

<!-- function Visibility: default -->
<element name="GetBPen">
<short>Get the B Pen value for a RastPort</short>
<descr>Return the current value of the B pen for the rastport. This function
  should be used instead of peeking the structure directly, because future
  graphics devices may store it differently, using more bits.
</descr>
<errors>
</errors>
<seealso>
<link id="SetBPen"/>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="GetBPen.Result">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="GetBPen.Rp">
<short>A pointer to a valid RastPort structure.</short>
</element>

<!-- function Visibility: default -->
<element name="GetColorMap">
<short>Allocate and initialize Colormap</short>
<descr>Allocates, initializes and returns a pointer to a ColorMap
       data structure, later enabling calls to <link id="SetRGB4">SetRGB4()</link>/<link id="SetRGB32">SetRGB32()</link>
       and <link id="LoadRGB4">LoadRGB4()</link>/<link id="LoadRGB32">LoadRGB32()</link> to load colors for a view port. The
       ColorTable pointer in the ColorMap structure points to a
       hardware specific colormap data structure. You should not
       count on it being anything you can understand. Use
       <link id="GetRGB4">GetRGB4()</link>/<link id="GetRGB32">GetRGB32()</link> to query it or <link id="SetRGB4CM">SetRGB4CM()</link>/<link id="SetRGB32CM">SetRGB32CM()</link>
       to set it directly.
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="GetColorMap.Result">
<short>The pointer value returned by this routine, if nonzero,
       may be stored into the ViewPort.ColorMap pointer.
       If a value of 0 is returned, the system was unable
       to allocate enough memory space for the required
       data structures.
</short>
</element>

<!-- argument Visibility: default -->
<element name="GetColorMap.Entries">
<short>Number of entries for this colormap</short>
</element>

<!-- function Visibility: default -->
<element name="GetDisplayInfoData">
<short>Query DisplayInfo Record parameters</short>
<descr><p>
  <var>GetDisplayInfoData()</var> fills a buffer with data meaningful to the
  DisplayInfoRecord pointed at by your valid handle. The data type
  that you are interested in is indicated by a tagID for that chunk.
  The types of tagged information that may be available include:</p>
<dl>
  <dt>DTAG_DISP:</dt><dd>(<link id="TDisplayInfo"/>) properties and availability information.</dd>
  <dt>DTAG_DIMS:</dt><dd>(<link id="TDimensionInfo"/>) default dimensions and overscan info.</dd>
  <dt>DTAG_MNTR:</dt><dd>(<link id="TMonitorInfo"/>) type, position, scanrate, and compatibility</dd>
  <dt>DTAG_NAME:</dt><dd>(<link id="TNameInfo"/>) a user friendly way to refer to this mode.</dd>
</dl>
</descr>
<errors>
</errors>
<seealso>
<link id="FindDisplayInfo"/>
<link id="NextDisplayInfo"/>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="GetDisplayInfoData.Result">
<short>If positive, number of bytes actually transferred
           if zero, no information for ID was available
</short>
</element>

<!-- argument Visibility: default -->
<element name="GetDisplayInfoData.Handle">
<short>A displayinfo handle</short>
</element>

<!-- argument Visibility: default -->
<element name="GetDisplayInfoData.Buf">
<short>A pointer to destination buffer</short>
</element>

<!-- argument Visibility: default -->
<element name="GetDisplayInfoData.Size">
<short>Buffer size in bytes</short>
</element>

<!-- argument Visibility: default -->
<element name="GetDisplayInfoData.TagID">
<short>data chunk type (DTAG_*)</short>
</element>

<!-- argument Visibility: default -->
<element name="GetDisplayInfoData.ID">
<short>displayinfo identifier, optionally used if handle is nil
</short>
</element>

<!-- function Visibility: default -->
<element name="GetDrMd">
<short>Get the draw mode value for a RastPort</short>
<descr>Return the current value of the draw mode for the rastport. This function
  should be used instead of peeking the structure directly, because future
  graphics devices may store it differently.
</descr>
<errors>
</errors>
<seealso>
<link id="SetDrMd"/>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="GetDrMd.Result">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="GetDrMd.Rp">
<short>A pointer to a valid RastPort structure.</short>
</element>

<!-- function Visibility: default -->
<element name="GetExtSprite">
<short>VarArgs Version of <link id="GetExtSpriteA">GetExtSpriteA()</link></short>
<descr>
</descr>
<errors>
</errors>
<seealso>
<link id="GetExtSprite"/>
</seealso>
</element>

<!-- function Visibility: default -->
<element name="GetExtSpriteA">
<short>Attempt to get a sprite for the extended sprite manager. </short>
<descr><p>Attempt to allocate one of the eight sprites for private use
  with the extended sprite manager.</p>
<p>a standard tag list:</p>
<dl>
<dt>GSTAG_SPRITE_NUM</dt><dd>specifies a specific sprite to get by number.</dd>

<dt>GSTAG_ATTACHED</dt><dd>specifies that you wish to get a sprite pair.
      the tag data field points to a ExtSprite structure
      for the second sprite. You must free both sprites.</dd>
</dl>
</descr>
<errors>
</errors>
<seealso>
<link id="FreeSprite"/>
<link id="ChangeSprite"/>
<link id="MoveSprite"/>
<link id="GetSprite"/>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="GetExtSpriteA.Result">
<short>a sprite number or -1 for an error.
    This call will fail if no sprites could be allocated, or
    if you try to allocate a sprite which would require
    a mode change when there are other sprites of incompatible
    modes in use.</short>
</element>

<!-- argument Visibility: default -->
<element name="GetExtSpriteA.Sprite">
<short>A Pointer to programmer's ExtSprite (from <link id="AllocSpriteData">AllocSpriteData()</link>).</short>
</element>

<!-- argument Visibility: default -->
<element name="GetExtSpriteA.Tags">
<short>Tags GSTAG_*</short>
</element>

<!-- function Visibility: default -->
<element name="GetGBuffers">
<short>Attempt to allocate ALL buffers of an entire AnimOb.</short>
<descr><p>For each sequence of each component of the AnimOb, allocate memory for:</p>
<ul>
  <li>SaveBuffer</li>
  <li>BorderLine</li>
  <li>CollMask and ImageShadow (point to same buffer)</li>
</ul>
<p>if db is set TRUE (user wants double-buffering) allocate:</p>
<ul>
  <li>DBufPacket</li>
  <li>BufBuffer</li>
</ul>
<p>
If an AnimOb is passed to GetGBuffers twice new buffers will
be allocated and therefore old pointers to buffers will be
lost in space.
</p>
</descr>
<errors>
  If any of the memory allocations fail it does not free the partial
  allocations that did succeed.
</errors>
<seealso>
<link id="FreeGBuffers"/>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="GetGBuffers.Result">
<short>True if the memory allocations were all successful, else False</short>
</element>

<!-- argument Visibility: default -->
<element name="GetGBuffers.AnOb">
<short>A pointer to the AnimOb structure</short>
</element>

<!-- argument Visibility: default -->
<element name="GetGBuffers.Rp">
<short>A pointer to the current RastPort</short>
</element>

<!-- argument Visibility: default -->
<element name="GetGBuffers.Db">
<short>Double-buffer indicator (set True for double-buffering)</short>
</element>

<!-- function Visibility: default -->
<element name="GetOutlinePen">
<short>Get the O Pen value for a RastPort</short>
<descr>Return the current value of the O pen for the rastport. This function
  should be used instead of peeking the structure directly, because future
  graphics devices may store it differently, for instance, using more bits.
</descr>
<errors>
</errors>
<seealso>
<link id="SetOutlinePen"/>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="GetOutlinePen.Result">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="GetOutlinePen.Rp">
<short>A pointer to a valid RastPort structure.</short>
</element>

<!-- procedure Visibility: default -->
<element name="GetRGB32">
<short>Set a series of color registers for this Viewport.</short>
<descr>

</descr>
<errors>
</errors>
<seealso>
<link id="LoadRGB4"/>
<link id="LoadRGB32"/>
<link id="GetColorMap"/>
<link id="SetRGB32CM"/>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="GetRGB32.Cm">
<short>colormap</short>
</element>

<!-- argument Visibility: default -->
<element name="GetRGB32.FirstColor">
<short>The first color register to get</short>
</element>

<!-- argument Visibility: default -->
<element name="GetRGB32.NColors">
<short>The number of color registers to set.</short>
</element>

<!-- argument Visibility: default -->
<element name="GetRGB32.Table">
<short>A pointer to a series of 32-bit RGB triplets. Should point to at least ncolors*3 longwords.</short>
</element>

<!-- function Visibility: default -->
<element name="GetRGB4">
<short>Inquire value of entry in ColorMap.</short>
<descr>Read and format a value from the ColorMap.
</descr>
<errors>
Intuition's <link id="intuition.DisplayBeep">DisplayBeep()</link> changes color 0. Reading Color 0 during a
  <link id="intuition.DisplayBeep">DisplayBeep()</link> will lead to incorrect results.
</errors>
<seealso>
<link id="SetRGB4"/>
<link id="LoadRGB4"/>
<link id="GetColorMap"/>
<link id="FreeColorMap"/>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="GetRGB4.Result">
<short>Returns -1 if no valid entry
  return Word RGB value 4 bits per run right justified</short>
</element>

<!-- argument Visibility: default -->
<element name="GetRGB4.ColorMap">
<short>A pointer to ColorMap structure</short>
</element>

<!-- argument Visibility: default -->
<element name="GetRGB4.Entry">
<short>Index into colormap</short>
</element>

<!-- procedure Visibility: default -->
<element name="GetRPAttrs">
<short>VarArgs Version for <link id="GetRPAttrsA">GetRPAttrsA()</link></short>
<descr>
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>

<!-- procedure Visibility: default -->
<element name="GetRPAttrsA">
<short>Examine rastport settings via a tag list</short>
<descr><p>
 Read the settings of a rastport into variables. The
  ti_Tag field of the TagItem specifies which attribute
  should be read, and the ti_Data field points at the
  location where the result hsould be stored. All current
  tags store the return data as LonInts (32 bits).</p>
<p>
  currently available tags are:</p>
<dl>
  <dt>RPTAG_Font</dt><dd>(Byte) Font for <link id="GfxText">GfxText()</link></dd>
  <dt>RPTAG_APen</dt><dd>(Byte) Primary rendering pen</dd>
  <dt>RPTAG_BPen</dt><dd>(Byte) Secondary rendering pen</dd>
  <dt>RPTAG_DrMd</dt><dd>(Byte) Drawing mode</dd>
  <dt>RPTAG_OutLinePen</dt><dd>(Byte) Area Outline pen</dd>
  <dt>RPTAG_WriteMask</dt><dd>(LongWord) Bit Mask for writing.</dd>
  <dt>RPTAG_MaxPen</dt><dd>(LongWord) Maximum pen to render (see <link id="SetMaxPen">SetMaxPen()</link>)</dd>
</dl>
</descr>
<seealso>
<link id="GetRPAttrs"/>
<link id="SetRPAttrsA"/>
<link id="GetAPen"/>
<link id="GetBPen"/>
<link id="GetOutLinePen"/>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="GetRPAttrsA.Rp">
<short>A pointer to a RastPort structure</short>
</element>

<!-- argument Visibility: default -->
<element name="GetRPAttrsA.Tags">
<short>A pointer to a taglist specifying the attributes to read and
       the addresses to store the results (RPTAG_*)</short>
</element>

<!-- function Visibility: default -->
<element name="GetSprite">
<short>Attempt to get a sprite for the simple sprite manager.</short>
<descr>Attempt to allocate one of the eight sprites for private use
  with the simple sprite manager. This must be done before using
  further calls to the simple sprite machine. If the programmer
  wants to use 15 color sprites, they must allocate both sprites
  and set the <link id="SPRITE_ATTACHED"/> bit in the odd sprite's posctldata
  array.
</descr>
<errors>
On some machines this will never return anything else than -1!
</errors>
<seealso>
<link id="FreeSprite"/>
<link id="ChangeSprite"/>
<link id="MoveSprite"/>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="GetSprite.Result">
<short>If pick is 0-7 attempt to allocate the sprite. If the sprite
  is already allocated then return -1.
  If pick -1 allocate the next sprite starting search at 0.
  If no sprites are available return -1 and fill -1 in num entry
  of SimpleSprite structure.
  If the sprite is available for allocation, mark it allocated
  and fill in the 'num' entry of the SimpleSprite structure.
  If successful return the sprite number.
</short>
</element>

<!-- argument Visibility: default -->
<element name="GetSprite.Sprite">
<short>A Pointer to programmers SimpleSprite structure.</short>
</element>

<!-- argument Visibility: default -->
<element name="GetSprite.Pick">
<short>number in the range of 0-7 or
    -1 if programmer just wants the next one.</short>
</element>

<!-- function Visibility: default -->
<element name="GetVPModeID">
<short>Get the 32 bit DisplayID from a ViewPort.</short>
<descr>Returns the normal display modeID, if one is currently associated with this ViewPort.
Test the return value of this function against <link id="INVALID_ID"/>, not nil.
</descr>
<errors>
</errors>
<seealso>
<link id="ModeNotAvailable"/>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="GetVPModeID.Result">
<short>A 32 bit DisplayInfoRecord identifier associated with
      this ViewPort, or <link id="INVALID_ID"/>.</short>
</element>

<!-- argument Visibility: default -->
<element name="GetVPModeID.Vp">
<short>A pointer to a ViewPort structure.</short>
</element>

<!-- procedure Visibility: default -->
<element name="GfxAssociate">
<short>associate a graphics extended node with a given pointer</short>
<descr>Associate a special graphics extended data structure (each of which
  begins with an ExtendedNode structure)  with another structure via
  the other structure's pointer. Later, when you call <link id="GfxLookUp">GfxLookUp()</link>
  with the other structure's pointer you may retrieve a pointer
  to this special graphics extended data structure, if it is
  available.Never associate one special graphics extended data structure to
several pointers. Only one pointer is allowed!
</descr>
<errors>
</errors>
<seealso>
<link id="GfxNew"/>
<link id="GfxFree"/>
<link id="GfxLookUp"/>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="GfxAssociate.Pointer_">
<short>A pointer to a data structure.</short>
</element>

<!-- argument Visibility: default -->
<element name="GfxAssociate.Node">
<short>An ExtendedNode structure to associate with the pointer</short>
</element>

<!-- procedure Visibility: default -->
<element name="GfxFree">
<short>Free a graphics extended data structure</short>
<descr>Free a special graphics extended data structure (each of which
  begins with an ExtendedNode structure).
The node is deallocated from memory. graphics will disassociate
  this special graphics extended node from any associated data
  structures, if necessary, before freeing it (see <link id="GfxAssociate">GfxAssociate()</link>).
</descr>
<errors>
An <link id="Exec.Alert">Alert()</link> will be called if you attempt to free any structure
  other than a graphics extended data structure obtained via <var>GfxFree()</var>.
</errors>
<seealso>
<link id="GfxNew"/>
<link id="GfxAssociate"/>
<link id="GfxLookUp"/>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="GfxFree.Node">
<short>pointer to a graphics extended data structure obtained via <link id="GfxFree">GfxFree()</link>.</short>
</element>

<!-- function Visibility: default -->
<element name="GfxLookUp">
<short>Find a graphics extended node associated with a
         given pointer </short>
<descr>Finds a special graphics extended data structure (if any) associated
  with the pointer to a data structure (eg: ViewExtra associated with
  a View structure).
</descr>
<errors>
</errors>
<seealso>
<link id="GfxNew"/>
<link id="GfxAssociate"/>
<link id="GfxFree"/>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="GfxLookUp.Result">
<short>A pointer to the ExtendedNode that has previously been
     associated with the pointer.
</short>
</element>

<!-- argument Visibility: default -->
<element name="GfxLookUp.Pointer_">
<short>A pointer to a data structure which may have an
      ExtendedNode associated with it (typically a View ).</short>
</element>

<!-- function Visibility: default -->
<element name="GfxNew">
<short>Allocate a graphics extended data structure</short>
<descr>
  Allocate a special graphics extended data structure (each of which
  begins with an ExtendedNode structure).  The type of structure to
  be allocated is specified by the node_type identifier.
</descr>
<errors>
</errors>
<seealso>
<link id="GfxLookUp"/>
<link id="GfxAssociate"/>
<link id="GfxFree"/>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="GfxNew.Result">
<short>A pointer to the allocated graphics node or nil if the allocation failed.</short>
</element>

<!-- argument Visibility: default -->
<element name="GfxNew.Node_Type">
<short>Which type of graphics extended data structure to allocate.</short>
</element>

<!-- procedure Visibility: default -->
<element name="InitArea">
<short>Initialize vector collection matrix</short>
<descr>This function provides initialization for the vector collection matrix
  such that it has a size of (max vectors ).  The size of the region
  pointed to by buffer (short pointer) should be five (5) times as large
  as maxvectors. This size is in bytes.  Areafills done by using <link id="AreaMove">AreaMove</link>,
  <link id="AreaDraw">AreaDraw()</link> and <link id="AreaEnd">AreaEnd()</link> must have enough space allocated in this table to
  store all the points of the largest fill. <link id="AreaEllipse">AreaEllipse()</link> takes up two
  vectors for every call. If <link id="AreaMove">AreaMove</link>/<link id="AreaDraw">AreaDraw()</link>/<link id="AreaEllipse">AreaEllipse()</link> detect too many
  vectors going into the buffer they will return -1.
</descr>
<errors>
</errors>
<seealso>
<link id="AreaEnd"/>
<link id="AreaMove"/>
<link id="AreaDraw"/>
<link id="AreaEllipse"/>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="InitArea.AreaInfo">
<short>A pointer to AreaInfo structure</short>
</element>

<!-- argument Visibility: default -->
<element name="InitArea.Buffer">
<short>A pointer to chunk of memory to collect vertices</short>
</element>

<!-- argument Visibility: default -->
<element name="InitArea.MaxVectors">
<short>max number of vectors this buffer can hold</short>
</element>

<!-- procedure Visibility: default -->
<element name="InitBitMap">
<short>Initialize bit map structure with input values.</short>
<descr>Initialize various elements in the BitMap structure to
  correctly reflect depth, width, and height.
  Must be used before use of BitMap in other graphics calls.
  The Planes[0..7] are not initialized and need to be set up
  by the caller.  The Planes table was put at the end of the
  structure so that it may be truncated to conserve space,
  as well as extended. All routines that use BitMap should
  only depend on existence of depth number of bitplanes.
  The Flagsh and pad fields are reserved for future use and
  should not be used by application programs.
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="InitBitMap.Bm">
<short>A pointer to a BitMap structure</short>
</element>

<!-- argument Visibility: default -->
<element name="InitBitMap.Depth">
<short>Number of bitplanes that this bitmap will have</short>
</element>

<!-- argument Visibility: default -->
<element name="InitBitMap.Width">
<short>Number of bits (columns) wide for this BitMap</short>
</element>

<!-- argument Visibility: default -->
<element name="InitBitMap.Height">
<short>Number of bits (rows) tall for this BitMap
</short>
</element>

<!-- procedure Visibility: default -->
<element name="InitGels">
<short>initialize a gel list; must be called before using gels.</short>
<descr>Assigns the VSprites as the head and tail of the gel list in <link id="GfxBase"/>.
  Links these two gels together as the keystones of the list.
  If the collHandler vector points to some memory array, sets
  the <link id="BORDERHIT"/> vector to nil.
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="InitGels.Head">
<short>Pointer to the VSprite structure to be used as the gel list head</short>
</element>

<!-- argument Visibility: default -->
<element name="InitGels.Tail">
<short>Pointer to the VSprite structure to be used as the gel list tail</short>
</element>

<!-- argument Visibility: default -->
<element name="InitGels.GelsInfo">
<short>Pointer to the GelsInfo structure to be initialized</short>
</element>

<!-- procedure Visibility: default -->
<element name="InitGMasks">
<short>Initialize all of the masks of an AnimOb.</short>
<descr>For every sequence of every component call <link id="InitMasks">InitMasks()</link>.
</descr>
<errors>
</errors>
<seealso>
<link id="InitMasks"/>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="InitGMasks.AnOb">
<short>A pointer to the AnimOb</short>
</element>

<!-- procedure Visibility: default -->
<element name="InitMasks">
<short>Initialize the BorderLine and CollMask masks of a VSprite.</short>
<descr>Creates the appropriate BorderLine and CollMask masks of the VSprite.
  Correctly detects if the VSprite is actually a Bob definition, handles
  the image data accordingly.
</descr>
<errors>
</errors>
<seealso>
<link id="InitGels"/>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="InitMasks.VSprite">
<short>A pointer to the VSprite structure</short>
</element>

<!-- procedure Visibility: default -->
<element name="InitRastPort">
<short>Initialize raster port structure</short>
<descr><p>Initialize a RastPort structure to standard values.</p>
<p>The struct Rastport describes a control structure
       for a write-able raster. The RastPort structure
       describes how a complete single playfield display
       will be written into. A RastPort structure is
       referenced whenever any drawing or filling
       operations are to be performed on a section of
       memory.</p>
<p>
       The section of memory which is being used in this
       way may or may not be presently a part of the
       current actual onscreen display memory. The name
       of the actual memory section which is linked to
       the RastPort is referred to here as a "raster" or
       as a bitmap.</p>
<p><b>Note:</b></p>
<p>Calling the routine InitRastPort only
       establishes various defaults. It does <b>not</b>
       establish where, in memory, the rasters are
       located. To do graphics with this RastPort the user
  must set up the BitMap pointer in the RastPort.</p>
<p>all entries in RastPort get zeroed out, with the following exceptions:</p>
<ul>
  <li>Mask, FgPen, AOLPen, and LinePtrn are set to -1.</li>
  <li>The DrawMode is set to JAM2</li>
  <li>The font is set to the standard system font</li>
</ul>
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="InitRastPort.Rp">
<short>A pointer to a RastPort structure.
</short>
</element>

<!-- function Visibility: default -->
<element name="InitTmpRas">
<short>Initialize area of local memory for usage by areafill, floodfill, gfxtext.
</short>
<descr>
The area of memory pointed to by buffer is set up to be used
  by RastPort routines that may need to get some memory for
  intermediate operations in preparation to putting the graphics
  into the final BitMap.
  Tmpras is used to control the usage of buffer.
</descr>
<errors>
The function itself is a bug.
Why does this function exist at all? The necessary memory should
be allocated in <link id="InitRastPort">InitRastPort()</link> or the functions that need it.
</errors>
<seealso>
<link id="AreaEnd"/>
<link id="Flood"/>
<link id="GfxText"/>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="InitTmpRas.Result">
<short>Makes buffer available for users of RastPort</short>
</element>

<!-- argument Visibility: default -->
<element name="InitTmpRas.TmpRas">
<short>A pointer to a TmpRas structure to be linked into
    a RastPort</short>
</element>

<!-- argument Visibility: default -->
<element name="InitTmpRas.Buffer">
<short>A pointer to a contiguous piece of chip memory.</short>
</element>

<!-- argument Visibility: default -->
<element name="InitTmpRas.Size">
<short>Size in bytes of buffer</short>
</element>

<!-- procedure Visibility: default -->
<element name="InitView">
<short>Initialize View structure.</short>
<descr>Initialize View structure to default values.
 View structure set to all 0's except DxOffset,DyOffset, These are set to properly position:
  default display about .5 inches from top and left on monitor.
  InitView pays no attention to previous contents of view.
</descr>
<errors>
</errors>
<seealso>
<link id="MakeVPort"/>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="InitView.View">
<short>A pointer to a View structure
</short>
</element>

<!-- procedure Visibility: default -->
<element name="InitVPort">
<short>Initialize ViewPort structure.</short>
<descr>Initialize ViewPort structure to default values.
ViewPort is initialized to it`s default values - doesn't care about
previous contents of this structure.
All values except for SpritePriorities are set to 0's.
</descr>
<errors>
</errors>
<seealso>
<link id="MakeVPort"/>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="InitVPort.Vp">
<short>A pointer to a ViewPort structure</short>
</element>

<!-- procedure Visibility: default -->
<element name="LoadRGB32">
<short>Set a series of color registers for this Viewport.</short>
<descr><p>The selected color registers are changed to match your specs.
<var>LoadRGB32()</var> is faster than <link id="SetRGB32">SetRGB32()</link>, even for one color.</p>
<p>Passing a nil "table" is ignored.
  The format of the table passed to this function is a series of records,
  each with the following format:</p>
<p>
          1 Word with the number of colors to load
          1 Word with the first color to be loaded.
          3 longwords representing a left justified 32 bit rgb triplet.
          The list is terminated by a count value of 0.</p>
<p>
  Lower order bits of the palette specification will be discarded,
  depending on the color palette resolution of the target graphics
  device. Use 0xffffffff for the full value, 0x7fffffff for 50%,
  etc. You can find out the palette range for your screen by
  querying the graphics data base.</p>
</descr>
<errors>
</errors>
<seealso>
<link id="LoadRGB4"/>
<link id="GetColorMap"/>
<link id="GetRGB32"/>
<link id="SetRGB32CM"/>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="LoadRGB32.Vp">
<short>viewport</short>
</element>

<!-- argument Visibility: default -->
<element name="LoadRGB32.Table">
<short>A pointer to a series of records which describe which colors to modify.</short>
</element>

<!-- procedure Visibility: default -->
<element name="LoadRGB4">
<short>Load RGB color values from table.</short>
<descr><p>load the count words of the colormap from table starting at
  entry 0.</p>
<p>The ViewPort should have a pointer to a valid ColorMap to store
  the colors in.
  Updates the hardware copperlist to reflect the new colors.
  Updates the intermediate copperlist with the new colors.</p>
</descr>
<errors>
</errors>
<seealso>
<link id="GetColorMap"/>
<link id="GetRGB4"/>
<link id="SetRGB4"/>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="LoadRGB4.Vp">
<short>A pointer to ViewPort, whose colors you wish to change</short>
</element>

<!-- argument Visibility: default -->
<element name="LoadRGB4.Colors">
<short>pointer to table of RGB values set up as an array of Words The colors are interpreted as 15 = maximum intensity. 0 = minimum intensity.</short>
</element>

<!-- argument Visibility: default -->
<element name="LoadRGB4.Count">
<short>number of Words in the table to load into the
    colormap starting at color 0(background) and proceeding
    to the next higher color number
</short>
</element>

<!-- procedure Visibility: default -->
<element name="LoadView">
<short> Use a (possibly freshly created) coprocessor instruction list to create the current display.</short>
<descr><p>Install a new view to be displayed during the next display
  refresh pass. Coprocessor instruction list has been created by
       <link id="InitVPort">InitVPort()</link>, <link id="MakeVPort">MakeVPort()</link>, and <link id="MrgCop">MrgCop()</link>.</p>
<p>If the View pointer is non-nil, the new View is displayed,
  according to your instructions.  The vertical blank routine
  will pick this pointer up and direct the copper to start
  displaying this View.</p>
<p>
  If the View pointer is nil, no View is displayed.</p>
<p>Even though a LoadView(nil) is performed, display DMA will still be
  active.  Sprites will continue to be displayed after a LoadView(nil)
  unless an <b>OFF_SPRITE</b> is subsequently performed.</p>
</descr>
<errors>
</errors>
<seealso>
<link id="InitVPort"/>
<link id="MakeVPort"/>
<link id="MrgCop"/>
<link id="intuition.RethinkDisplay">RethinkDisplay</link>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="LoadView.View">
<short>A pointer to the View structure which contains the
       pointer to the constructed coprocessor instructions list, or nil.</short>
</element>

<!-- procedure Visibility: default -->
<element name="LockLayerRom">
<short>Lock Layer structure by ROM(gfx lib) code.</short>
<descr><p>Return when the layer is locked and no other task may
  alter the ClipRect structure in the Layer structure.
  This call does not destroy any registers.
  This call nests so that callers in this chain will not lock
  themselves out.
  Do not have the Layer locked during a call to intuition.
  There is a potential deadlock problem here, if intuition
  needs to get other locks as well.
  Having the layer locked prevents other tasks from using the
  layer library functions, most notably intuition itself. So
  be brief.
  layers.library's <link id="layers.LockLayer">LockLayer()</link> is identical to <var>LockLayerRom()</var>.</p>
<p>The layer is locked and the task can render assuming the
  ClipRects will not change out from underneath it until
  an <link id="UnlockLayerRom">UnlockLayerRom()</link> is called.
</p>
</descr>
<errors>
</errors>
<seealso>
<link id="UnlockLayerRom"/>
<link id="layers.LockLayer">LockLayer</link>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="LockLayerRom.l">
<short>A pointer to Layer structure
</short>
</element>

<!-- function Visibility: default -->
<element name="MakeVPort">
<short>Generate display copper list for a viewport.</short>
<descr><p>Uses information in the View, ViewPort, TViewPort^.RasInfo to
  construct and intermediate copper list for this ViewPort.</p>
<p>Constructs intermediate copper list and puts pointers in
  viewport.DspIns
  If the ColorMap ptr in ViewPort is nil then it uses colors
  from the default color table.
  If <link id="DUALPF"/> in Modes then there must be a second <link id="TRasInfo"/> pointed
  to by the first <link id="TRasInfo"/></p>
</descr>
<errors>
</errors>
<seealso>
<link id="InitVPort"/>
<link id="MrgCop"/>
<link id="intuition.MakeScreen">MakeScreen</link>
<link id="intuition.RemakeDisplay">RemakeDisplay</link>
<link id="intuition.RethinkDisplay">RethinkDisplay</link>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="MakeVPort.Result">
<short>MakeVPort() will return an error if there is not enough memory,
  or the requested mode cannot be opened with the requested depth with the
  given bitmap (for higher bandwidth alignments). Check (MVP_*)</short>
</element>

<!-- argument Visibility: default -->
<element name="MakeVPort.View">
<short>A pointer to a View structure</short>
</element>

<!-- argument Visibility: default -->
<element name="MakeVPort.ViewPort">
<short>A pointer to a ViewPort structure
     The viewport must have valid pointer to a <link id="TRasInfo"/>.</short>
</element>

<!-- function Visibility: default -->
<element name="ModeNotAvailable">
<short>Check to see if a DisplayID isn't available.</short>
<descr>Rturns an error code, indicating why this modeID is not available,
  or 0 if there is no reason known why this mode should not be there.
</descr>
<errors>
</errors>
<seealso>
<link id="GetVPModeID"/>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="ModeNotAvailable.Result">
<short>A general indication of why this modeID is not available,
     or nil if there is no reason why it shouldn't be available.</short>
</element>

<!-- argument Visibility: default -->
<element name="ModeNotAvailable.ModeID">
<short>A 32 bit DisplayInfoRecord identifier.</short>
</element>

<!-- procedure Visibility: default -->
<element name="GfxMove">
<short>Move graphics pen position.</short>
<descr>Move graphics pen position to (x,y) relative to upper left (0,0)
  of RastPort. This sets the starting point for subsequent <link id="Draw">Draw()</link>
  and <link id="GfxText">GfxText()</link> calls.
</descr>
<errors>
</errors>
<seealso>
<link id="Draw"/>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="Move.Rp">
<short>A pointer to a RastPort structure</short>
</element>

<!-- argument Visibility: default -->
<element name="Move.x">
<short>Target X coordinate</short>
</element>

<!-- argument Visibility: default -->
<element name="Move.y">
<short>Target y coordinate</short>
</element>

<!-- procedure Visibility: default -->
<element name="MoveSprite">
<short>Move sprite to a point relative to top of viewport.</short>
<descr><p>Move sprite to a new position on the screen. Coordinates
are specified relatively to given ViewPort, or relatively
to the entire View (physical display) if the ViewPort is nil.</p>
<p>
This function works also with extended sprites, since
TSimpleSprite is a part of TExtSprite.</p>
<p>Amiga currently supports only one sprite #0 for mouse pointer.
Other sprite numbers are ignored by this function.</p>
<p>
ViewPort is also used in order to specify the physical display.
If it's not specified, Amiga(tm) chipset display is assumed.
This is available only on Amiga(tm) architecture.</p>
</descr>
<errors>
</errors>
<seealso>
<link id="FreeSprite"/>
<link id="ChangeSprite"/>
<link id="GetSprite"/>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="MoveSprite.Vp">
<short>A ViewPort for relative sprite positioning or nil</short>
</element>

<!-- argument Visibility: default -->
<element name="MoveSprite.Sprite">
<short>A pointer to a sprite descriptor structure</short>
</element>

<!-- argument Visibility: default -->
<element name="MoveSprite.x">
<short>A new X coordinate</short>
</element>

<!-- argument Visibility: default -->
<element name="MoveSprite.y">
<short>A new Y coordinate</short>
</element>

<!-- function Visibility: default -->
<element name="MrgCop">
<short>Merge together coprocessor instructions.</short>
<descr><p>Merge together the display, color, sprite and user coprocessor
       instructions into a single coprocessor instruction stream.  This
       essentially creates a per-display-frame program for the coprocessor.
       This function MrgCop is used, for example, by the graphics animation
       routines which effectively add information into an essentially
       static background display.  This changes some of the user
       or sprite instructions, but not those which have formed the
       basic display in the first place.  When all forms of coprocessor
       instructions are merged together, you will have a complete per-
       frame instruction list for the coprocessor.</p>
<p>
       Restrictions:  Each of the coprocessor instruction lists MUST be
       internally sorted in min to max Y-X order.  The merge routines
       depend on this!</p>
<p>If the given view is already on display, changes appear immediately.</p>
<p>On non Amiga Systems it only prepares the View for being displayed.</p>
</descr>
<errors>
</errors>
<seealso>
<link id="InitVPort"/>
<link id="MakeVPort"/>
<link id="LoadView"/>
<link id="intuition.RethinkDisplay">RethinkDisplay</link>

</seealso>
</element>

<!-- function result Visibility: default -->
<element name="MrgCop.Result">
<short>MrgCop() will return an error if there is not enough memory,
  or for some reason MrgCop() did not need to make any copper lists. Check MCOP_* for error codes</short>
</element>

<!-- argument Visibility: default -->
<element name="MrgCop.View">
<short>A pointer to the view structure to prepare</short>
</element>

<!-- function Visibility: default -->
<element name="NewRegion">
<short>Allocates memory for a new Region and initializes it
to an empty Region.</short>
<descr>
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="NewRegion.Result">
<short>A pointer to a newly created Region structure that
         should be freed by a call to <link id="DisposeRegion">DisposeRegion()</link> or nil if not enough memory.
</short>
</element>

<!-- function Visibility: default -->
<element name="NextDisplayInfo">
<short>Iterate current displayinfo identifiers</short>
<descr>The basic iteration function with which to find all records in the
  graphics database.  Using each ID in succession, you can then call
  <link id="FindDisplayInfo">FindDisplayInfo()</link> to obtain the handle associated with each ID.
  Each ID is a 32-bit Key which uniquely identifies one record.
  The <link id="INVALID_ID"/> is special, and indicates the end-of-list.
</descr>
<errors>
</errors>
<seealso>
<link id="FindDisplayInfo"/>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="NextDisplayInfo.Result">
<short>subsequent displayinfo identifier
            or <link id="INVALID_ID"/> if no more records.</short>
</element>

<!-- argument Visibility: default -->
<element name="NextDisplayInfo.Last_ID">
<short>Previous displayinfo identifier
            or <link id="INVALID_ID"/> if beginning iteration.</short>
</element>

<!-- function Visibility: default -->
<element name="ObtainBestPen">
<short>VarArgs Version of <link id="ObtainBestPenA">ObtainBestPenA()</link> </short>
<descr>
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>

<!-- function Visibility: default -->
<element name="ObtainBestPenA">
<short>Search for the closest color match, or allocate a new one.</short>
<descr><p>This function can be used by applications to figure out
  what pen to use to represent a given color.</p>
<p>
  The system will attempt to find the color in your viewport closest
  to the specified color. If there is no color within your tolerance,
  then a new one will be allocated, if available. If none is available,
  then the closest one found will be returned.</p>
<p>If this call succceeds, then you must call <link id="ReleasePen">ReleasePen()</link> when you are
  done with the color.</p>
<p>
  The error metric used for <var>ObtainBestPen()</var> is based on the magnitude
  squared between the two RGB values, scaled by the percentage of free
  entries.
</p>
</descr>
<errors>
</errors>
<seealso>
<link id="ObtainBestPen"/>
<link id="GetColorMap"/>
<link id="ObtainPen"/>
<link id="ReleasePen"/>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="ObtainBestPenA.Result">
<short>The correct pen value, or -1 if no sharable palette entries are available.</short>
</element>

<!-- argument Visibility: default -->
<element name="ObtainBestPenA.Cm">
<short>Colormap</short>
</element>

<!-- argument Visibility: default -->
<element name="ObtainBestPenA.r">
<short>Red level (32 bit left justified fraction)</short>
</element>

<!-- argument Visibility: default -->
<element name="ObtainBestPenA.g">
<short>Green level (32 bit left justified fraction)</short>
</element>

<!-- argument Visibility: default -->
<element name="ObtainBestPenA.b">
<short>Blue level (32 bit left justified fraction)</short>
</element>

<!-- argument Visibility: default -->
<element name="ObtainBestPenA.Tags">
<short>a pointer to a standard tag list specifying the color
            matching settings desired: <link id="OBP_Precision"/>, <link id="OBP_FailIfBad"/> </short>
</element>

<!-- function Visibility: default -->
<element name="ObtainPen">
<short>Obtain a free palette entry for use by your program.</short>
<descr>
<p>Attempt to allocate an entry in the colormap for use by the application.
  If successful, you should <link id="ReleasePen">ReleasePen()</link> this entry after you have finished
  with it.</p>
<p>
  Applications needing exclusive use of a color register (say for color
  cycling) will typically call this function with n=-1. Applications needing
  only the shared use of a color will typically use <link id="ObtainBestPenA">ObtainBestPenA()</link> instead.
  Other uses of this function are rare.
</p>
<p>When you allocate a palette entry in non-exclusive mode, you
  should not change it (via <link id="SetRGB32">SetRGB32()</link>), because other programs on the
  same screen may be using it. With <link id="PEN_EXCLUSIVE"/> mode, you can
  change the returned entry at will.</p>
<p>
  To avoid visual artifacts, you should not free up a palette
  entry until you are sure that your application is not displaying
  any pixels in that color at the time you free it. Otherwise, another
  task could allocate and set that color index, thus changing the colors
  of your pixels.</p>
<p>
  Generally, for shared access, you should use <link id="ObtainBestPenA">ObtainBestPenA()</link>
  instead, since it will not allocate a new color if there is one
  "close enough" to the one you want already.
  If there is no Palextra attached to the colormap, then this
  routine will always fail.
</p>
</descr>
<errors>
</errors>
<seealso>
<link id="ObtainBestPenA"/>
<link id="GetColorMap"/>
<link id="AttachPalExtra"/>
<link id="ReleasePen"/>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="ObtainPen.Result">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="ObtainPen.Cm">
<short>A pointer to a color map created by <link id="GetColorMap">GetColorMap()</link>.</short>
</element>

<!-- argument Visibility: default -->
<element name="ObtainPen.n">
<short>The index of the desired entry, or -1 if any one is acceptable</short>
</element>

<!-- argument Visibility: default -->
<element name="ObtainPen.r">
<short>Red Value (32 bit left justified fractions)</short>
</element>

<!-- argument Visibility: default -->
<element name="ObtainPen.g">
<short>Green Value (32 bit left justified fractions)</short>
</element>

<!-- argument Visibility: default -->
<element name="ObtainPen.b">
<short>Blue Value (32 bit left justified fractions)</short>
</element>

<!-- argument Visibility: default -->
<element name="ObtainPen.Flags">
<short><link id="PEN_EXCLUSIVE"/> tells the system that you want exclusive
         (non-shared) use of this pen value. Default is shared access.
         <link id="PEN_NO_SETCOLOR"/> - tells the system to not change the rgb values
         for the selected pen. Really only makes sense for exclusive pens.</short>
</element>

<!-- function Visibility: default -->
<element name="OpenFont">
<short>Get a pointer to a system font.</short>
<descr>This function searches the system font space for the graphics
  text font that best matches the attributes specified.  The
  pointer to the font returned can be used in subsequent
  <link id="SetFont">SetFont()</link> and <link id="CloseFont">CloseFont()</link> calls.
  It is important to match this
  call with a corresponding <link id="CloseFont">CloseFont()</link> call for effective
  management of ram fonts.
</descr>
<errors>
</errors>
<seealso>
<link id="CloseFont"/>
<link id="SetFont"/>
<link id="diskfont.OpenDiskFont">OpenDiskFont</link>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="OpenFont.Result">
<short>Nil if the desired font cannot be found.  If the named
  font is found, but the size and style specified are not
  available, a font with the nearest attributes is returned.</short>
</element>

<!-- argument Visibility: default -->
<element name="OpenFont.TextAttr">
<short>A <link id="PTextAttr"/> or <link id="PTTextAttr"/> structure that describes the text font attributes desired.</short>
</element>

<!-- function Visibility: default -->
<element name="OpenMonitor">
<short>Open a named MonitorSpec</short>
<descr><p>Locate and open a named MonitorSpec.</p>
<ul>
  <li>if <var>monitor_name</var> is non-nil, the monitor will be opened by name.</li>
  <li>if <var>monitor_name</var> is nil the monitor will be opened by optional ID.</li>
  <li>if both <var>monitor_name</var> and <var>display_id</var> are nil returns default monitor.</li>
</ul>
</descr>
<errors>
</errors>
<seealso>
<link id="CloseMonitor"/>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="OpenMonitor.Result">
<short>A pointer to an open MonitorSpec structure.
        nil if MonitorSpec could not  be opened.
</short>
</element>

<!-- argument Visibility: default -->
<element name="OpenMonitor.MonitorName">
<short>A pointer to a null terminated string.</short>
</element>

<!-- argument Visibility: default -->
<element name="OpenMonitor.DisplayID">
<short>An optional 32 bit monitor/mode identifier</short>
</element>

<!-- function Visibility: default -->
<element name="OrRectRegion">
<short>Perform 2d OR operation of rectangle with region, leaving result in region.</short>
<descr>If any portion of rectangle is not in the region then add that portion to the region.
</descr>
<errors>
</errors>
<seealso>
<link id="AndRectRegion"/>
<link id="OrRegionRegion"/>
<link id="XorRegionRegion"/>
<link id="ClearRectRegion"/>
<link id="NewRegion"/>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="OrRectRegion.Result">
<short>Return True if successful operation,
     Return False if ran out of memory
</short>
</element>

<!-- argument Visibility: default -->
<element name="OrRectRegion.Reg">
<short>A pointer to Region structure</short>
</element>

<!-- argument Visibility: default -->
<element name="OrRectRegion.Rect">
<short>A pointer to Rectangle structure</short>
</element>

<!-- function Visibility: default -->
<element name="OrRegionRegion">
<short>Perform 2d OR operation of one region with second region, leaving result in second region</short>
<descr>If any portion of region1  is not in the region then add that portion to the region2
</descr>
<errors>
</errors>
<seealso>
<link id="AndRegionRegion"/>
<link id="OrRectRegion"/>
<link id="XorRegionRegion"/>
<link id="ClearRectRegion"/>
<link id="NewRegion"/>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="OrRegionRegion.Result">
<short>Return True if successful operation,
     Return False if ran out of memory</short>
</element>

<!-- argument Visibility: default -->
<element name="OrRegionRegion.SrcRegion">
<short>A pointer to Source Region </short>
</element>

<!-- argument Visibility: default -->
<element name="OrRegionRegion.DestRegion">
<short>A pointer to Destination Region</short>
</element>

<!-- procedure Visibility: default -->
<element name="OwnBlitter">
<short>get the blitter for private usage
</short>
<descr><p>If blitter is available return immediately with the blitter
  locked for your exclusive use. If the blitter is not available
  put task to sleep. It will be awakened as soon as the blitter
  is available. When the task first owns the blitter the blitter
  may still be finishing up a blit for the previous owner. You
  must do a <link id="WaitBlit">WaitBlit()</link> before actually using the blitter registers.</p>
<p>
  Calls to <var>OwnBlitter()</var> do not nest. If a task that owns the
  blitter calls <var>OwnBlitter()</var> again, a lockup will result.
  (Same situation if the task calls a system function
  that tries to own the blitter).</p>
<p>It is good practice to start the blitter immediately after calling
this function and then call <link id="DisOwnBlitter">DisownBlitter()</link> so other tasks can
use the blitter.</p>
</descr>
<errors>
</errors>
<seealso>
<link id="DisOwnBlitter"/>
<link id="WaitBlit"/>
</seealso>
</element>

<!-- procedure Visibility: default -->
<element name="PolyDraw">
<short>Draw lines from table of (x,y) values.</short>
<descr>Starting with the first pair in the array, draw connected lines to
  it and every successive pair.
</descr>
<errors>
</errors>
<seealso>
<link id="Draw"/>
<link id="GfxMove"/>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="PolyDraw.Rp">
<short>A pointer to RastPort structure</short>
</element>

<!-- argument Visibility: default -->
<element name="PolyDraw.Count">
<short>Number of (x,y) pairs in the array</short>
</element>

<!-- argument Visibility: default -->
<element name="PolyDraw.PolyTable">
<short>Pointer to first (x,y) pair</short>
</element>

<!-- procedure Visibility: default -->
<element name="QBlit">
<short>Queue up a request for blitter usage</short>
<descr>
<p>The routine that function in the bltnode is pointing to is
called when the blitter is ready for work. No other task will
be able to access the blitter while you're doing the blit.
Queued blits have precedence over a task that tries to own the
blitter via <link id="OwnBlitter">OwnBlitter()</link>. So all queued blitter requests will
be done first until the task that attempts a OwnBlitter can
actually access the blitter.</p>
<p>
Not all hardware has a blitter. On hardware where there is no
blitter, a blitter is simulated. Therefore all code that will
be executed in the function that is called must not contain
code that is hacking the blitter's register but should contain
calls to graphics functions instead.</p>
</descr>
<errors>
</errors>
<seealso>
<link id="QBSBlit"/>
<link id="OwnBlitter"/>
<link id="DisOwnBlitter"/>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="QBlit.Blit">
<short>A pointer to blitnode structure</short>
</element>

<!-- procedure Visibility: default -->
<element name="QBSBlit">
<short>Synchronize the blitter request with the video beam.</short>
<descr><p>
The routine that function in the bltnode is pointing to is
called when the blitter is ready for work. No other task will
be able to access the blitter while you're doing the blit.
Queued blits have precedence over a task that tries to own the
blitter via <link id="OwnBlitter">OwnBlitter()</link>. So all queued blitter requests will
be done first until the task that attempts a OwnBlitter can
actually access the blitter.</p>
<p>
Not all hardware has a blitter. On hardware where there is no
blitter, a blitter is simulated. Therefore all code that will
be executed in the function that is called must not contain
code that is hacking the blitter's register but should contain
calls to graphics functions instead.</p>
</descr>
<errors>
</errors>
<seealso>
<link id="QBlit"/>
<link id="OwnBlitter"/>
<link id="DisOwnBlitter"/>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="QBSBlit.Blit">
<short>A pointer to blitnode structure</short>
</element>

<!-- function Visibility: default -->
<element name="ReadPixel">
<short>read the pen number value of the pixel at a specified x,y location within a certain RastPort.
</short>
<descr>Combine the bits from each of the bit-planes used to describe
       a particular RastPort into the pen number selector which that
       bit combination normally forms for the system hardware selection
       of pixel color.
</descr>
<errors>
</errors>
<seealso>
<link id="WritePixel"/>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="ReadPixel.Result">
<short>The pen number of the pixel at (x,y) is returned.
    -1 is returned if the pixel cannot be read for some reason.</short>
</element>

<!-- argument Visibility: default -->
<element name="ReadPixel.Rp">
<short>A pointer to a RastPort structure</short>
</element>

<!-- argument Visibility: default -->
<element name="ReadPixel.x">
<short>X Coordinate to read</short>
</element>

<!-- argument Visibility: default -->
<element name="ReadPixel.y">
<short>Y Coordinate to read</short>
</element>

<!-- function Visibility: default -->
<element name="ReadPixelArray8">
<short>read the pen number value of a rectangular array
  of pixels starting at a specified x,y location and continuing
  through to another x,y location within a certain RastPort.</short>
<descr><p>For each pixel in a rectangular region, combine the bits from each
  of the bit-planes used to describe a particular RastPort into the pen
  number selector which that bit combination normally forms for the
  system hardware selection of pixel color.</p>
<p><var>xstop</var> must be >= <var>xstart</var>;
  <var>ystop</var> must be >= <var>ystart</var></p>
<p><b>This function doesn't make sense on true-/hicolor rastports.</b></p>
</descr>
<errors>
</errors>
<seealso>
<link id="ReadPixel"/>
<link id="ReadPixelLine8"/>
<link id="WritePixelArray8"/>
<link id="WritePixelLine8"/>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="ReadPixelArray8.Result">
<short>The number of pixels read.</short>
</element>

<!-- argument Visibility: default -->
<element name="ReadPixelArray8.Rp">
<short>A pointer to a RastPort</short>
</element>

<!-- argument Visibility: default -->
<element name="ReadPixelArray8.xStart">
<short>X starting point</short>
</element>

<!-- argument Visibility: default -->
<element name="ReadPixelArray8.yStart">
<short>Y starting point </short>
</element>

<!-- argument Visibility: default -->
<element name="ReadPixelArray8.xStop">
<short>X stop point</short>
</element>

<!-- argument Visibility: default -->
<element name="ReadPixelArray8.yStop">
<short>Y stop point</short>
</element>

<!-- argument Visibility: default -->
<element name="ReadPixelArray8.Array_">
<short>A Pointer to an array of Bytes from which to fetch the pixel data
          allocate at least ((((width + 15) shr 4) shl 4) * (ystop - ystart + 1)) bytes.</short>
</element>

<!-- argument Visibility: default -->
<element name="ReadPixelArray8.TempRp">
<short>A temporary rastport (copy of rp with Layer set = nil,
           temporary memory allocated for
           temprp^.BitMap with Rows set == 1,
           temprp^.BytesPerRow = (((width + 15) shr 4) shl 1),
           and temporary memory allocated for
           temprp^.BitMap^.Planes[])</short>
</element>

<!-- function Visibility: default -->
<element name="ReadPixelLine8">
<short>read the pen number value of a horizontal line
  of pixels starting at a specified x,y location and continuing
  right for count pixels.</short>
<descr><p>For each pixel in a rectangular region, combine the bits from each
  of the bit-planes used to describe a particular RastPort into the pen
  number selector which that bit combination normally forms for the
  system hardware selection of pixel color.</p>
<p><var>width</var> must be non negative</p>
<p><b>This function doesn't make sense on true-/hicolor rastports.</b></p>
</descr>
<errors>
</errors>
<seealso>
<link id="ReadPixel"/>
<link id="ReadPixelArray8"/>
<link id="WritePixelArray8"/>
<link id="WritePixelLine8"/>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="ReadPixelLine8.Result">
<short>The number of pixels read.</short>
</element>

<!-- argument Visibility: default -->
<element name="ReadPixelLine8.Rp">
<short>A pointer to a RastPort</short>
</element>

<!-- argument Visibility: default -->
<element name="ReadPixelLine8.xStart">
<short>X Postion in Line to start to read</short>
</element>

<!-- argument Visibility: default -->
<element name="ReadPixelLine8.yStart">
<short>Line to Read</short>
</element>

<!-- argument Visibility: default -->
<element name="ReadPixelLine8.Width">
<short>Length of line to read</short>
</element>

<!-- argument Visibility: default -->
<element name="ReadPixelLine8.Array_">
<short>Pointer to an array of Bytes from which to fetch the pixel data
          allocate at least (((width + 15) shr 4) shl 4) bytes.</short>
</element>

<!-- argument Visibility: default -->
<element name="ReadPixelLine8.TempRP">
<short>A temporary rastport (copy of rp with Layer set = nil,
           temporary memory allocated for
           temprp^.BitMap with Rows set == 1,
           temprp^.BytesPerRow = (((width + 15) shr 4) shl 1),
           and temporary memory allocated for
           temprp^.BitMap^.Planes[])</short>
</element>

<!-- procedure Visibility: default -->
<element name="RectFill">
<short>Fill a rectangular region in a RastPort.</short>
<descr><p>Fills  the  rectangular  region  specified  by  the
  parameters  with the chosen pen  colors,  areafill
  pattern, and drawing mode. If no areafill pattern is
  specified, fill the rectangular region with the FgPen
  color, taking into account the drawing mode.</p>
<p>The following relation <b>must</b> be true:
    (<var>xmax</var> >= <var>xmin</var>) and (<var>ymax</var> >= <var>ymin</var>)
</p>
</descr>
<errors>
Complement mode with FgPen complements all bitplanes.
</errors>
<seealso>
<link id="AreaEnd"/>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="RectFill.Rp">
<short>A pointer to a RastPort</short>
</element>

<!-- argument Visibility: default -->
<element name="RectFill.xMin">
<short>Left edge of rectange to fill</short>
</element>

<!-- argument Visibility: default -->
<element name="RectFill.yMin">
<short>Top edge of rectange to fill</short>
</element>

<!-- argument Visibility: default -->
<element name="RectFill.xMax">
<short>Right edge of rectange to fill</short>
</element>

<!-- argument Visibility: default -->
<element name="RectFill.yMax">
<short>Bottom edge of rectange to fill</short>
</element>

<!-- procedure Visibility: default -->
<element name="ReleasePen">
<short>Release an allocated palette entry to the free pool.</short>
<descr>
  Return the palette entry for use by other applications.
  If the reference count for this palette entry goes to zero,
  then it may be set to another RGB value.
</descr>
<errors>
</errors>
<seealso>
<link id="GetColorMap"/>
<link id="ObtainPen"/>
<link id="ObtainBestPenA"/>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="ReleasePen.Cm">
<short>ColorMap structure where the pen was allocated</short>
</element>

<!-- argument Visibility: default -->
<element name="ReleasePen.n">
<short>A palette index obtained via any of the palette allocation
         functions. Passing a -1 will result in this call doing
         nothing.</short>
</element>

<!-- procedure Visibility: default -->
<element name="RemFont">
<short>Remove a font from the system list.</short>
<descr>
 This function removes a font from the system, ensuring that
  access to it is restricted to those applications that
  currently have an active pointer to it: i.e. no new <link id="SetFont">SetFont()</link>
  requests to this font are satisfied.

</descr>
<errors>
</errors>
<seealso>
<link id="OpenFont"/>
<link id="CloseFont"/>
<link id="SetFont"/>
<link id="AddFont"/>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="RemFont.TextFont">
<short>the TextFont structure to remove.</short>
</element>

<!-- procedure Visibility: default -->
<element name="RemIBob">
<short>Immediately remove a Bob from the gel list and the RastPort.</short>
<descr>Removes a Bob immediately by uncoupling it from the gel list and
  erases it from the RastPort.

</descr>
<errors>
</errors>
<seealso>
<link id="InitGels"/>
<link id="RemVSprite"/>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="RemIBob.Bob">
<short>A pointer to the Bob to be removed</short>
</element>

<!-- argument Visibility: default -->
<element name="RemIBob.Rp">
<short>A pointer to the RastPort if the Bob is to be erased</short>
</element>

<!-- argument Visibility: default -->
<element name="RemIBob.Vp">
<short>A pointer to the ViewPort for beam-synchronizing</short>
</element>

<!-- procedure Visibility: default -->
<element name="RemVSprite">
<short>Remove a VSprite from the current gel list.</short>
<descr>Unlinks the VSprite from the current gel list.
</descr>
<errors>
</errors>
<seealso>
<link id="InitGels"/>
<link id="RemIBob"/>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="RemVSprite.VSprite">
<short>A pointer to the VSprite structure to be removed from the gel list</short>
</element>

<!-- function Visibility: default -->
<element name="ScalerDiv">
<short>Get the scaling result that BitMapScale would.</short>
<descr>Calculate the expression (factor * numerator / denominator) such
  that the result is the same as the width of the destination
  result of <link id="BitMapScale">BitMapScale()</link> when the <var>factor</var> here is the width of
  the source, and the <var>numerator</var> and <var>denominator</var> are the
  <link id="TBitScaleArgs">XDestFactor</link> and <link id="TBitScaleArgs">XSrcFactor</link> for <link id="BitMapScale">BitMapScale()</link>.
</descr>
<errors>
</errors>
<seealso>
<link id="BitMapScale"/>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="ScalerDiv.Result">
<short>Returns factor * numerator / denominator</short>
</element>

<!-- argument Visibility: default -->
<element name="ScalerDiv.Factor">
<short>A number in the range 0..16383</short>
</element>

<!-- argument Visibility: default -->
<element name="ScalerDiv.Numerator">
<short>A number in the range 0..16383</short>
</element>

<!-- argument Visibility: default -->
<element name="ScalerDiv.Denominator">
<short>A number in the range 0..16383</short>
</element>

<!-- procedure Visibility: default -->
<element name="ScrollRaster">
<short>Push bits in rectangle in raster around by dx,dy towards 0,0 inside rectangle.</short>
<descr>Scroll the contents of a rastport (dx,dy) towards (0,0).
The empty spaces is filled by a call to <link id="RectFill">RectFill()</link>.
Only the pixel in the rectangle (xMin,yMin)-(xMax,yMax)
will be affected. The lower right corner (xMax, yMax) is
automatically adjusted to the lower right corner in case
it would be outside.
After this operation the Flags bit of the layer associated
with this rastport, if there is any layer, should be tested
for simple layers in case there has any damage been created.
</descr>
<errors>
</errors>
<seealso>
<link id="ScrollRasterBF"/>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="ScrollRaster.Rp">
<short>A pointer to a rastport</short>
</element>

<!-- argument Visibility: default -->
<element name="ScrollRaster.dx">
<short>x value to move</short>
</element>

<!-- argument Visibility: default -->
<element name="ScrollRaster.dy">
<short>y value to move</short>
</element>

<!-- argument Visibility: default -->
<element name="ScrollRaster.xMin">
<short>Left edge of the rect to scroll</short>
</element>

<!-- argument Visibility: default -->
<element name="ScrollRaster.yMin">
<short>Upper edge of the rect to scroll</short>
</element>

<!-- argument Visibility: default -->
<element name="ScrollRaster.xMax">
<short>right edge of the rect to scroll</short>
</element>

<!-- argument Visibility: default -->
<element name="ScrollRaster.yMax">
<short>lower edge of the rect to scroll</short>
</element>

<!-- procedure Visibility: default -->
<element name="ScrollRasterBF">
<short>Push bits in rectangle in raster around by
                   dx,dy towards 0,0 inside rectangle. Newly empty areas
      will be filled via <link id="AGraphics.EraseRect">EraseRect()</link>.</short>
<descr>
Scroll the contents of a rastport (dx,dy) towards (0,0).
The empty spaces is filled by a call to <link id="EraseRect">EraseRect()</link>.
Only the pixel in the rectangle (xMin,yMin)-(xMax,yMax)
will be affected. The lower right corner (xMax, yMax) is
automatically adjusted to the lower right corner in case
it would be outside.
After this operation the Flags bit of the layer associated
with this rastport, if there is any layer, should be tested
for simple layers in case there has any damage been created.
</descr>
<errors>
</errors>
<seealso>
<link id="ScrollRaster"/>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="ScrollRasterBF.Rp">
<short>A pointer to a rastport</short>
</element>

<!-- argument Visibility: default -->
<element name="ScrollRasterBF.dx">
<short>x value to move</short>
</element>

<!-- argument Visibility: default -->
<element name="ScrollRasterBF.dy">
<short>y value to move</short>
</element>

<!-- argument Visibility: default -->
<element name="ScrollRasterBF.xMin">
<short>Left edge of the rect to scroll</short>
</element>

<!-- argument Visibility: default -->
<element name="ScrollRasterBF.yMin">
<short>Upper edge of the rect to scroll</short>
</element>

<!-- argument Visibility: default -->
<element name="ScrollRasterBF.xMax">
<short>right edge of the rect to scroll</short>
</element>

<!-- argument Visibility: default -->
<element name="ScrollRasterBF.yMax">
<short>lower edge of the rect to scroll</short>
</element>

<!-- procedure Visibility: default -->
<element name="ScrollVPort">
<short>Reinterpret RasInfo information in ViewPort to reflect the current Offset values.
</short>
<descr>
  After the programmer has adjusted the Offset values in
  the RasInfo structures of ViewPort, change the
  the copper lists to reflect the the Scroll positions.
  Changing the BitMap ptr in RasInfo and not changing the
  the Offsets will effect a double buffering affect.
</descr>
<errors>
Amiga video drivers can perform a validation of offsets, and may refuse
to scroll the screen too far (if they somehow can't provide the requested
offset). In this case offset values in the ViewPort will be updated in
order to reflect the real result of the operation.
</errors>
<seealso>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="ScrollVPort.Vp">
<short>A pointer to a ViewPort structure
       that is currently be displayed.</short>
</element>

<!-- procedure Visibility: default -->
<element name="SetABPenDrMd">
<short>Set pen colors and draw mode for a RastPort.</short>
<descr>
<p>Set the pen values and drawing mode for lines, fills and text.</p>
<p>This call is essentially the same as a sequence of
  <link id="SetAPen">SetAPen()</link>/<link id="SetBPen">SetBPen()</link>/<link id="SetDrMD">SetDrMD()</link>
  calls, except that it is
  significantly faster. The minterms will only be generated
  once, or not at all if nothing changed (warning to illegal
  RastPort pokers!).
</p>
<p>This functions turns on PenMode for the RastPort.
</p>
</descr>
<errors>
</errors>
<seealso>
<link id="SetAPen"/>
<link id="SetBPen"/>
<link id="SetDrMD"/>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="SetABPenDrMd.Rp">
<short>A pointer to a RastPort</short>
</element>

<!-- argument Visibility: default -->
<element name="SetABPenDrMd.APen">
<short>primary pen value</short>
</element>

<!-- argument Visibility: default -->
<element name="SetABPenDrMd.BPen">
<short>secondary pen value</short>
</element>

<!-- argument Visibility: default -->
<element name="SetABPenDrMd.DrawMode">
<short>0-255, some combinations may not make much sense.</short>
</element>

<!-- procedure Visibility: default -->
<element name="SetAPen">
<short>Set the primary pen for a RastPort.</short>
<descr>Set the primary drawing pen (A-Pen) for lines, fills, and text. This functions turns on PenMode for the RastPort.
</descr>
<errors>
</errors>
<seealso>
<link id="GetAPen"/>
<link id="SetBPen"/>
<link id="GetBPen"/>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="SetAPen.Rp">
<short>A pointer to a RastPort</short>
</element>

<!-- argument Visibility: default -->
<element name="SetAPen.Pen">
<short>Pen (0..255)</short>
</element>

<!-- procedure Visibility: default -->
<element name="SetBPen">
<short>Set secondary pen for a RastPort
</short>
<descr>Set the secondary drawing pen (B-Pen) for lines, fills, and text. This functions turns on PenMode for the RastPort.
</descr>
<errors>
</errors>
<seealso>
<link id="GetBPen"/>
<link id="SetAPen"/>
<link id="GetAPen"/>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="SetBPen.Rp">
<short>A pointer to a RastPort</short>
</element>

<!-- argument Visibility: default -->
<element name="SetBPen.Pen">
<short>Pen (0..255)</short>
</element>

<!-- function Visibility: default -->
<element name="SetChipRev">
<short>Turns on the features of a Chip Set</short>
<descr><p>Enables the features of the requested Chip Set if available,
  and updates the graphics database accordingly.</p>
<p>This routine should only be called once. It will be called by the system
  in the startup-sequence, but is included in the autodocs for authors
  of bootblock-games that wish to take advantage of post-ECS features.</p>

</descr>
<errors>
This function isn't implemented on all platforms.
</errors>
<seealso>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="SetChipRev.Result">
<short>Actual bits set in <link id="GfxBase"/>^.ChipRevBits0.</short>
</element>

<!-- argument Visibility: default -->
<element name="SetChipRev.ChipRev">
<short>Chip Rev that you would like to be enabled.</short>
</element>

<!-- procedure Visibility: default -->
<element name="SetCollision">
<short>Set a pointer to a user collision routine.</short>
<descr>Sets a specified entry (num) in the user's collision vectors table
  equal to the address of the specified collision routine.
</descr>
<errors>
</errors>
<seealso>
<link id="InitGels"/>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="SetCollision.Num">
<short>Collision vector number</short>
</element>

<!-- argument Visibility: default -->
<element name="SetCollision.Routine">
<short>A pointer to the user's collision routine</short>
</element>

<!-- argument Visibility: default -->
<element name="SetCollision.GInfo">
<short>A pointer to a GelsInfo structure</short>
</element>

<!-- procedure Visibility: default -->
<element name="SetDrMd">
<short>Set drawing mode for a RastPort</short>
<descr>Set the drawing mode for lines, fills and text.
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="SetDrMd.Rp">
<short>A pointer to a RastPort.</short>
</element>

<!-- argument Visibility: default -->
<element name="SetDrMd.DrawMode">
<short>0-255, some combinations may not make much sense. (e.g. <link id="JAM1"/>, <link id="JAM2"/>, <link id="COMPLEMENT"/>, <link id="INVERSVID"/>, <link id="AREAOUTLINE"/> or <link id="NOCROSSFILL"/> )</short>
</element>

<!-- procedure Visibility: default -->
<element name="SetFont">
<short>Set the text font and attributes in a RastPort.</short>
<descr><p>This function sets the font in the RastPort to that described
  by font, and updates the text attributes to reflect that
  change.  This function clears the effect of any previous
  soft styles.</p>
<p>
  This function had previously been documented that it would
  accept a null font.  This practice is discouraged.</p>
<ul>
  <li>Use of a RastPort with a null font with text routines has
      always been incorrect and risked the guru.</li>
  <li>Keeping an obsolete font pointer in the RastPort is no more
      dangerous than keeping a zero one there.</li>
  <li>SetFont(rp, 0) causes spurious low memory accesses under
      some system software releases.</li>
</ul>
</descr>
<errors>
</errors>
<seealso>
<link id="OpenFont"/>
<link id="diskfont.OpenDiskFont">OpenDiskFont</link>
<link id="StripFont"/>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="SetFont.Rp">
<short>The RastPort in which the text attributes are to be changed</short>
</element>

<!-- argument Visibility: default -->
<element name="SetFont.TextFont">
<short>pointer to a TextFont structure returned from <link id="OpenFont">OpenFont()</link>
         or <link id="diskfont.OpenDiskFont">OpenDiskFont</link></short>
</element>

<!-- procedure Visibility: default -->
<element name="SetMaxPen">
<short>Set maximum pen value for a rastport</short>
<descr>
<p>This will instruct the graphics library that the owner of the rastport
  will not be rendering in any colors whose index is >maxpen. If there
  are any speed optimizations which the graphics device can make based
  on this fact (for instance, setting the pixel write mask), they will
  be done.</p>
<p>
  Basically this call sets the rastport mask, if this would improve
  speed. On devices where masking would slow things down (like with
  chunky pixels), it will be a no-op.</p>
<p>The maximum pen value passed must take into account not only which
  colors you intend to render in the future, but what colors you will
  be rendering on top of.
  <var>SetMaxPen(rp, 0);</var> doesn't make much sense.
</p>
</descr>
<errors>
</errors>
<seealso>
<link id="SetWriteMask"/>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="SetMaxPen.Rp">
<short>A pointer to a RastPort</short>
</element>

<!-- argument Visibility: default -->
<element name="SetMaxPen.MaxPen">
<short>A longword pen value.</short>
</element>

<!-- function Visibility: default -->
<element name="SetOutlinePen">
<short>Set the Outline Pen value for a RastPort</short>
<descr>Set the current value of the O pen for the rastport and turn on area outline
  mode. This function should be used instead of poking the structure directly,
  because future graphics devices may store it differently, for instance,
  using more bits.
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="SetOutlinePen.Result">
<short>Returns the previous outline pen</short>
</element>

<!-- argument Visibility: default -->
<element name="SetOutlinePen.Rp">
<short>A pointer to a RastPort</short>
</element>

<!-- argument Visibility: default -->
<element name="SetOutlinePen.Pen">
<short>Pen 0..255</short>
</element>

<!-- procedure Visibility: default -->
<element name="SetRast">
<short>Set an entire drawing area to a specified color.</short>
<descr>Set the entire contents of the specified RastPort to the
       specified pen.
</descr>
<errors>
</errors>
<seealso>
<link id="RectFill"/>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="SetRast.Rp">
<short>A pointer to a RastPort</short>
</element>

<!-- argument Visibility: default -->
<element name="SetRast.Pen">
<short>The pen number (0-255) to jam into bitmap
</short>
</element>

<!-- procedure Visibility: default -->
<element name="SetRGB32">
<short>Set one color register for this Viewport.</short>
<descr><p>If there is a ColorMap for this viewport, then the value will
be stored in the ColorMap.
The selected color register is changed to match your specs.
If the color value is unused then nothing will happen.</p>
<p>
Lower order bits of the palette specification will be discarded,
depending on the color palette resolution of the target graphics
device. Use $ffffffff for the full value, $7fffffff for 50%,
etc. You can find out the palette range for your screen by
querying the graphics data base.</p>
</descr>
<errors>
</errors>
<seealso>
<link id="GetColorMap"/>
<link id="GetRGB32"/>
<link id="SetRGB32CM"/>
<link id="LoadRGB32"/>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="SetRGB32.Vp">
<short>Viewport</short>
</element>

<!-- argument Visibility: default -->
<element name="SetRGB32.n">
<short>The number of the color register to set.</short>
</element>

<!-- argument Visibility: default -->
<element name="SetRGB32.r">
<short>Red level (32 bit left justified fraction)</short>
</element>

<!-- argument Visibility: default -->
<element name="SetRGB32.g">
<short>green level (32 bit left justified fraction)</short>
</element>

<!-- argument Visibility: default -->
<element name="SetRGB32.b">
<short>blue level (32 bit left justified fraction)</short>
</element>

<!-- procedure Visibility: default -->
<element name="SetRGB32CM">
<short>Set one color register for this ColorMap.</short>
<descr>Store the (r,g,b) triplet at index n of the ColorMap structure.
       This function can be used to set up a ColorMap before before
  linking it into a viewport.

</descr>
<errors>
</errors>
<seealso>
<link id="GetColorMap"/>
<link id="GetRGB32"/>
<link id="SetRGB32"/>
<link id="LoadRGB32"/>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="SetRGB32CM.Cm">
<short>Colormap</short>
</element>

<!-- argument Visibility: default -->
<element name="SetRGB32CM.n">
<short>The number of the color register to set. Must not exceed the number of colors allocated for the colormap.</short>
</element>

<!-- argument Visibility: default -->
<element name="SetRGB32CM.r">
<short>red level (32 bit unsigned left justified fraction)</short>
</element>

<!-- argument Visibility: default -->
<element name="SetRGB32CM.g">
<short>green level (32 bit unsigned left justified fraction)</short>
</element>

<!-- argument Visibility: default -->
<element name="SetRGB32CM.b">
<short>blue level (32 bit unsigned left justified fraction)</short>
</element>

<!-- procedure Visibility: default -->
<element name="SetRGB4">
<short>Set one color register for this viewport.</short>
<descr><p>Change the color look up table so that this viewport displays
  the color (r,g,b) for pen number n.</p>
<p>If there is a ColorMap for this viewport, then the value will
be stored in the ColorMap.
The selected color register is changed to match your specs.
If the color value is unused then nothing will happen.</p>
<p>
Lower order bits of the palette specification will be discarded,
depending on the color palette resolution of the target graphics
device. Use $f for the full value, $7 for 50%,
etc. You can find out the palette range for your screen by
querying the graphics data base.
</p>
</descr>
<errors>
</errors>
<seealso>
<link id="GetColorMap"/>
<link id="GetRGB4"/>
<link id="SetRGB4CM"/>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="SetRGB4.Vp">
<short>Modify this viewport</short>
</element>

<!-- argument Visibility: default -->
<element name="SetRGB4.n">
<short>Change this color. If the color is outside the range of valid colors, it will be ignored.</short>
</element>

<!-- argument Visibility: default -->
<element name="SetRGB4.r">
<short>Red level (0-15)</short>
</element>

<!-- argument Visibility: default -->
<element name="SetRGB4.g">
<short>Green level (0-15)</short>
</element>

<!-- argument Visibility: default -->
<element name="SetRGB4.b">
<short>Blue level (0-15)</short>
</element>

<!-- procedure Visibility: default -->
<element name="SetRGB4CM">
<short>Set one color register for this ColorMap.</short>
<descr>Store the (r,g,b) triplet at index n in the ColorMap structure.
The changes will not be immediately displayed. Use this function
before linking the ColorMap to a ViewPort.
</descr>
<errors>
</errors>
<seealso>
<link id="GetColorMap"/>
<link id="GetRGB4"/>
<link id="SetRGB4"/>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="SetRGB4CM.Cm">
<short>Colormap</short>
</element>

<!-- argument Visibility: default -->
<element name="SetRGB4CM.n">
<short>The number of the color register to set.</short>
</element>

<!-- argument Visibility: default -->
<element name="SetRGB4CM.r">
<short>Red level (0-15)</short>
</element>

<!-- argument Visibility: default -->
<element name="SetRGB4CM.g">
<short>Green level (0-15)</short>
</element>

<!-- argument Visibility: default -->
<element name="SetRGB4CM.b">
<short>Blue level (0-15)</short>
</element>

<!-- procedure Visibility: default -->
<element name="SetRPAttrs">
<short>VarArgs Version of <link id="SetRPAttrsA">SetRPAttrsA()</link></short>
<descr>
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>

<!-- procedure Visibility: default -->
<element name="SetRPAttrsA">
<short>Modify rastport settings via a tag list</short>
<descr><p>Modify settings of a rastport, based on the taglist passed. See <link id="GetRPAttrsA">GetRPAttrsA()</link> for possible Tags</p>
</descr>
<errors>
</errors>
<seealso>
<link id="SetRPAttrsA"/>
<link id="SetFont"/>
<link id="SetSoftStyle"/>
<link id="SetAPen"/>
<link id="SetBPen"/>
<link id="SetDrMd"/>
<link id="SetOutLinePen"/>
<link id="SetWriteMask"/>
<link id="SetMaxPen"/>
<link id="GetRPAttrsA"/>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="SetRPAttrsA.Rp">
<short>A pointer to a RastPort</short>
</element>

<!-- argument Visibility: default -->
<element name="SetRPAttrsA.Tags">
<short>Tags for the elements to get</short>
</element>

<!-- function Visibility: default -->
<element name="SetSoftStyle">
<short>Set the soft style of the current font.</short>
<descr>This function alters the soft style of the current font.  Only
  those bits that are also set in enable are affected.  The
  resulting style is returned, since some style request changes
  will not be honored when the implicit style of the font
  precludes changing them.
</descr>
<errors>
</errors>
<seealso>
<link id="AskSoftStyle"/>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="SetSoftStyle.Result">
<short>The resulting style, both as a result of previous
             soft style selection, the effect of this function,
             and the style inherent in the set font.
</short>
</element>

<!-- argument Visibility: default -->
<element name="SetSoftStyle.Rp">
<short>A pointer to a RastPort</short>
</element>

<!-- argument Visibility: default -->
<element name="SetSoftStyle.Style">
<short>The new font style to set, subject to enable.</short>
</element>

<!-- argument Visibility: default -->
<element name="SetSoftStyle.Enable">
<short>Those bits in style to be changed.  Any set bits here
           that would not be set as a result of <link id="AskSoftStyle">AskSoftStyle()</link> will
           be ignored, and the Result will not be as
           expected.</short>
</element>

<!-- function Visibility: default -->
<element name="SetWriteMask">
<short>Set the pixel write mask value for a RastPort</short>
<descr>Set the current value of the bit write mask for the rastport.
  bits of the pixel with zeros in their mask will not be modified by
  subsequent drawing operations.
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="SetWriteMask.Result">
<short>Graphics devices which do not support per-bit masking will
  return 0 (failure).</short>
</element>

<!-- argument Visibility: default -->
<element name="SetWriteMask.Rp">
<short>A pointer to a RastPort </short>
</element>

<!-- argument Visibility: default -->
<element name="SetWriteMask.Mask">
<short>A longword mask value.</short>
</element>

<!-- procedure Visibility: default -->
<element name="SortGList">
<short>Sort the current gel list, ordering its y,x coordinates.</short>
<descr>
Sorts the current gel list according to the gels' y,x coordinates.
  This sorting is essential before calls to <link id="DrawGList">DrawGList()</link> or <link id="DoCollision">DoCollision()</link>.
</descr>
<errors>
</errors>
<seealso>
<link id="InitGels"/>
<link id="DoCollision"/>
<link id="DrawGList"/>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="SortGList.Rp">
<short>A pointer to the RastPort structure containing the GelsInfo</short>
</element>

<!-- procedure Visibility: default -->
<element name="StripFont">
<short>Remove the TextFontExtension from a font</short>
<descr>
</descr>
<errors>
</errors>
<seealso>
<link id="ExtendFont"/>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="StripFont.Font">
<short>Font to remove extension from.</short>
</element>

<!-- procedure Visibility: default -->
<element name="SyncSBitMap">
<short>Syncronize Super BitMap with whatever is in the standard Layer bounds.
</short>
<descr><p>Copy all bits from ClipRects in Layer into Super BitMap
  BitMap.  This is used for those functions that do not
  want to deal with the ClipRect structures but do want
  to be able to work with a SuperBitMap Layer.</p>
<p>After calling this function, the programmer can manipulate
  the bits in the superbitmap associated with the layer.
  Afterwards, the programmer should call CopySBitMap to
  copy the bits back into the onscreen layer.</p>
</descr>
<errors>
</errors>
<seealso>
<link id="CopySBitmap"/>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="SyncSBitMap.l">
<short>A pointer to a Layer that has a SuperBitMap
    The Layer should already be locked by the caller.
</short>
</element>

<!-- procedure Visibility: default -->
<element name="GfxText">
<short>Write text characters (no formatting).</short>
<descr>
<p>This graphics function writes printable text characters to the
  specified RastPort at the current position.  No control meaning
  is applied to any of the characters, thus only text on the
  current line is output.</p>
<p>
  The current position in the RastPort is updated to the next
  character position.
  If the characters displayed run past the RastPort boundary,
  the current position is truncated to the boundary, and
  thus does not equal the old position plus the text length.
</p>
</descr>
<errors>
</errors>
<seealso>
<link id="GfxMove"/>
<link id="TextLength"/>
<link id="TextExtent"/>
<link id="TextFit"/>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="GfxText.Rp">
<short>A pointer to the RastPort which describes where the
           text is to be output</short>
</element>

<!-- argument Visibility: default -->
<element name="GfxText.String_">
<short>The address of string to output</short>
</element>

<!-- argument Visibility: default -->
<element name="GfxText.Count">
<short>The number of characters in the string. If 0, there are no characters to be output.
</short>
</element>

<!-- procedure Visibility: default -->
<element name="TextExtent">
<short>Determine raster extent of text data.</short>
<descr><p>This function determines a more complete metric of the space
  that a text string would render into than the <link id="TextLength">TextLength()</link>
  function.</p>
<p><link id="TTextExtent">TextExtent_</link> is filled in as follows:</p>
<dl>
  <dt>te_Width</dt><dd>same as <link id="TextLength">TextLength()</link> result: the RastPort current x position
                  advance that rendering this text would cause.</dd>
  <dt>te_Height</dt><dd>same as <link id="TTextFont">tf_YSize</link>.  The height of the
                  font.</dd>
  <dt>te_Extent.MinX</dt><dd>the offset to the left side of the
                  rectangle this would render into.  Often zero.</dd>
  <dt>te_Extent.MinY</dt><dd>same as -<link id="TTextFont">tf_Baseline</link>.  The offset
                  from the baseline to the top of the rectangle
                  this would render into.</dd>
  <dt>te_Extent.MaxX</dt><dd>the offset of the left side of the
                  rectangle this would render into.  Often the
                  same as <var>te_Width</var> - 1.</dd>
  <dt>te_Extent.MaxY</dt><dd>same as <link id="TTextFont">tf_YSize</link> - <link id="TTextFont">tf_Baseline</link> - 1.
                  The offset from the baseline to the bottom of
                  the rectangle this would render into.</dd>
</dl>
</descr>
<errors>
</errors>
<seealso>
<link id="TextLength"/>
<link id="GfxText"/>
<link id="TextFit"/>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="TextExtent.Rp">
<short>A pointer to the RastPort which describes where the text attributes reside.</short>
</element>

<!-- argument Visibility: default -->
<element name="TextExtent.String_">
<short>The address of the string to determine the length of.</short>
</element>

<!-- argument Visibility: default -->
<element name="TextExtent.Count">
<short>the number of characters in the string. If 0, there are no characters in the string.</short>
</element>

<!-- argument Visibility: default -->
<element name="TextExtent.TextExtent_">
<short>A structure to hold the result.</short>
</element>

<!-- function Visibility: default -->
<element name="TextFit">
<short>Count characters that will fit in a given extent</short>
<descr><p>
  This function determines how many of the characters of the
  provided string will fit into the space described by the
  constraining parameters.  It also returns the extent of
  that number of characters.</p>
</descr>
<errors>
</errors>
<seealso>
<link id="TextLength"/>
<link id="TextExtent"/>
<link id="GfxText"/>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="TextFit.Result">
<short>The number of characters from the origin of the
          given string that will fit in both the constraining
          extent (which specifies a CP bound and a rendering
          box relative to the origin) and in the rendering width
          and height specified.The result is 0 chars and an empty <var>TextExtent</var> when the fit
  cannot be performed.  This occurs not only when no text will
  fit in the provided constraints, but also when:
  The RastPort's <link id="TRastPort">rp_TxSpacing</link> sign and magnitude is so
  great it reverses the path of the text or the <var>constrainingExtent</var> does not include x = 0.</short>
</element>

<!-- argument Visibility: default -->
<element name="TextFit.Rp">
<short>A pointer to the RastPort which describes where the text attributes reside.</short>
</element>

<!-- argument Visibility: default -->
<element name="TextFit.String_">
<short>The address of string to determine the constraint of</short>
</element>

<!-- argument Visibility: default -->
<element name="TextFit.StrLen">
<short>The number of characters in the string. If 0, there are no characters in the string.</short>
</element>

<!-- argument Visibility: default -->
<element name="TextFit.TextExtent_">
<short>A structure to hold the extent result.</short>
</element>

<!-- argument Visibility: default -->
<element name="TextFit.ConstrainingExtent">
<short>The extent that the text must fit in.
      This can be nil, indicating only the constrainingBit
      dimensions will describe the constraint.</short>
</element>

<!-- argument Visibility: default -->
<element name="TextFit.StrDirection">
<short>the offset to add to the string pointer to
      get to the next character in the string.  Usually 1.
      Set to -1 and the string to the end of the string to
      perform a <var>TextFit()</var> anchored at the end.  No other value
      is valid.</short>
</element>

<!-- argument Visibility: default -->
<element name="TextFit.ConstrainingBitWidth">
<short>An alternative way to specify the
      rendering box constraint width that is independent of
      the rendering origin.  Range 0..32767.</short>
</element>

<!-- argument Visibility: default -->
<element name="TextFit.ConstrainingBitHeight">
<short>An alternative way to specify the
      rendering box constraint height that is independent of
      the rendering origin.  Range 0..32767.
</short>
</element>

<!-- function Visibility: default -->
<element name="TextLength">
<short>Determine raster length of text data.</short>
<descr>This graphics function determines the length that text data
  would occupy if output to the specified RastPort with the
  current attributes.  The length is specified as the number of
  raster dots: to determine what the current position would be
  after a <link id="GfxText">GfxText()</link> using this string, add the length to <link id="TRastPort">cp_x</link>
  (<link id="TRastPort">cp_y</link> is unchanged by <link id="GfxText">GfxText()</link>).  Use the newer <link id="TextExtent">TextExtent()</link> to
  get more information.

</descr>
<errors>
</errors>
<seealso>
<link id="TextFit"/>
<link id="TextExtent"/>
<link id="GfxText"/>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="TextLength.Result">
<short>The number of pixels in x this text would occupy, not
           including any negative kerning that may take place at
           the beginning of the text string, nor taking into
           account the effects of any clipping that may take
           place.</short>
</element>

<!-- argument Visibility: default -->
<element name="TextLength.Rp">
<short>A pointer to the RastPort which describes where the text attributes reside.</short>
</element>

<!-- argument Visibility: default -->
<element name="TextLength.string_">
<short>The address of string to determine the length of</short>
</element>

<!-- argument Visibility: default -->
<element name="TextLength.Count">
<short>The string length. If 0, there are no characters in the string.
</short>
</element>

<!-- function Visibility: default -->
<element name="UCopperListInit">
<short>Allocates and initializes copperlist structures and buffers
internal to UCopList structure.</short>
<descr>
</descr>
<errors>
</errors>
<seealso>
<link id="CMOVE"/>
<link id="CWAIT"/>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="UCopperListInit.Result">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="UCopperListInit.Ucl">
<short>A pointer to a UCopList structure. Must not be NULL!</short>
</element>

<!-- argument Visibility: default -->
<element name="UCopperListInit.n">
<short></short>
</element>

<!-- procedure Visibility: default -->
<element name="UnlockLayerRom">
<short>Unlock Layer structure by ROM(gfx lib) code.</short>
<descr>Release the lock on this layer. If the same task has called
  <link id="LockLayerRom">LockLayerRom()</link> more than once than the same number of calls to
  <var>UnlockLayerRom()</var> must happen before the layer is actually freed
  so that other tasks may use it.
  This call does destroy scratch registers.
  This call is identical to <link id="layers.UnlockLayer">UnlockLayer()</link>.
</descr>
<errors>
</errors>
<seealso>
<link id="LockLayerRom"/>
<link id="layers.UnlockLayer">UnlockLayer</link>
<link id="layers.LockLayer">LockLayer</link>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="UnlockLayerRom.l">
<short>A pointer to Layer structure</short>
</element>

<!-- function Visibility: default -->
<element name="VBeamPos">
<short>Get vertical beam position at this instant.</short>
<descr>interrogates hardware for beam position and returns value.
  valid results in are the range of 0-511.
  Because of multitasking, the actual value returned may have
  no use. If you are the highest priority task then the value
  returned should be close, within 1 line.
</descr>
<errors>
This function isn't implemented on all platforms.
</errors>
<seealso>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="VBeamPos.Result">
<short></short>
</element>

<!-- function Visibility: default -->
<element name="VideoControlTags">
<short>VarArgs Version of <link id="VideoControl">VideoControl()</link> </short>
<descr>
</descr>
<errors>
</errors>
<seealso>
<link id="GetColorMap"/>
<link id="FreeColorMap"/>
</seealso>
</element>

<!-- function Visibility: default -->
<element name="VideoControl">
<short>Modify the operation of a ViewPort's ColorMap</short>
<descr>
Process the commands in the VideoControl command TagItem buffer
using cm as the target, with respect to its "attached" ViewPort.
</descr>
<errors>
<b>Not implemented</b>
</errors>
<seealso>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="VideoControl.Result">
<short>error = nil</short>
</element>

<!-- argument Visibility: default -->
<element name="VideoControl.Cm">
<short>A pointer to a colormap</short>
</element>

<!-- argument Visibility: default -->
<element name="VideoControl.Tags">
<short>Videocontrol tags (VTAG_*)</short>
</element>

<!-- procedure Visibility: default -->
<element name="WaitBlit">
<short>Wait for the blitter to be finished before proceeding with anything else.</short>
<descr>WaitBlit returns when the blitter is idle. This function should
  normally only be used when dealing with the blitter in a
  synchronous manner, such as when using <link id="OwnBlitter">OwnBlitter()</link> and <link id="DisownBlitter">DisownBlitter()</link>.
  <var>WaitBlit()</var> does not wait for all blits queued up using <link id="QBlit">QBlit()</link> or
  <link id="QBSBlit">QBSBlit()</link>. You should call <var>WaitBlit()</var> if you are just about to modify or
  free some memory that the blitter may be using.
</descr>
<errors>
<b>This function is unimplemented.</b>
</errors>
<seealso>
<link id="OwnBlitter"/>
<link id="DisownBlitter"/>
</seealso>
</element>

<!-- procedure Visibility: default -->
<element name="WaitBOVP">
<short>Wait till vertical beam reached bottom of this viewport.</short>
<descr>
Returns when the vertical beam has reached the bottom of this viewport
</descr>
<errors>
<b>This function is unimplemented.</b>
</errors>
<seealso>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="WaitBOVP.Vp">
<short>A pointer to ViewPort structure</short>
</element>

<!-- procedure Visibility: default -->
<element name="WaitTOF">
<short>Wait for the top of the next video frame.</short>
<descr>Wait  for vertical blank to occur and all vertical blank interrupt routines to complete before returning to caller. Adds the task to the TOF queue; it will be signalled when the vertical
blank interrupt occurs.
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>

<!-- function Visibility: default -->
<element name="WeighTAMatch">
<short>Determines how well two font descriptions match.</short>
<descr>
</descr>
<errors>
Does not yet take tags into account.
</errors>
<seealso>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="WeighTAMatch.Result">
<short>A weight number which measures how well the TextAttrs
match. The weight may vary from 0 (no match) to
<link id="MAXFONTMATCHWEIGHT"/> (perfect match).</short>
</element>

<!-- argument Visibility: default -->
<element name="WeighTAMatch.ReqTextAttr">
<short>The required textattr.</short>
</element>

<!-- argument Visibility: default -->
<element name="WeighTAMatch.TargetTextAttr">
<short>A textattr of potential match.</short>
</element>

<!-- argument Visibility: default -->
<element name="WeighTAMatch.TargetTags">
<short>Tags for the targetTextAttr.</short>
</element>

<!-- procedure Visibility: default -->
<element name="WriteChunkyPixels">
<short>Write the pen number value of a rectangular array
  of pixels starting at a specified x,y location and continuing
  through to another x,y location within a certain RastPort.</short>
<descr><p>For each pixel in a rectangular region, decode the pen number selector
  from a linear array of pen numbers into the bit-planes used to describe
  a particular rastport.</p>
<p>xstop must be >= xstart and ystop must be >= ystart
  The source array can be in fast RAM.</p>
</descr>
<errors>
</errors>
<seealso>
<link id="WritePixel"/>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="WriteChunkyPixels.Rp">
<short>Destination RastPort</short>
</element>

<!-- argument Visibility: default -->
<element name="WriteChunkyPixels.xStart">
<short>Starting x Point</short>
</element>

<!-- argument Visibility: default -->
<element name="WriteChunkyPixels.yStart">
<short>Starting y Point</short>
</element>

<!-- argument Visibility: default -->
<element name="WriteChunkyPixels.xStop">
<short>Stop X Point</short>
</element>

<!-- argument Visibility: default -->
<element name="WriteChunkyPixels.yStop">
<short>Stop Y Point</short>
</element>

<!-- argument Visibility: default -->
<element name="WriteChunkyPixels.Array_">
<short>Array with pen values</short>
</element>

<!-- argument Visibility: default -->
<element name="WriteChunkyPixels.BytesPerRow">
<short>The number of bytes per row in the source array.
This should be at least as large as the number of pixels
being written per line.</short>
</element>

<!-- function Visibility: default -->
<element name="WritePixel">
<short>Change the pen num of one specific pixel in a specified RastPort.</short>
<descr>Changes the pen number of the selected pixel in the specified
       RastPort to that currently specified by PenA, the primary
       drawing pen. Obeys minterms in RastPort.
</descr>
<errors>
</errors>
<seealso>
<link id="ReadPixel"/>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="WritePixel.Result">
<short>0 if pixel succesfully changed
        = -1 if (x,y) is outside the RastPort</short>
</element>

<!-- argument Visibility: default -->
<element name="WritePixel.Rp">
<short>A pointer to a RastPort</short>
</element>

<!-- argument Visibility: default -->
<element name="WritePixel.x">
<short>X coordinate of Pixel</short>
</element>

<!-- argument Visibility: default -->
<element name="WritePixel.y">
<short>Y coordinate of Pixel</short>
</element>

<!-- function Visibility: default -->
<element name="WritePixelArray8">
<short>Write the pen number value of a rectangular array
  of pixels starting at a specified x,y location and continuing
  through to another x,y location within a certain RastPort.</short>
<descr>For each pixel in a rectangular region, decode the pen number selector
  from a linear array of pen numbers into the bit-planes used to describe
  a particular rastport. xstop must be >= xstart and ystop must be >= ystart
</descr>
<errors>
</errors>
<seealso>
<link id="WritePixel"/>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="WritePixelArray8.Result">
<short>Count will be set to the number of pixels plotted.</short>
</element>

<!-- argument Visibility: default -->
<element name="WritePixelArray8.Rp">
<short>A pointer to a RastPort</short>
</element>

<!-- argument Visibility: default -->
<element name="WritePixelArray8.xStart">
<short>X Start point</short>
</element>

<!-- argument Visibility: default -->
<element name="WritePixelArray8.yStart">
<short>Y Start point</short>
</element>

<!-- argument Visibility: default -->
<element name="WritePixelArray8.xStop">
<short>X end point</short>
</element>

<!-- argument Visibility: default -->
<element name="WritePixelArray8.yStop">
<short>Y end point</short>
</element>

<!-- argument Visibility: default -->
<element name="WritePixelArray8.Array_">
<short>a pointer to an array of Bytess from which to fetch the
           pixel data. Allocate at least
           ((((Width + 15) shr 4) shl 4) * (ystop - ystart + 1)) bytes.</short>
</element>

<!-- argument Visibility: default -->
<element name="WritePixelArray8.TempRp">
<short>A temporary rastport (copy of rp with Layer set = nil,
temporary memory allocated for temprp^.BitMap with Rows set = 1,
temprp^.BitMap with BytesPerRow = (((width + 15) shr 4) shl 1),
and temporary memory allocated for temprp^.BitMap^.Planes[])</short>
</element>

<!-- function Visibility: default -->
<element name="WritePixelLine8">
<short>Write the pen number value of a horizontal line
  of pixels starting at a specified x,y location and continuing
  right for count pixels.</short>
<descr>For each pixel in a horizontal region, decode the pen number selector
  from a linear array of pen numbers into the bit-planes used to describe
  a particular rastport.

</descr>
<errors>
</errors>
<seealso>
<link id="WritePixel"/>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="WritePixelLine8.Result">
<short>Count will be set to the number of pixels plotted</short>
</element>

<!-- argument Visibility: default -->
<element name="WritePixelLine8.Rp">
<short>A pointer to a RastPort</short>
</element>

<!-- argument Visibility: default -->
<element name="WritePixelLine8.xStart">
<short>X Start point</short>
</element>

<!-- argument Visibility: default -->
<element name="WritePixelLine8.yStart">
<short>Line To write</short>
</element>

<!-- argument Visibility: default -->
<element name="WritePixelLine8.Width">
<short>Count of horizontal pixels to write</short>
</element>

<!-- argument Visibility: default -->
<element name="WritePixelLine8.Array_">
<short>pointer to an array of Bytes from which to fetch the pixel data
          allocate at least (((Width + 15) shr 4) shl 4) bytes.</short>
</element>

<!-- argument Visibility: default -->
<element name="WritePixelLine8.TempRP">
<short>temporary rastport (copy of rp with Layer set = nil,
           temporary memory allocated for
           temprp^.BitMap with Rows set = 1,
           temprp^.BitMap BytesPerRow = (((Width + 15) shr 4) shl 1),
           and temporary memory allocated for
           temprp^.BitMap^.Planes[])</short>
</element>

<!-- function Visibility: default -->
<element name="XorRectRegion">
<short>Perform 2d XOR operation of rectangle with region, leaving result in region</short>
<descr>Add portions of rectangle to region if they are not in
  the region.
  Remove portions of rectangle from region if they are
  in the region.
</descr>
<errors>
</errors>
<seealso>
<link id="OrRegionRegion"/>
<link id="AndRegionRegion"/>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="XorRectRegion.Result">
<short>True if successful operation, False if ran out of memory</short>
</element>

<!-- argument Visibility: default -->
<element name="XorRectRegion.Reg">
<short>A pointer to a Region</short>
</element>

<!-- argument Visibility: default -->
<element name="XorRectRegion.Rect">
<short>A pointer to a Rectangle</short>
</element>

<!-- function Visibility: default -->
<element name="XorRegionRegion">
<short>Perform 2d XOR operation of one region with second region, leaving result in second region</short>
<descr>Join the regions together. If any part of SrcRegion overlaps
  DestRegion then remove that from the new region.
</descr>
<errors>
</errors>
<seealso>
<link id="OrRegionRegion"/>
<link id="AndRegionRegion"/>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="XorRegionRegion.Result">
<short>True if successful operation, False if ran out of memory</short>
</element>

<!-- argument Visibility: default -->
<element name="XorRegionRegion.SrcRegion">
<short>A pointer to Source Region</short>
</element>

<!-- argument Visibility: default -->
<element name="XorRegionRegion.DestRegion">
<short>A pointer to Destination Region</short>
</element>

<!-- function Visibility: default -->
<element name="BestModeID">
<short>VarArgs version of <link id="BestModeIDA">BestModeIDA()</link></short>
<descr>
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>

<!-- procedure Visibility: default -->
<element name="InitAnimate">
<short>Init AnimObject pointer, set to nil</short>
<descr>
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="InitAnimate.Animkey">
<short></short>
</element>

<!-- function Visibility: default -->
<element name="RasSize">
<short>Get Size of an rastport.</short>
<descr>
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="RasSize.Result">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="RasSize.w">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="RasSize.h">
<short></short>
</element>

<!-- procedure Visibility: default -->
<element name="BNDRYOFF">
<short>Turn Boundary off</short>
<descr>
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="BNDRYOFF.w">
<short></short>
</element>

<!-- procedure Visibility: default -->
<element name="SetAfPt">
<short>Set Area PAttern and Point Size</short>
<descr>
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="SetAfPt.w">
<short>A pointer to a Rastport</short>
</element>

<!-- argument Visibility: default -->
<element name="SetAfPt.p">
<short>Area Fill pattern</short>
</element>

<!-- argument Visibility: default -->
<element name="SetAfPt.n">
<short>Area Point Size</short>
</element>

<!-- procedure Visibility: default -->
<element name="SetDrPt">
<short>Set Draw Pattern</short>
<descr>
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="SetDrPt.w">
<short>A pointer to a RastPort</short>
</element>

<!-- argument Visibility: default -->
<element name="SetDrPt.p">
<short>Pattern to Set</short>
</element>

<!-- procedure Visibility: default -->
<element name="SetOPen">
<short>Set Outline pen</short>
<descr>
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="SetOPen.w">
<short>A pointer to a RastPort</short>
</element>

<!-- argument Visibility: default -->
<element name="SetOPen.c">
<short>Pen 0..255</short>
</element>

<!-- procedure Visibility: default -->
<element name="SetWrMsk">
<short>Set Write Mask for RastPort</short>
<descr>
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="SetWrMsk.w">
<short>A pointer to a RastPort</short>
</element>

<!-- argument Visibility: default -->
<element name="SetWrMsk.m">
<short>Mask to set</short>
</element>

<!-- procedure Visibility: default -->
<element name="DrawCircle">
<short>Draws a Circle</short>
<descr>
Calls <link id="DrawEllipse">DrawEllipse()</link> with a = b = r
</descr>
<errors>
</errors>
<seealso>
<link id="DrawEllipse"/>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="DrawCircle.Rp">
<short>A pointer to a RastPort</short>
</element>

<!-- argument Visibility: default -->
<element name="DrawCircle.xCenter">
<short>X coordinate for center of Circle</short>
</element>

<!-- argument Visibility: default -->
<element name="DrawCircle.yCenter">
<short>Y coordinate for center of Circle</short>
</element>

<!-- argument Visibility: default -->
<element name="DrawCircle.r">
<short>Radius of Circle</short>
</element>

<!-- function Visibility: default -->
<element name="AreaCircle">
<short>Draws a Circle in an Area</short>
<descr>Calls <link id="AreaEllipse">AreaEllipse()</link> with a = b = r
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="AreaCircle.Result">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="AreaCircle.Rp">
<short>A pointer to a RastPort</short>
</element>

<!-- argument Visibility: default -->
<element name="AreaCircle.xCenter">
<short>X coordinate for center of Circle</short>
</element>

<!-- argument Visibility: default -->
<element name="AreaCircle.yCenter">
<short>Y coordinate for center of Circle</short>
</element>

<!-- argument Visibility: default -->
<element name="AreaCircle.r">
<short>Radius of Circle</short>
</element>

<!-- uses unit Visibility: default -->
<element name="exec">
<short></short>
</element>

<!-- uses unit Visibility: default -->
<element name="hardware">
<short></short>
</element>

<!-- uses unit Visibility: default -->
<element name="utility">
<short></short>
</element>

<!-- variable Visibility: default -->
<element name="tLayer.reserved">
<short></short>
</element>

<!-- variable Visibility: default -->
<element name="tLayer.reserved1">
<short></short>
</element>

<!-- constant Visibility: default -->
<element name="VSPRITE_f">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- alias type Visibility: default -->
<element name="VUserStuff">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- alias type Visibility: default -->
<element name="BUserStuff">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- alias type Visibility: default -->
<element name="AUserStuff">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- array type Visibility: default -->
<element name="collTable">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- pointer type Visibility: default -->
<element name="pIsrvstr">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- record type Visibility: default -->
<element name="tIsrvstr">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- variable Visibility: default -->
<element name="tIsrvstr.is_Node">
<short></short>
</element>

<!-- variable Visibility: default -->
<element name="tIsrvstr.Iptr">
<short></short>
</element>

<!-- variable Visibility: default -->
<element name="tIsrvstr.code">
<short></short>
</element>

<!-- variable Visibility: default -->
<element name="tIsrvstr.ccode">
<short></short>
</element>

<!-- variable Visibility: default -->
<element name="tIsrvstr.Carg">
<short></short>
</element>

<!-- constant Visibility: default -->
<element name="VGA70_COLORCLOCKS">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="VGA70_TOTAL_ROWS">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="VGA70_DENISE_MIN">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="MIN_VGA70_ROW">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="VGA70_HBSTRT">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="VGA70_HSSTRT">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="VGA70_HSSTOP">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="VGA70_HBSTOP">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="VGA70_VBSTRT">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="VGA70_VSSTRT">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="VGA70_VSSTOP">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="VGA70_VBSTOP">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="VGA70_BEAMCON">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="VGA70_MONITOR_NAME">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="COLORMAP_TYPE_V1_4">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="VPF_AGNUS">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="MODE_640">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="PLNCNTMSK">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="PLNCNTSHFT">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="PF2PRI">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="COLORON">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="DBLPF">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="HOLDNMODIFY">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="INTERLACE">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="PFA_FINE_SCROLL">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="PFB_FINE_SCROLL_SHIFT">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="PF_FINE_SCROLL_MASK">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="DIW_HORIZ_POS">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="DIW_VRTCL_POS">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="DIW_VRTCL_POS_SHIFT">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="DFTCH_MASK">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="VPOSRLOF">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="AllocSpriteDataA.bm">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="AllocSpriteDataA.tags">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="AndRectRegion.region">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="AndRectRegion.rectangle">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="AttemptLockLayerRom.layer">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="BltPattern.maskBPR">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="CalcIVG.v">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="CalcIVG.vp">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="ChangeSprite.sprite">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="ClearRectRegion.region">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="ClearRectRegion.rectangle">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="CloseMonitor.monitorSpec">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="CMove.destination">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="CMove.data">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="CoerceMode.vp">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="CopySBitMap.layer">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="FindColor.maxcolor">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="FindDisplayInfo.displayID">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="FreeGBuffers.flag">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="FreeSprite.num">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="FreeSpriteData.sp">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="GetBitMapAttr.bm">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="GetBitMapAttr.attrnum">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="GetDisplayInfoData.displayID">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="GetExtSpriteA.ss">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="GetGBuffers.flag">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="GetSprite.num">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="GfxAssociate.associateNode">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="GfxAssociate.gfxNodePtr">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="GfxFree.gfxNodePtr">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="GfxLookUp.associateNode">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="GfxNew.gfxNodeType">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="InitArea.vectorBuffer">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="InitBitMap.bitMap">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="LockLayerRom.layer">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="MakeVPort.vp">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="gfxMove.rp">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="gfxMove.x">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="gfxMove.y">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="NextDisplayInfo.displayID">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="ObtainPen.f">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="OrRectRegion.region">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="OrRectRegion.rectangle">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="SetChipRev.want">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="SetCollision.gelsInfo">
<short></short>
</element>

<!-- function result Visibility: default -->
<element name="SetFont.Result">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="SetRGB4.index">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="SetRGB4.red">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="SetRGB4.green">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="SetRGB4.blue">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="SetRGB4CM.colorMap">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="SetRGB4CM.index">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="SetRGB4CM.red">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="SetRGB4CM.green">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="SetRGB4CM.blue">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="SetWriteMask.msk">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="SyncSBitMap.layer">
<short></short>
</element>

<!-- function result Visibility: default -->
<element name="GfxText.Result">
<short></short>
</element>

<!-- function result Visibility: default -->
<element name="TextExtent.Result">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="TextExtent._textExtent">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="TextFit.textExtent">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="UCopperListInit.uCopList">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="UnlockLayerRom.layer">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="VideoControl.colorMap">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="VideoControl.tagarray">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="XorRectRegion.region">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="XorRectRegion.rectangle">
<short></short>
</element>

<!-- function result Visibility: default -->
<element name="AllocSpriteData.Result">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="AllocSpriteData.bm">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="AllocSpriteData.argv">
<short></short>
</element>

<!-- function result Visibility: default -->
<element name="BestModeID.Result">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="BestModeID.argv">
<short></short>
</element>

<!-- function result Visibility: default -->
<element name="ChangeExtSprite.Result">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="ChangeExtSprite.vp">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="ChangeExtSprite.oldsprite">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="ChangeExtSprite.newsprite">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="ChangeExtSprite.argv">
<short></short>
</element>

<!-- function result Visibility: default -->
<element name="ExtendFontTags.Result">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="ExtendFontTags.font">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="ExtendFontTags.argv">
<short></short>
</element>

<!-- function result Visibility: default -->
<element name="GetExtSprite.Result">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="GetExtSprite.ss">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="GetExtSprite.argv">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="GetRPAttrs.rp">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="GetRPAttrs.argv">
<short></short>
</element>

<!-- function result Visibility: default -->
<element name="ObtainBestPen.Result">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="ObtainBestPen.cm">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="ObtainBestPen.r">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="ObtainBestPen.g">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="ObtainBestPen.b">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="ObtainBestPen.argv">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="SetRPAttrs.rp">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="SetRPAttrs.argv">
<short></short>
</element>

<!-- function result Visibility: default -->
<element name="VideoControlTags.Result">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="VideoControlTags.colorMap">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="VideoControlTags.argv">
<short></short>
</element>

<!-- function Visibility: default -->
<element name="WeighTAMatchTags">
<short></short>
<descr>
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="WeighTAMatchTags.Result">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="WeighTAMatchTags.reqTextAttr">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="WeighTAMatchTags.targetTextAttr">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="WeighTAMatchTags.argv">
<short></short>
</element>

<!-- procedure Visibility: default -->
<element name="SafeSetOutlinePen">
<short></short>
<descr>
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="SafeSetOutlinePen.w">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="SafeSetOutlinePen.c">
<short></short>
</element>

<!-- procedure Visibility: default -->
<element name="SafeSetWriteMask">
<short></short>
<descr>
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="SafeSetWriteMask.w">
<short></short>
</element>

<!-- argument Visibility: default -->
<element name="SafeSetWriteMask.m">
<short></short>
</element>

<!-- procedure Visibility: default -->
<element name="OFF_DISPLAY">
<short></short>
<descr>
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="OFF_DISPLAY.cust">
<short></short>
</element>

<!-- procedure Visibility: default -->
<element name="ON_DISPLAY">
<short></short>
<descr>
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="ON_DISPLAY.cust">
<short></short>
</element>

<!-- procedure Visibility: default -->
<element name="OFF_SPRITE">
<short></short>
<descr>
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="OFF_SPRITE.cust">
<short></short>
</element>

<!-- procedure Visibility: default -->
<element name="ON_SPRITE">
<short></short>
<descr>
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="ON_SPRITE.cust">
<short></short>
</element>

<!-- procedure Visibility: default -->
<element name="OFF_VBLANK">
<short></short>
<descr>
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="OFF_VBLANK.cust">
<short></short>
</element>

<!-- procedure Visibility: default -->
<element name="ON_VBLANK">
<short></short>
<descr>
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="ON_VBLANK.cust">
<short></short>
</element>

<!-- constant Visibility: default -->
<element name="VPF_A2024">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- constant Visibility: default -->
<element name="VPF_TENHZ">
<short></short>
<descr>
</descr>
<seealso>
</seealso>
</element>

<!-- function result Visibility: default -->
<element name="ClearRectRegion.Result">
<short></short>
</element>

<!-- procedure Visibility: default -->
<element name="ClearRegion">
<short></short>
<descr>
</descr>
<errors>
</errors>
<seealso>
</seealso>
</element>

<!-- argument Visibility: default -->
<element name="ClearRegion.region">
<short></short>
</element>


</module> <!-- agraphics -->

</package>
</fpdoc-descriptions>
